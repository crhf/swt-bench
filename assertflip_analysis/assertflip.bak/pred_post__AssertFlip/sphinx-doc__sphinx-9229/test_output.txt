+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD 876fa81e0a038cda466925b85ccf6c5452e0f685
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   setup.py
	modified:   tox.ini

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit 876fa81e0a038cda466925b85ccf6c5452e0f685
Merge: 99f467257 4f20b44ae
Author: Takeshi KOMIYA <i.tkomiya@gmail.com>
Date:   Sun May 16 13:55:09 2021 +0900

    Merge pull request #9235 from sphinx-doc/bot/pull-translations
    
    Update message catalogs

+ git diff 876fa81e0a038cda466925b85ccf6c5452e0f685
diff --git a/setup.py b/setup.py
index b669afc00..0986baec3 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 6):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp',
-    'sphinxcontrib-serializinghtml',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp<=2.0.4',
+    'sphinxcontrib-serializinghtml<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.14,<0.18',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/tox.ini b/tox.ini
index a363e187f..3b8bc12d0 100644
--- a/tox.ini
+++ b/tox.ini
@@ -27,7 +27,7 @@ setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils,ignore::DeprecationWarning:pip._vendor.packaging.version
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -m pytest --durations 25 {posargs}
+    python -X dev -m pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e '.[test]'
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: sphinxcontrib-applehelp<=1.0.7 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==4.1.0.dev20250825) (1.0.4)
Requirement already satisfied: sphinxcontrib-devhelp<=1.0.5 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==4.1.0.dev20250825) (1.0.2)
Requirement already satisfied: sphinxcontrib-jsmath in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==4.1.0.dev20250825) (1.0.1)
Requirement already satisfied: sphinxcontrib-htmlhelp<=2.0.4 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==4.1.0.dev20250825) (2.0.1)
Requirement already satisfied: sphinxcontrib-serializinghtml<=1.1.9 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==4.1.0.dev20250825) (1.1.5)
Requirement already satisfied: sphinxcontrib-qthelp<=1.0.6 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==4.1.0.dev20250825) (1.0.3)
Requirement already satisfied: Jinja2<3.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==4.1.0.dev20250825) (2.11.3)
Requirement already satisfied: Pygments>=2.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==4.1.0.dev20250825) (2.19.2)
Requirement already satisfied: docutils<0.18,>=0.14 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==4.1.0.dev20250825) (0.17.1)
Requirement already satisfied: snowballstemmer>=1.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==4.1.0.dev20250825) (3.0.1)
Requirement already satisfied: babel>=1.3 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==4.1.0.dev20250825) (2.17.0)
Requirement already satisfied: alabaster<0.7.12,>=0.7 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==4.1.0.dev20250825) (0.7.11)
Requirement already satisfied: imagesize in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==4.1.0.dev20250825) (1.4.1)
Requirement already satisfied: requests>=2.5.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==4.1.0.dev20250825) (2.32.5)
Requirement already satisfied: setuptools in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==4.1.0.dev20250825) (78.1.1)
Requirement already satisfied: packaging in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==4.1.0.dev20250825) (25.0)
Requirement already satisfied: markupsafe<=2.0.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==4.1.0.dev20250825) (2.0.1)
Requirement already satisfied: pytest in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==4.1.0.dev20250825) (8.4.1)
Requirement already satisfied: pytest-cov in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==4.1.0.dev20250825) (6.2.1)
Requirement already satisfied: html5lib in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==4.1.0.dev20250825) (1.1)
Requirement already satisfied: cython in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==4.1.0.dev20250825) (3.1.3)
Requirement already satisfied: charset_normalizer<4,>=2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from requests>=2.5.0->Sphinx==4.1.0.dev20250825) (3.4.3)
Requirement already satisfied: idna<4,>=2.5 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from requests>=2.5.0->Sphinx==4.1.0.dev20250825) (3.10)
Requirement already satisfied: urllib3<3,>=1.21.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from requests>=2.5.0->Sphinx==4.1.0.dev20250825) (2.5.0)
Requirement already satisfied: certifi>=2017.4.17 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from requests>=2.5.0->Sphinx==4.1.0.dev20250825) (2025.8.3)
Requirement already satisfied: six>=1.9 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from html5lib->Sphinx==4.1.0.dev20250825) (1.17.0)
Requirement already satisfied: webencodings in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from html5lib->Sphinx==4.1.0.dev20250825) (0.5.1)
Requirement already satisfied: exceptiongroup>=1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest->Sphinx==4.1.0.dev20250825) (1.3.0)
Requirement already satisfied: iniconfig>=1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest->Sphinx==4.1.0.dev20250825) (2.1.0)
Requirement already satisfied: pluggy<2,>=1.5 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest->Sphinx==4.1.0.dev20250825) (1.6.0)
Requirement already satisfied: tomli>=1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest->Sphinx==4.1.0.dev20250825) (2.2.1)
Requirement already satisfied: typing-extensions>=4.6.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from exceptiongroup>=1->pytest->Sphinx==4.1.0.dev20250825) (4.14.1)
Requirement already satisfied: coverage>=7.5 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from coverage[toml]>=7.5->pytest-cov->Sphinx==4.1.0.dev20250825) (7.10.5)
Installing collected packages: Sphinx
  Attempting uninstall: Sphinx
    Found existing installation: Sphinx 4.1.0.dev20250825
    Uninstalling Sphinx-4.1.0.dev20250825:
      Successfully uninstalled Sphinx-4.1.0.dev20250825
  DEPRECATION: Legacy editable install of Sphinx[test]==4.1.0.dev20250825 from file:///testbed (setup.py develop) is deprecated. pip 25.3 will enforce this behaviour change. A possible replacement is to add a pyproject.toml or enable --use-pep517, and use setuptools >= 64. If the resulting installation is not behaving as expected, try using --config-settings editable_mode=compat. Please consult the setuptools documentation for more information. Discussion can be found at https://github.com/pypa/pip/issues/11457
  Running setup.py develop for Sphinx
Successfully installed Sphinx
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
Checking patch sphinx/ext/autodoc/__init__.py...
Applied patch sphinx/ext/autodoc/__init__.py cleanly.
+ git apply -v -
Checking patch tests/test_coverup_sphinx-doc__sphinx-9229.py...
Applied patch tests/test_coverup_sphinx-doc__sphinx-9229.py cleanly.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(sphinx/ext/autodoc/__init__\.py)' -m tox -epy39 -v -- tests/test_coverup_sphinx-doc__sphinx-9229.py
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sphinx/ext/autodoc/__init__\\.py)']
.pkg: find interpreter for spec PythonSpec(major=3, minor=9, free_threaded=False)
.pkg: proposed PythonInfo(spec=CPython3.9.23.final.0-64, exe=/opt/miniconda3/envs/testbed/bin/python3, platform=linux, version='3.9.23 (main, Jun  5 2025, 13:40:20) \n[GCC 11.2.0]', encoding_fs_io=utf-8-utf-8)
.pkg: find interpreter for spec PythonSpec(path=/opt/miniconda3/envs/testbed/bin/python3)
.pkg: proposed PythonInfo(spec=CPython3.9.23.final.0-64, exe=/opt/miniconda3/envs/testbed/bin/python3, platform=linux, version='3.9.23 (main, Jun  5 2025, 13:40:20) \n[GCC 11.2.0]', encoding_fs_io=utf-8-utf-8)
.pkg: find interpreter for spec PythonSpec(major=3, free_threaded=False)
.pkg: proposed PythonInfo(spec=CPython3.9.23.final.0-64, exe=/opt/miniconda3/envs/testbed/bin/python3, platform=linux, version='3.9.23 (main, Jun  5 2025, 13:40:20) \n[GCC 11.2.0]', encoding_fs_io=utf-8-utf-8)
.pkg: find interpreter for spec PythonSpec(major=3, free_threaded=False)
.pkg: proposed PythonInfo(spec=CPython3.9.23.final.0-64, exe=/opt/miniconda3/envs/testbed/bin/python3, platform=linux, version='3.9.23 (main, Jun  5 2025, 13:40:20) \n[GCC 11.2.0]', encoding_fs_io=utf-8-utf-8)
.pkg: find interpreter for spec PythonSpec(major=3, free_threaded=False)
.pkg: proposed PythonInfo(spec=CPython3.9.23.final.0-64, exe=/opt/miniconda3/envs/testbed/bin/python3, platform=linux, version='3.9.23 (main, Jun  5 2025, 13:40:20) \n[GCC 11.2.0]', encoding_fs_io=utf-8-utf-8)
.pkg: find interpreter for spec PythonSpec(major=3, free_threaded=False)
.pkg: proposed PythonInfo(spec=CPython3.9.23.final.0-64, exe=/opt/miniconda3/envs/testbed/bin/python3, platform=linux, version='3.9.23 (main, Jun  5 2025, 13:40:20) \n[GCC 11.2.0]', encoding_fs_io=utf-8-utf-8)
.pkg: find interpreter for spec PythonSpec(major=3, free_threaded=False)
.pkg: proposed PythonInfo(spec=CPython3.9.23.final.0-64, exe=/opt/miniconda3/envs/testbed/bin/python3, platform=linux, version='3.9.23 (main, Jun  5 2025, 13:40:20) \n[GCC 11.2.0]', encoding_fs_io=utf-8-utf-8)
.pkg: find interpreter for spec PythonSpec(major=3, minor=6, free_threaded=False)
.pkg: proposed PythonInfo(spec=CPython3.9.23.final.0-64, exe=/opt/miniconda3/envs/testbed/bin/python3, platform=linux, version='3.9.23 (main, Jun  5 2025, 13:40:20) \n[GCC 11.2.0]', encoding_fs_io=utf-8-utf-8)
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sphinx/ext/autodoc/__init__\\.py)']
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sphinx/ext/autodoc/__init__\\.py)']
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sphinx/ext/autodoc/__init__\\.py)']
.pkg: find interpreter for spec PythonSpec(major=3, minor=7, free_threaded=False)
.pkg: proposed PythonInfo(spec=CPython3.9.23.final.0-64, system=/opt/miniconda3/envs/testbed/bin/python3, exe=/bin/python3, platform=linux, version='3.9.23 (main, Jun  5 2025, 13:40:20) \n[GCC 11.2.0]', encoding_fs_io=utf-8-utf-8)
.pkg: find interpreter for spec PythonSpec(major=3, minor=8, free_threaded=False)
.pkg: proposed PythonInfo(spec=CPython3.9.23.final.0-64, system=/opt/miniconda3/envs/testbed/bin/python3, exe=/usr/bin/python3, platform=linux, version='3.9.23 (main, Jun  5 2025, 13:40:20) \n[GCC 11.2.0]', encoding_fs_io=utf-8-utf-8)
.pkg: find interpreter for spec PythonSpec(path=/opt/miniconda3/envs/testbed/bin/python3)
.pkg: proposed PythonInfo(spec=CPython3.9.23.final.0-64, exe=/opt/miniconda3/envs/testbed/bin/python3, platform=linux, version='3.9.23 (main, Jun  5 2025, 13:40:20) \n[GCC 11.2.0]', encoding_fs_io=utf-8-utf-8)
.pkg: find interpreter for spec PythonSpec(path=/opt/miniconda3/envs/testbed/bin/python3)
.pkg: proposed PythonInfo(spec=CPython3.9.23.final.0-64, exe=/opt/miniconda3/envs/testbed/bin/python3, platform=linux, version='3.9.23 (main, Jun  5 2025, 13:40:20) \n[GCC 11.2.0]', encoding_fs_io=utf-8-utf-8)
.pkg: find interpreter for spec PythonSpec(path=/opt/miniconda3/envs/testbed/bin/python3)
.pkg: proposed PythonInfo(spec=CPython3.9.23.final.0-64, exe=/opt/miniconda3/envs/testbed/bin/python3, platform=linux, version='3.9.23 (main, Jun  5 2025, 13:40:20) \n[GCC 11.2.0]', encoding_fs_io=utf-8-utf-8)
.pkg: find interpreter for spec PythonSpec(path=/opt/miniconda3/envs/testbed/bin/python3)
.pkg: proposed PythonInfo(spec=CPython3.9.23.final.0-64, exe=/opt/miniconda3/envs/testbed/bin/python3, platform=linux, version='3.9.23 (main, Jun  5 2025, 13:40:20) \n[GCC 11.2.0]', encoding_fs_io=utf-8-utf-8)
.pkg: find interpreter for spec PythonSpec(major=3, free_threaded=False)
.pkg: proposed PythonInfo(spec=CPython3.9.23.final.0-64, exe=/opt/miniconda3/envs/testbed/bin/python3, platform=linux, version='3.9.23 (main, Jun  5 2025, 13:40:20) \n[GCC 11.2.0]', encoding_fs_io=utf-8-utf-8)
.pkg: find interpreter for spec PythonSpec(major=3, free_threaded=False)
.pkg: proposed PythonInfo(spec=CPython3.9.23.final.0-64, exe=/opt/miniconda3/envs/testbed/bin/python3, platform=linux, version='3.9.23 (main, Jun  5 2025, 13:40:20) \n[GCC 11.2.0]', encoding_fs_io=utf-8-utf-8)
.pkg: find interpreter for spec PythonSpec(path=/opt/miniconda3/envs/testbed/bin/python3)
.pkg: proposed PythonInfo(spec=CPython3.9.23.final.0-64, exe=/opt/miniconda3/envs/testbed/bin/python3, platform=linux, version='3.9.23 (main, Jun  5 2025, 13:40:20) \n[GCC 11.2.0]', encoding_fs_io=utf-8-utf-8)
.pkg: find interpreter for spec PythonSpec(path=/opt/miniconda3/envs/testbed/bin/python3)
.pkg: proposed PythonInfo(spec=CPython3.9.23.final.0-64, exe=/opt/miniconda3/envs/testbed/bin/python3, platform=linux, version='3.9.23 (main, Jun  5 2025, 13:40:20) \n[GCC 11.2.0]', encoding_fs_io=utf-8-utf-8)
.pkg: find interpreter for spec PythonSpec(path=/opt/miniconda3/envs/testbed/bin/python3)
.pkg: proposed PythonInfo(spec=CPython3.9.23.final.0-64, exe=/opt/miniconda3/envs/testbed/bin/python3, platform=linux, version='3.9.23 (main, Jun  5 2025, 13:40:20) \n[GCC 11.2.0]', encoding_fs_io=utf-8-utf-8)
py39: create virtual environment via CPython3Posix(dest=/testbed/.tox/py39, clear=False, no_vcs_ignore=False, global=False)
py39: add seed packages via FromAppData(download=False, pip=bundle, setuptools=bundle, via=copy, app_data_dir=/root/.local/share/virtualenv)
py39: add activators for Bash, CShell, Fish, Nushell, PowerShell, Python
.pkg: create virtual environment via CPython3Posix(dest=/testbed/.tox/.pkg, clear=False, no_vcs_ignore=False, global=False)
.pkg: add seed packages via FromAppData(download=False, pip=bundle, setuptools=bundle, via=copy, app_data_dir=/root/.local/share/virtualenv)
.pkg: add activators for Bash, CShell, Fish, Nushell, PowerShell, Python
.pkg: install_requires> python -I -m pip install 'setuptools>=40.8.0'
.pkg: exit 0 (0.61 seconds) /testbed> python -I -m pip install 'setuptools>=40.8.0' pid=126
.pkg: _optional_hooks> python /opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pyproject_api/_backend.py True setuptools.build_meta __legacy__
.pkg: exit None (0.18 seconds) /testbed> python /opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pyproject_api/_backend.py True setuptools.build_meta __legacy__ pid=131
.pkg: get_requires_for_build_editable> python /opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pyproject_api/_backend.py True setuptools.build_meta __legacy__
.pkg: exit None (0.47 seconds) /testbed> python /opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pyproject_api/_backend.py True setuptools.build_meta __legacy__ pid=134
.pkg: build_editable> python /opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pyproject_api/_backend.py True setuptools.build_meta __legacy__
.pkg: exit None (0.72 seconds) /testbed> python /opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pyproject_api/_backend.py True setuptools.build_meta __legacy__ pid=137
py39: install_package_deps> python -I -m pip install 'Jinja2<3.0' 'Pygments>=2.0' 'alabaster<0.7.12,>=0.7' 'babel>=1.3' 'colorama>=0.3.5; sys_platform == "win32"' cython 'docutils<0.18,>=0.14' html5lib imagesize 'markupsafe<=2.0.1' packaging pytest pytest-cov 'requests>=2.5.0' setuptools 'snowballstemmer>=1.1' 'sphinxcontrib-applehelp<=1.0.7' 'sphinxcontrib-devhelp<=1.0.5' 'sphinxcontrib-htmlhelp<=2.0.4' sphinxcontrib-jsmath 'sphinxcontrib-qthelp<=1.0.6' 'sphinxcontrib-serializinghtml<=1.1.9' 'typed_ast; python_version < "3.8"'
py39: exit 0 (0.69 seconds) /testbed> python -I -m pip install 'Jinja2<3.0' 'Pygments>=2.0' 'alabaster<0.7.12,>=0.7' 'babel>=1.3' 'colorama>=0.3.5; sys_platform == "win32"' cython 'docutils<0.18,>=0.14' html5lib imagesize 'markupsafe<=2.0.1' packaging pytest pytest-cov 'requests>=2.5.0' setuptools 'snowballstemmer>=1.1' 'sphinxcontrib-applehelp<=1.0.7' 'sphinxcontrib-devhelp<=1.0.5' 'sphinxcontrib-htmlhelp<=2.0.4' sphinxcontrib-jsmath 'sphinxcontrib-qthelp<=1.0.6' 'sphinxcontrib-serializinghtml<=1.1.9' 'typed_ast; python_version < "3.8"' pid=140
py39: install_package> python -I -m pip install --force-reinstall --no-deps /testbed/.tox/.tmp/package/1/sphinx-4.1.0.dev20250825-0.editable-py3-none-any.whl
py39: exit 0 (0.71 seconds) /testbed> python -I -m pip install --force-reinstall --no-deps /testbed/.tox/.tmp/package/1/sphinx-4.1.0.dev20250825-0.editable-py3-none-any.whl pid=145
py39: commands[0]> python -X dev -m pytest -rA --durations 25 tests/test_coverup_sphinx-doc__sphinx-9229.py
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sphinx/ext/autodoc/__init__\\.py)']
[1m============================= test session starts ==============================[0m
platform linux -- Python 3.9.23, pytest-8.4.1, pluggy-1.6.0
cachedir: .tox/py39/.pytest_cache
libraries: Sphinx-4.1.0, docutils-0.17.1
base tempdir: /tmp/pytest-of-root/pytest-0
rootdir: /testbed
configfile: setup.cfg
plugins: cov-6.2.1
collected 1 item

tests/test_coverup_sphinx-doc__sphinx-9229.py [31mF[0m[31m                          [100%][0m

=================================== FAILURES ===================================
[31m[1m________________________ test_type_alias_docstring_bug _________________________[0m

setup_sphinx = ('/tmp/pytest-of-root/pytest-0/test_type_alias_docstring_bug0/src', '/tmp/pytest-of-root/pytest-0/test_type_alias_docs...ot/pytest-0/test_type_alias_docstring_bug0/out', '/tmp/pytest-of-root/pytest-0/test_type_alias_docstring_bug0/doctree')

    [0m[94mdef[39;49;00m[90m [39;49;00m[92mtest_type_alias_docstring_bug[39;49;00m(setup_sphinx):[90m[39;49;00m
        srcdir, confdir, outdir, doctreedir = setup_sphinx[90m[39;49;00m
    [90m[39;49;00m
        [90m# Initialize Sphinx application[39;49;00m[90m[39;49;00m
        app = Sphinx(srcdir, confdir, outdir, doctreedir, buildername=[33m'[39;49;00m[33mhtml[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        app.build()[90m[39;49;00m
    [90m[39;49;00m
        [90m# Check the generated HTML for the presence of the expected docstrings[39;49;00m[90m[39;49;00m
        html_file = os.path.join(outdir, [33m'[39;49;00m[33mfile.html[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        [94massert[39;49;00m os.path.exists(html_file), [33m"[39;49;00m[33mHTML file was not generated.[39;49;00m[33m"[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [94mwith[39;49;00m [96mopen[39;49;00m(html_file, [33m'[39;49;00m[33mr[39;49;00m[33m'[39;49;00m) [94mas[39;49;00m f:[90m[39;49;00m
            html_content = f.read()[90m[39;49;00m
    [90m[39;49;00m
        [90m# Assert that the docstrings are present, indicating the bug is fixed[39;49;00m[90m[39;49;00m
>       [94massert[39;49;00m [33m"[39;49;00m[33mDictionary with PyScaffold[39;49;00m[33m'[39;49;00m[33ms options[39;49;00m[33m"[39;49;00m [95min[39;49;00m html_content, [33m"[39;49;00m[33mExpected docstring for ScaffoldOpts not found.[39;49;00m[33m"[39;49;00m[90m[39;49;00m
[1m[31mE       AssertionError: Expected docstring for ScaffoldOpts not found.[0m
[1m[31mE       assert "Dictionary with PyScaffold's options" in '\n<!DOCTYPE html>\n\n<html>\n  <head>\n    <meta charset="utf-8" />\n    <meta name="viewport" content="width=device-...href="_sources/file.rst.txt"\n          rel="nofollow">Page source</a>\n    </div>\n\n    \n\n    \n  </body>\n</html>'[0m

[1m[31mtests/test_coverup_sphinx-doc__sphinx-9229.py[0m:105: AssertionError
----------------------------- Captured stdout call -----------------------------
[01mRunning Sphinx v4.1.0[39;49;00m
1.21 __init__.py(1): """
1.21 __init__.py(13): import re
1.21 __init__.py(14): import warnings
1.21 __init__.py(15): from inspect import Parameter, Signature
1.21 __init__.py(16): from types import ModuleType
1.21 __init__.py(17): from typing import (TYPE_CHECKING, Any, Callable, Dict, Iterator, List, Optional, Sequence,
1.21 __init__.py(20): from docutils.statemachine import StringList
1.21 __init__.py(22): import sphinx
1.21 __init__.py(23): from sphinx.application import Sphinx
1.21 __init__.py(24): from sphinx.config import ENUM, Config
1.21 __init__.py(25): from sphinx.deprecation import RemovedInSphinx50Warning, RemovedInSphinx60Warning
1.21 __init__.py(26): from sphinx.environment import BuildEnvironment
1.21 __init__.py(27): from sphinx.ext.autodoc.importer import (get_class_members, get_object_members, import_module,
1.21 __init__.py(29): from sphinx.ext.autodoc.mock import ismock, mock, undecorate
1.21 __init__.py(30): from sphinx.locale import _, __
1.21 __init__.py(31): from sphinx.pycode import ModuleAnalyzer, PycodeError
1.21 __init__.py(32): from sphinx.util import inspect, logging
1.21 __init__.py(33): from sphinx.util.docstrings import prepare_docstring, separate_metadata
1.22 __init__.py(34): from sphinx.util.inspect import (evaluate_signature, getdoc, object_description, safe_getattr,
1.22 __init__.py(36): from sphinx.util.typing import OptionSpec, get_type_hints, restify
1.22 __init__.py(37): from sphinx.util.typing import stringify as stringify_typehint
1.22 __init__.py(39): if TYPE_CHECKING:
1.22 __init__.py(43): logger = logging.getLogger(__name__)
1.22 __init__.py(48): MethodDescriptorType = type(type.__subclasses__)
1.22 __init__.py(52): py_ext_sig_re = re.compile(
1.22 __init__.py(53):     r'''^ ([\w.]+::)?            # explicit module name
1.22 __init__.py(59):           ''', re.VERBOSE)
1.22 __init__.py(52): py_ext_sig_re = re.compile(
1.22 __init__.py(60): special_member_re = re.compile(r'^__\S+__$')
1.22 __init__.py(63): def identity(x: Any) -> Any:
1.22 __init__.py(67): class _All:
1.22 __init__.py(67): class _All:
1.22 __init__.py(68):     """A special value for :*-members: that matches to any member."""
1.22 __init__.py(70):     def __contains__(self, item: Any) -> bool:
1.22 __init__.py(73):     def append(self, item: Any) -> None:
1.22 __init__.py(77): class _Empty:
1.22 __init__.py(77): class _Empty:
1.22 __init__.py(78):     """A special value for :exclude-members: that never matches to any member."""
1.22 __init__.py(80):     def __contains__(self, item: Any) -> bool:
1.22 __init__.py(84): ALL = _All()
1.22 __init__.py(85): EMPTY = _Empty()
1.22 __init__.py(86): UNINITIALIZED_ATTR = object()
1.22 __init__.py(87): INSTANCEATTR = object()
1.22 __init__.py(88): SLOTSATTR = object()
1.22 __init__.py(91): def members_option(arg: Any) -> Union[object, List[str]]:
1.22 __init__.py(101): def members_set_option(arg: Any) -> Union[object, Set[str]]:
1.22 __init__.py(110): def exclude_members_option(arg: Any) -> Union[object, Set[str]]:
1.22 __init__.py(117): def inherited_members_option(arg: Any) -> Union[object, Set[str]]:
1.22 __init__.py(125): def member_order_option(arg: Any) -> Optional[str]:
1.22 __init__.py(135): def class_doc_from_option(arg: Any) -> Optional[str]:
1.22 __init__.py(143): SUPPRESS = object()
1.22 __init__.py(146): def annotation_option(arg: Any) -> Any:
1.22 __init__.py(154): def bool_option(arg: Any) -> bool:
1.22 __init__.py(161): def merge_special_members_option(options: Dict) -> None:
1.22 __init__.py(176): def merge_members_option(options: Dict) -> None:
1.22 __init__.py(192): def cut_lines(pre: int, post: int = 0, what: str = None) -> Callable:
1.22 __init__.py(220): def between(marker: str, what: Sequence[str] = None, keepempty: bool = False,
1.22 __init__.py(221):             exclude: bool = False) -> Callable:
1.22 __init__.py(220): def between(marker: str, what: Sequence[str] = None, keepempty: bool = False,
1.22 __init__.py(258): class Options(dict):
1.22 __init__.py(258): class Options(dict):
1.22 __init__.py(259):     """A dict/attribute hybrid that returns None on nonexisting keys."""
1.22 __init__.py(260):     def __getattr__(self, name: str) -> Any:
1.22 __init__.py(267): class ObjectMember(tuple):
1.22 __init__.py(267): class ObjectMember(tuple):
1.22 __init__.py(268):     """A member of object.
1.22 __init__.py(281):     def __new__(cls, name: str, obj: Any, **kwargs: Any) -> Any:
1.22 __init__.py(284):     def __init__(self, name: str, obj: Any, docstring: Optional[str] = None,
1.22 __init__.py(285):                  class_: Any = None, skipped: bool = False) -> None:
1.22 __init__.py(284):     def __init__(self, name: str, obj: Any, docstring: Optional[str] = None,
1.22 __init__.py(293): ObjectMembers = Union[List[ObjectMember], List[Tuple[str, Any]]]
1.22 __init__.py(296): class Documenter:
1.22 __init__.py(296): class Documenter:
1.22 __init__.py(297):     """
1.22 __init__.py(313):     objtype = 'object'
1.22 __init__.py(315):     content_indent = '   '
1.22 __init__.py(317):     priority = 0
1.22 __init__.py(319):     member_order = 0
1.22 __init__.py(321):     titles_allowed = False
1.22 __init__.py(324):         'noindex': bool_option
1.22 __init__.py(323):     option_spec: OptionSpec = {
1.22 __init__.py(327):     def get_attr(self, obj: Any, name: str, *defargs: Any) -> Any:
1.22 __init__.py(331):     @classmethod
1.22 __init__.py(332):     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any
1.22 __init__.py(333):                             ) -> bool:
1.22 __init__.py(332):     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any
1.22 __init__.py(337):     def __init__(self, directive: "DocumenterBridge", name: str, indent: str = '') -> None:
1.22 __init__.py(362):     @property
1.22 __init__.py(363):     def documenters(self) -> Dict[str, Type["Documenter"]]:
1.22 __init__.py(367):     def add_line(self, line: str, source: str, *lineno: int) -> None:
1.22 __init__.py(374):     def resolve_name(self, modname: str, parents: Any, path: str, base: Any
1.22 __init__.py(375):                      ) -> Tuple[str, List[str]]:
1.22 __init__.py(374):     def resolve_name(self, modname: str, parents: Any, path: str, base: Any
1.22 __init__.py(385):     def parse_name(self) -> bool:
1.22 __init__.py(422):     def import_object(self, raiseerror: bool = False) -> bool:
1.22 __init__.py(445):     def get_real_modname(self) -> str:
1.22 __init__.py(453):     def check_module(self) -> bool:
1.22 __init__.py(466):     def format_args(self, **kwargs: Any) -> str:
1.22 __init__.py(473):     def format_name(self) -> str:
1.22 __init__.py(484):     def _call_format_args(self, **kwargs: Any) -> str:
1.22 __init__.py(495):     def format_signature(self, **kwargs: Any) -> str:
1.22 __init__.py(530):     def add_directive_header(self, sig: str) -> None:
1.22 __init__.py(552):     def get_doc(self, ignore: int = None) -> Optional[List[List[str]]]:
1.22 __init__.py(569):     def process_doc(self, docstrings: List[List[str]]) -> Iterator[str]:
1.22 __init__.py(584):     def get_sourcename(self) -> str:
1.22 __init__.py(598):     def add_content(self, more_content: Optional[StringList], no_docstring: bool = False
1.22 __init__.py(599):                     ) -> None:
1.22 __init__.py(598):     def add_content(self, more_content: Optional[StringList], no_docstring: bool = False
1.22 __init__.py(641):     def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:
1.22 __init__.py(669):     def filter_members(self, members: ObjectMembers, want_all: bool
1.22 __init__.py(670):                        ) -> List[Tuple[str, Any, bool]]:
1.22 __init__.py(669):     def filter_members(self, members: ObjectMembers, want_all: bool
1.22 __init__.py(820):     def document_members(self, all_members: bool = False) -> None:
1.22 __init__.py(865):     def sort_members(self, documenters: List[Tuple["Documenter", bool]],
1.22 __init__.py(866):                      order: str) -> List[Tuple["Documenter", bool]]:
1.22 __init__.py(865):     def sort_members(self, documenters: List[Tuple["Documenter", bool]],
1.22 __init__.py(890):     def generate(self, more_content: Optional[StringList] = None, real_modname: str = None,
1.22 __init__.py(891):                  check_module: bool = False, all_members: bool = False) -> None:
1.22 __init__.py(890):     def generate(self, more_content: Optional[StringList] = None, real_modname: str = None,
1.22 __init__.py(979): class ModuleDocumenter(Documenter):
1.22 __init__.py(979): class ModuleDocumenter(Documenter):
1.22 __init__.py(980):     """
1.22 __init__.py(983):     objtype = 'module'
1.22 __init__.py(984):     content_indent = ''
1.22 __init__.py(985):     titles_allowed = True
1.22 __init__.py(988):         'members': members_option, 'undoc-members': bool_option,
1.22 __init__.py(989):         'noindex': bool_option, 'inherited-members': inherited_members_option,
1.22 __init__.py(990):         'show-inheritance': bool_option, 'synopsis': identity,
1.22 __init__.py(991):         'platform': identity, 'deprecated': bool_option,
1.22 __init__.py(992):         'member-order': member_order_option, 'exclude-members': exclude_members_option,
1.22 __init__.py(993):         'private-members': members_option, 'special-members': members_option,
1.22 __init__.py(994):         'imported-members': bool_option, 'ignore-module-all': bool_option
1.22 __init__.py(987):     option_spec: OptionSpec = {
1.22 __init__.py(997):     def __init__(self, *args: Any) -> None:
1.22 __init__.py(1002):     @classmethod
1.22 __init__.py(1003):     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any
1.22 __init__.py(1004):                             ) -> bool:
1.22 __init__.py(1003):     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any
1.22 __init__.py(1008):     def resolve_name(self, modname: str, parents: Any, path: str, base: Any
1.22 __init__.py(1009):                      ) -> Tuple[str, List[str]]:
1.22 __init__.py(1008):     def resolve_name(self, modname: str, parents: Any, path: str, base: Any
1.22 __init__.py(1015):     def parse_name(self) -> bool:
1.22 __init__.py(1023):     def import_object(self, raiseerror: bool = False) -> bool:
1.22 __init__.py(1037):     def add_directive_header(self, sig: str) -> None:
1.22 __init__.py(1050):     def get_module_members(self) -> Dict[str, ObjectMember]:
1.22 __init__.py(1077):     def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:
1.22 __init__.py(1103):     def sort_members(self, documenters: List[Tuple["Documenter", bool]],
1.22 __init__.py(1104):                      order: str) -> List[Tuple["Documenter", bool]]:
1.22 __init__.py(1103):     def sort_members(self, documenters: List[Tuple["Documenter", bool]],
1.22 __init__.py(1123): class ModuleLevelDocumenter(Documenter):
1.22 __init__.py(1123): class ModuleLevelDocumenter(Documenter):
1.22 __init__.py(1124):     """
1.22 __init__.py(1128):     def resolve_name(self, modname: str, parents: Any, path: str, base: Any
1.22 __init__.py(1129):                      ) -> Tuple[str, List[str]]:
1.22 __init__.py(1128):     def resolve_name(self, modname: str, parents: Any, path: str, base: Any
1.22 __init__.py(1144): class ClassLevelDocumenter(Documenter):
1.22 __init__.py(1144): class ClassLevelDocumenter(Documenter):
1.22 __init__.py(1145):     """
1.22 __init__.py(1149):     def resolve_name(self, modname: str, parents: Any, path: str, base: Any
1.22 __init__.py(1150):                      ) -> Tuple[str, List[str]]:
1.22 __init__.py(1149):     def resolve_name(self, modname: str, parents: Any, path: str, base: Any
1.22 __init__.py(1177): class DocstringSignatureMixin:
1.22 __init__.py(1177): class DocstringSignatureMixin:
1.22 __init__.py(1178):     """
1.22 __init__.py(1182):     _new_docstrings: List[List[str]] = None
1.22 __init__.py(1183):     _signatures: List[str] = None
1.22 __init__.py(1185):     def _find_signature(self) -> Tuple[str, str]:
1.22 __init__.py(1236):     def get_doc(self, ignore: int = None) -> List[List[str]]:
1.22 __init__.py(1241):     def format_signature(self, **kwargs: Any) -> str:
1.22 __init__.py(1255): class DocstringStripSignatureMixin(DocstringSignatureMixin):
1.22 __init__.py(1255): class DocstringStripSignatureMixin(DocstringSignatureMixin):
1.22 __init__.py(1256):     """
1.22 __init__.py(1260):     def format_signature(self, **kwargs: Any) -> str:
1.22 __init__.py(1273): class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type: ignore
1.22 __init__.py(1273): class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type: ignore
1.22 __init__.py(1274):     """
1.22 __init__.py(1277):     objtype = 'function'
1.22 __init__.py(1278):     member_order = 30
1.22 __init__.py(1280):     @classmethod
1.22 __init__.py(1281):     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any
1.22 __init__.py(1282):                             ) -> bool:
1.22 __init__.py(1281):     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any
1.22 __init__.py(1287):     def format_args(self, **kwargs: Any) -> str:
1.22 __init__.py(1307):     def document_members(self, all_members: bool = False) -> None:
1.22 __init__.py(1310):     def add_directive_header(self, sig: str) -> None:
1.22 __init__.py(1317):     def format_signature(self, **kwargs: Any) -> str:
1.22 __init__.py(1355):     def merge_default_value(self, actual: Signature, overload: Signature) -> Signature:
1.22 __init__.py(1365):     def annotate_to_first_argument(self, func: Callable, typ: Type) -> Optional[Callable]:
1.22 __init__.py(1395): class DecoratorDocumenter(FunctionDocumenter):
1.22 __init__.py(1395): class DecoratorDocumenter(FunctionDocumenter):
1.22 __init__.py(1396):     """
1.22 __init__.py(1399):     objtype = 'decorator'
1.22 __init__.py(1402):     priority = -1
1.22 __init__.py(1404):     def format_args(self, **kwargs: Any) -> Any:
1.22 __init__.py(1416):     'enum.EnumMeta.__call__',
1.22 __init__.py(1415): _METACLASS_CALL_BLACKLIST = [
1.22 __init__.py(1422):     'typing.Generic.__new__',
1.22 __init__.py(1421): _CLASS_NEW_BLACKLIST = [
1.22 __init__.py(1426): class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type: ignore
1.22 __init__.py(1426): class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type: ignore
1.22 __init__.py(1427):     """
1.22 __init__.py(1430):     objtype = 'class'
1.22 __init__.py(1431):     member_order = 20
1.22 __init__.py(1433):         'members': members_option, 'undoc-members': bool_option,
1.22 __init__.py(1434):         'noindex': bool_option, 'inherited-members': inherited_members_option,
1.22 __init__.py(1435):         'show-inheritance': bool_option, 'member-order': member_order_option,
1.22 __init__.py(1436):         'exclude-members': exclude_members_option,
1.22 __init__.py(1437):         'private-members': members_option, 'special-members': members_option,
1.22 __init__.py(1438):         'class-doc-from': class_doc_from_option,
1.22 __init__.py(1432):     option_spec: OptionSpec = {
1.22 __init__.py(1441):     _signature_class: Any = None
1.22 __init__.py(1442):     _signature_method_name: str = None
1.22 __init__.py(1444):     def __init__(self, *args: Any) -> None:
1.22 __init__.py(1457):     @classmethod
1.22 __init__.py(1458):     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any
1.22 __init__.py(1459):                             ) -> bool:
1.22 __init__.py(1458):     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any
1.22 __init__.py(1462):     def import_object(self, raiseerror: bool = False) -> bool:
1.22 __init__.py(1473):     def _get_signature(self) -> Tuple[Optional[Any], Optional[str], Optional[Signature]]:
1.22 __init__.py(1551):     def format_args(self, **kwargs: Any) -> str:
1.22 __init__.py(1568):     def format_signature(self, **kwargs: Any) -> str:
1.22 __init__.py(1597):     def get_overloaded_signatures(self) -> List[Signature]:
1.22 __init__.py(1614):     def get_canonical_fullname(self) -> Optional[str]:
1.22 __init__.py(1628):     def add_directive_header(self, sig: str) -> None:
1.22 __init__.py(1657):     def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:
1.22 __init__.py(1676):     def get_doc(self, ignore: int = None) -> Optional[List[List[str]]]:
1.22 __init__.py(1728):     def get_variable_comment(self) -> Optional[List[str]]:
1.22 __init__.py(1737):     def add_content(self, more_content: Optional[StringList], no_docstring: bool = False
1.22 __init__.py(1738):                     ) -> None:
1.22 __init__.py(1737):     def add_content(self, more_content: Optional[StringList], no_docstring: bool = False
1.22 __init__.py(1747):     def document_members(self, all_members: bool = False) -> None:
1.22 __init__.py(1752):     def generate(self, more_content: Optional[StringList] = None, real_modname: str = None,
1.22 __init__.py(1753):                  check_module: bool = False, all_members: bool = False) -> None:
1.22 __init__.py(1752):     def generate(self, more_content: Optional[StringList] = None, real_modname: str = None,
1.22 __init__.py(1764): class ExceptionDocumenter(ClassDocumenter):
1.22 __init__.py(1764): class ExceptionDocumenter(ClassDocumenter):
1.22 __init__.py(1765):     """
1.22 __init__.py(1768):     objtype = 'exception'
1.22 __init__.py(1769):     member_order = 10
1.22 __init__.py(1772):     priority = 10
1.22 __init__.py(1774):     @classmethod
1.22 __init__.py(1775):     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any
1.22 __init__.py(1776):                             ) -> bool:
1.22 __init__.py(1775):     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any
1.22 __init__.py(1780): class DataDocumenterMixinBase:
1.22 __init__.py(1780): class DataDocumenterMixinBase:
1.22 __init__.py(1782):     config: Config = None
1.22 __init__.py(1783):     env: BuildEnvironment = None
1.22 __init__.py(1784):     modname: str = None
1.22 __init__.py(1785):     parent: Any = None
1.22 __init__.py(1786):     object: Any = None
1.22 __init__.py(1787):     objpath: List[str] = None
1.22 __init__.py(1789):     def should_suppress_directive_header(self) -> bool:
1.22 __init__.py(1793):     def should_suppress_value_header(self) -> bool:
1.22 __init__.py(1797):     def update_content(self, more_content: StringList) -> None:
1.22 __init__.py(1802): class GenericAliasMixin(DataDocumenterMixinBase):
1.22 __init__.py(1802): class GenericAliasMixin(DataDocumenterMixinBase):
1.22 __init__.py(1803):     """
1.22 __init__.py(1808):     def should_suppress_directive_header(self) -> bool:
1.22 __init__.py(1812):     def update_content(self, more_content: StringList) -> None:
1.22 __init__.py(1820): class NewTypeMixin(DataDocumenterMixinBase):
1.22 __init__.py(1820): class NewTypeMixin(DataDocumenterMixinBase):
1.22 __init__.py(1821):     """
1.22 __init__.py(1826):     def should_suppress_directive_header(self) -> bool:
1.22 __init__.py(1830):     def update_content(self, more_content: StringList) -> None:
1.22 __init__.py(1839): class TypeVarMixin(DataDocumenterMixinBase):
1.22 __init__.py(1839): class TypeVarMixin(DataDocumenterMixinBase):
1.22 __init__.py(1840):     """
1.22 __init__.py(1845):     def should_suppress_directive_header(self) -> bool:
1.22 __init__.py(1849):     def get_doc(self, ignore: int = None) -> Optional[List[List[str]]]:
1.22 __init__.py(1863):     def update_content(self, more_content: StringList) -> None:
1.22 __init__.py(1881): class UninitializedGlobalVariableMixin(DataDocumenterMixinBase):
1.22 __init__.py(1881): class UninitializedGlobalVariableMixin(DataDocumenterMixinBase):
1.22 __init__.py(1882):     """
1.22 __init__.py(1887):     def import_object(self, raiseerror: bool = False) -> bool:
1.22 __init__.py(1911):     def should_suppress_value_header(self) -> bool:
1.22 __init__.py(1915):     def get_doc(self, ignore: int = None) -> Optional[List[List[str]]]:
1.22 __init__.py(1922): class DataDocumenter(GenericAliasMixin, NewTypeMixin, TypeVarMixin,
1.22 __init__.py(1923):                      UninitializedGlobalVariableMixin, ModuleLevelDocumenter):
1.22 __init__.py(1922): class DataDocumenter(GenericAliasMixin, NewTypeMixin, TypeVarMixin,
1.22 __init__.py(1922): class DataDocumenter(GenericAliasMixin, NewTypeMixin, TypeVarMixin,
1.22 __init__.py(1924):     """
1.22 __init__.py(1927):     objtype = 'data'
1.22 __init__.py(1928):     member_order = 40
1.22 __init__.py(1929):     priority = -10
1.22 __init__.py(1930):     option_spec: OptionSpec = dict(ModuleLevelDocumenter.option_spec)
1.22 __init__.py(1931):     option_spec["annotation"] = annotation_option
1.22 __init__.py(1932):     option_spec["no-value"] = bool_option
1.22 __init__.py(1934):     @classmethod
1.22 __init__.py(1935):     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any
1.22 __init__.py(1936):                             ) -> bool:
1.22 __init__.py(1935):     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any
1.22 __init__.py(1939):     def update_annotations(self, parent: Any) -> None:
1.22 __init__.py(1953):     def import_object(self, raiseerror: bool = False) -> bool:
1.22 __init__.py(1960):     def should_suppress_value_header(self) -> bool:
1.22 __init__.py(1971):     def add_directive_header(self, sig: str) -> None:
1.22 __init__.py(1995):     def document_members(self, all_members: bool = False) -> None:
1.22 __init__.py(1998):     def get_real_modname(self) -> str:
1.22 __init__.py(2002):     def get_module_comment(self, attrname: str) -> Optional[List[str]]:
1.22 __init__.py(2014):     def get_doc(self, ignore: int = None) -> Optional[List[List[str]]]:
1.22 __init__.py(2022):     def add_content(self, more_content: Optional[StringList], no_docstring: bool = False
1.22 __init__.py(2023):                     ) -> None:
1.22 __init__.py(2022):     def add_content(self, more_content: Optional[StringList], no_docstring: bool = False
1.22 __init__.py(2035): class NewTypeDataDocumenter(DataDocumenter):
1.22 __init__.py(2035): class NewTypeDataDocumenter(DataDocumenter):
1.22 __init__.py(2036):     """
1.22 __init__.py(2043):     objtype = 'newtypedata'
1.22 __init__.py(2044):     directivetype = 'data'
1.22 __init__.py(2045):     priority = FunctionDocumenter.priority + 1
1.22 __init__.py(2047):     @classmethod
1.22 __init__.py(2048):     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any
1.22 __init__.py(2049):                             ) -> bool:
1.22 __init__.py(2048):     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any
1.22 __init__.py(2053): class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type: ignore
1.22 __init__.py(2053): class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type: ignore
1.22 __init__.py(2054):     """
1.22 __init__.py(2057):     objtype = 'method'
1.22 __init__.py(2058):     directivetype = 'method'
1.22 __init__.py(2059):     member_order = 50
1.22 __init__.py(2060):     priority = 1  # must be more than FunctionDocumenter
1.22 __init__.py(2062):     @classmethod
1.22 __init__.py(2063):     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any
1.22 __init__.py(2064):                             ) -> bool:
1.22 __init__.py(2063):     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any
1.22 __init__.py(2067):     def import_object(self, raiseerror: bool = False) -> bool:
1.22 __init__.py(2084):     def format_args(self, **kwargs: Any) -> str:
1.22 __init__.py(2117):     def add_directive_header(self, sig: str) -> None:
1.22 __init__.py(2133):     def document_members(self, all_members: bool = False) -> None:
1.22 __init__.py(2136):     def format_signature(self, **kwargs: Any) -> str:
1.22 __init__.py(2185):     def merge_default_value(self, actual: Signature, overload: Signature) -> Signature:
1.22 __init__.py(2195):     def annotate_to_first_argument(self, func: Callable, typ: Type) -> Optional[Callable]:
1.22 __init__.py(2224):     def get_doc(self, ignore: int = None) -> Optional[List[List[str]]]:
1.22 __init__.py(2257): class NonDataDescriptorMixin(DataDocumenterMixinBase):
1.22 __init__.py(2257): class NonDataDescriptorMixin(DataDocumenterMixinBase):
1.22 __init__.py(2258):     """
1.22 __init__.py(2266):     def import_object(self, raiseerror: bool = False) -> bool:
1.22 __init__.py(2275):     def should_suppress_value_header(self) -> bool:
1.22 __init__.py(2279):     def get_doc(self, ignore: int = None) -> Optional[List[List[str]]]:
1.22 __init__.py(2288): class SlotsMixin(DataDocumenterMixinBase):
1.22 __init__.py(2288): class SlotsMixin(DataDocumenterMixinBase):
1.22 __init__.py(2289):     """
1.22 __init__.py(2293):     def isslotsattribute(self) -> bool:
1.22 __init__.py(2304):     def import_object(self, raiseerror: bool = False) -> bool:
1.22 __init__.py(2311):     def should_suppress_directive_header(self) -> bool:
1.22 __init__.py(2318):     def get_doc(self, ignore: int = None) -> Optional[List[List[str]]]:
1.22 __init__.py(2335): class RuntimeInstanceAttributeMixin(DataDocumenterMixinBase):
1.22 __init__.py(2335): class RuntimeInstanceAttributeMixin(DataDocumenterMixinBase):
1.22 __init__.py(2336):     """
1.22 __init__.py(2347):     RUNTIME_INSTANCE_ATTRIBUTE = object()
1.22 __init__.py(2349):     def is_runtime_instance_attribute(self, parent: Any) -> bool:
1.22 __init__.py(2357):     def import_object(self, raiseerror: bool = False) -> bool:
1.22 __init__.py(2383):     def should_suppress_value_header(self) -> bool:
1.22 __init__.py(2388): class UninitializedInstanceAttributeMixin(DataDocumenterMixinBase):
1.22 __init__.py(2388): class UninitializedInstanceAttributeMixin(DataDocumenterMixinBase):
1.22 __init__.py(2389):     """
1.22 __init__.py(2399):     def is_uninitialized_instance_attribute(self, parent: Any) -> bool:
1.22 __init__.py(2407):     def import_object(self, raiseerror: bool = False) -> bool:
1.22 __init__.py(2432):     def should_suppress_value_header(self) -> bool:
1.22 __init__.py(2436):     def get_doc(self, ignore: int = None) -> Optional[List[List[str]]]:
1.22 __init__.py(2443): class AttributeDocumenter(GenericAliasMixin, NewTypeMixin, SlotsMixin,  # type: ignore
1.22 __init__.py(2444):                           TypeVarMixin, RuntimeInstanceAttributeMixin,
1.22 __init__.py(2445):                           UninitializedInstanceAttributeMixin, NonDataDescriptorMixin,
1.22 __init__.py(2446):                           DocstringStripSignatureMixin, ClassLevelDocumenter):
1.22 __init__.py(2443): class AttributeDocumenter(GenericAliasMixin, NewTypeMixin, SlotsMixin,  # type: ignore
1.22 __init__.py(2443): class AttributeDocumenter(GenericAliasMixin, NewTypeMixin, SlotsMixin,  # type: ignore
1.22 __init__.py(2447):     """
1.22 __init__.py(2450):     objtype = 'attribute'
1.22 __init__.py(2451):     member_order = 60
1.22 __init__.py(2452):     option_spec: OptionSpec = dict(ModuleLevelDocumenter.option_spec)
1.22 __init__.py(2453):     option_spec["annotation"] = annotation_option
1.22 __init__.py(2454):     option_spec["no-value"] = bool_option
1.22 __init__.py(2458):     priority = 10
1.22 __init__.py(2460):     @staticmethod
1.22 __init__.py(2461):     def is_function_or_method(obj: Any) -> bool:
1.22 __init__.py(2464):     @classmethod
1.22 __init__.py(2465):     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any
1.22 __init__.py(2466):                             ) -> bool:
1.22 __init__.py(2465):     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any
1.22 __init__.py(2476):     def document_members(self, all_members: bool = False) -> None:
1.22 __init__.py(2479):     def isinstanceattribute(self) -> bool:
1.22 __init__.py(2500):     def update_annotations(self, parent: Any) -> None:
1.22 __init__.py(2522):     def import_object(self, raiseerror: bool = False) -> bool:
1.22 __init__.py(2531):     def get_real_modname(self) -> str:
1.22 __init__.py(2535):     def should_suppress_value_header(self) -> bool:
1.22 __init__.py(2547):     def add_directive_header(self, sig: str) -> None:
1.22 __init__.py(2570):     def get_attribute_comment(self, parent: Any, attrname: str) -> Optional[List[str]]:
1.22 __init__.py(2587):     def get_doc(self, ignore: int = None) -> Optional[List[List[str]]]:
1.22 __init__.py(2603):     def add_content(self, more_content: Optional[StringList], no_docstring: bool = False
1.22 __init__.py(2604):                     ) -> None:
1.22 __init__.py(2603):     def add_content(self, more_content: Optional[StringList], no_docstring: bool = False
1.22 __init__.py(2615): class PropertyDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):  # type: ignore
1.22 __init__.py(2615): class PropertyDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):  # type: ignore
1.22 __init__.py(2616):     """
1.22 __init__.py(2619):     objtype = 'property'
1.22 __init__.py(2620):     member_order = 60
1.22 __init__.py(2623):     priority = AttributeDocumenter.priority + 1
1.22 __init__.py(2625):     @classmethod
1.22 __init__.py(2626):     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any
1.22 __init__.py(2627):                             ) -> bool:
1.22 __init__.py(2626):     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any
1.22 __init__.py(2630):     def document_members(self, all_members: bool = False) -> None:
1.22 __init__.py(2633):     def get_real_modname(self) -> str:
1.22 __init__.py(2637):     def add_directive_header(self, sig: str) -> None:
1.22 __init__.py(2658): class NewTypeAttributeDocumenter(AttributeDocumenter):
1.22 __init__.py(2658): class NewTypeAttributeDocumenter(AttributeDocumenter):
1.22 __init__.py(2659):     """
1.22 __init__.py(2666):     objtype = 'newvarattribute'
1.22 __init__.py(2667):     directivetype = 'attribute'
1.22 __init__.py(2668):     priority = MethodDocumenter.priority + 1
1.22 __init__.py(2670):     @classmethod
1.22 __init__.py(2671):     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any
1.22 __init__.py(2672):                             ) -> bool:
1.22 __init__.py(2671):     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any
1.22 __init__.py(2676): def get_documenters(app: Sphinx) -> Dict[str, Type[Documenter]]:
1.22 __init__.py(2682): def autodoc_attrgetter(app: Sphinx, obj: Any, name: str, *defargs: Any) -> Any:
1.22 __init__.py(2691): def migrate_autodoc_member_order(app: Sphinx, config: Config) -> None:
1.22 __init__.py(2700): from sphinx.ext.autodoc.deprecated import DataDeclarationDocumenter  # NOQA
1.23 __init__.py(2701): from sphinx.ext.autodoc.deprecated import GenericAliasDocumenter  # NOQA
1.23 __init__.py(2702): from sphinx.ext.autodoc.deprecated import InstanceAttributeDocumenter  # NOQA
1.23 __init__.py(2703): from sphinx.ext.autodoc.deprecated import SingledispatchFunctionDocumenter  # NOQA
1.23 __init__.py(2704): from sphinx.ext.autodoc.deprecated import SingledispatchMethodDocumenter  # NOQA
1.23 __init__.py(2705): from sphinx.ext.autodoc.deprecated import SlotsAttributeDocumenter  # NOQA
1.23 __init__.py(2706): from sphinx.ext.autodoc.deprecated import TypeVarDocumenter  # NOQA
1.23 __init__.py(2709): def setup(app: Sphinx) -> Dict[str, Any]:
1.23 __init__.py(2710):     app.add_autodocumenter(ModuleDocumenter)
1.23 __init__.py(2711):     app.add_autodocumenter(ClassDocumenter)
1.23 __init__.py(2712):     app.add_autodocumenter(ExceptionDocumenter)
1.23 __init__.py(2713):     app.add_autodocumenter(DataDocumenter)
1.23 __init__.py(2714):     app.add_autodocumenter(NewTypeDataDocumenter)
1.23 __init__.py(2715):     app.add_autodocumenter(FunctionDocumenter)
1.23 __init__.py(2716):     app.add_autodocumenter(DecoratorDocumenter)
1.23 __init__.py(2717):     app.add_autodocumenter(MethodDocumenter)
1.23 __init__.py(2718):     app.add_autodocumenter(AttributeDocumenter)
1.23 __init__.py(2719):     app.add_autodocumenter(PropertyDocumenter)
1.23 __init__.py(2720):     app.add_autodocumenter(NewTypeAttributeDocumenter)
1.23 __init__.py(2722):     app.add_config_value('autoclass_content', 'class', True, ENUM('both', 'class', 'init'))
1.23 __init__.py(2723):     app.add_config_value('autodoc_member_order', 'alphabetical', True,
1.23 __init__.py(2724):                          ENUM('alphabetic', 'alphabetical', 'bysource', 'groupwise'))
1.23 __init__.py(2723):     app.add_config_value('autodoc_member_order', 'alphabetical', True,
1.23 __init__.py(2725):     app.add_config_value('autodoc_class_signature', 'mixed', True, ENUM('mixed', 'separated'))
1.23 __init__.py(2726):     app.add_config_value('autodoc_default_options', {}, True)
1.23 __init__.py(2727):     app.add_config_value('autodoc_docstring_signature', True, True)
1.23 __init__.py(2728):     app.add_config_value('autodoc_mock_imports', [], True)
1.23 __init__.py(2729):     app.add_config_value('autodoc_typehints', "signature", True,
1.23 __init__.py(2730):                          ENUM("signature", "description", "none", "both"))
1.23 __init__.py(2729):     app.add_config_value('autodoc_typehints', "signature", True,
1.23 __init__.py(2731):     app.add_config_value('autodoc_typehints_description_target', 'all', True,
1.23 __init__.py(2732):                          ENUM('all', 'documented'))
1.23 __init__.py(2731):     app.add_config_value('autodoc_typehints_description_target', 'all', True,
1.23 __init__.py(2733):     app.add_config_value('autodoc_type_aliases', {}, True)
1.23 __init__.py(2734):     app.add_config_value('autodoc_warningiserror', True, True)
1.23 __init__.py(2735):     app.add_config_value('autodoc_inherit_docstrings', True, True)
1.23 __init__.py(2736):     app.add_event('autodoc-before-process-signature')
1.23 __init__.py(2737):     app.add_event('autodoc-process-docstring')
1.23 __init__.py(2738):     app.add_event('autodoc-process-signature')
1.23 __init__.py(2739):     app.add_event('autodoc-skip-member')
1.23 __init__.py(2741):     app.connect('config-inited', migrate_autodoc_member_order, priority=800)
1.23 __init__.py(2743):     app.setup_extension('sphinx.ext.autodoc.preserve_defaults')
1.23 __init__.py(2744):     app.setup_extension('sphinx.ext.autodoc.type_comment')
1.23 __init__.py(2745):     app.setup_extension('sphinx.ext.autodoc.typehints')
1.23 __init__.py(2747):     return {'version': sphinx.__display_version__, 'parallel_read_safe': True}
1.23 __init__.py(2692):     if config.autodoc_member_order == 'alphabetic':
[01mbuilding [mo]: [39;49;00mtargets for 0 po files that are out of date
[01mbuilding [html]: [39;49;00mtargets for 2 source files that are out of date
[01mupdating environment: [39;49;00m[new config] 2 added, 0 changed, 0 removed
[01mreading sources... [39;49;00m[ 50%] [35mfile[39;49;00m                                                 1.30 __init__.py(93):     if arg in (None, True):
1.30 __init__.py(94):         return ALL
1.30 __init__.py(998):         super().__init__(*args)
1.30 __init__.py(338):         self.directive = directive
1.30 __init__.py(339):         self.config: Config = directive.env.config
1.30 __init__.py(340):         self.env: BuildEnvironment = directive.env
1.30 __init__.py(341):         self.options = directive.genopt
1.30 __init__.py(342):         self.name = name
1.30 __init__.py(343):         self.indent = indent
1.30 __init__.py(346):         self.modname: str = None
1.30 __init__.py(347):         self.module: ModuleType = None
1.30 __init__.py(348):         self.objpath: List[str] = None
1.30 __init__.py(349):         self.fullname: str = None
1.30 __init__.py(352):         self.args: str = None
1.30 __init__.py(353):         self.retann: str = None
1.30 __init__.py(355):         self.object: Any = None
1.30 __init__.py(356):         self.object_name: str = None
1.30 __init__.py(358):         self.parent: Any = None
1.30 __init__.py(360):         self.analyzer: ModuleAnalyzer = None
1.30 __init__.py(999):         merge_members_option(self.options)
1.30 __init__.py(178):     if options.get('members') is ALL:
1.30 __init__.py(180):         return
1.30 __init__.py(1000):         self.__all__: Optional[Sequence[str]] = None
1.30 __init__.py(900):         if not self.parse_name():
1.30 __init__.py(1016):         ret = super().parse_name()
1.30 __init__.py(394):         try:
1.30 __init__.py(395):             matched = py_ext_sig_re.match(self.name)
1.30 __init__.py(396):             explicit_modname, path, base, args, retann = matched.groups()
1.30 __init__.py(403):         if explicit_modname is not None:
1.30 __init__.py(407):             modname = None
1.30 __init__.py(408):             parents = []
1.30 __init__.py(410):         with mock(self.config.autodoc_mock_imports):
1.30 __init__.py(411):             self.modname, self.objpath = self.resolve_name(modname, parents, path, base)
1.30 __init__.py(1010):         if modname is not None:
1.30 __init__.py(1013):         return (path or '') + base, []
1.30 __init__.py(413):         if not self.modname:
1.30 __init__.py(416):         self.args = args
1.30 __init__.py(417):         self.retann = retann
1.30 __init__.py(418):         self.fullname = ((self.modname or '') +
1.30 __init__.py(419):                          ('.' + '.'.join(self.objpath) if self.objpath else ''))
1.30 __init__.py(418):         self.fullname = ((self.modname or '') +
1.30 __init__.py(420):         return True
1.30 __init__.py(1017):         if self.args or self.retann:
1.30 __init__.py(1021):         return ret
1.30 __init__.py(910):         if not self.import_object():
1.30 __init__.py(1024):         ret = super().import_object(raiseerror)
1.30 __init__.py(428):         with mock(self.config.autodoc_mock_imports):
1.30 __init__.py(429):             try:
1.30 __init__.py(430):                 ret = import_object(self.modname, self.objpath, self.objtype,
1.30 __init__.py(431):                                     attrgetter=self.get_attr,
1.30 __init__.py(432):                                     warningiserror=self.config.autodoc_warningiserror)
1.30 __init__.py(430):                 ret = import_object(self.modname, self.objpath, self.objtype,
1.30 __init__.py(433):                 self.module, self.parent, self.object_name, self.object = ret
1.30 __init__.py(434):                 if ismock(self.object):
1.30 __init__.py(436):                 return True
1.30 __init__.py(1026):         try:
1.30 __init__.py(1027):             if not self.options.ignore_module_all:
1.30 __init__.py(261):         try:
1.30 __init__.py(262):             return self[name.replace('_', '-')]
1.30 __init__.py(263):         except KeyError:
1.30 __init__.py(264):             return None
1.30 __init__.py(1028):                 self.__all__ = inspect.getall(self.object)
1.30 __init__.py(1035):         return ret
1.30 __init__.py(918):         guess_modname = self.get_real_modname()
1.30 __init__.py(451):         return self.get_attr(self.object, '__module__', None) or self.modname
1.30 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.30 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.30 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.30 __init__.py(919):         self.real_modname: str = real_modname or guess_modname
1.30 __init__.py(922):         try:
1.30 __init__.py(923):             self.analyzer = ModuleAnalyzer.for_module(self.real_modname)
1.30 __init__.py(926):             self.analyzer.find_attr_docs()
1.31 __init__.py(935):             self.directive.record_dependencies.add(self.analyzer.srcname)
1.31 __init__.py(937):         if self.real_modname != guess_modname:
1.31 __init__.py(946):         if check_module:
1.31 __init__.py(950):         sourcename = self.get_sourcename()
1.31 __init__.py(585):         if (getattr(self.object, '__module__', None) and
1.31 __init__.py(591):             fullname = self.fullname
1.31 __init__.py(593):         if self.analyzer:
1.31 __init__.py(594):             return '%s:docstring of %s' % (self.analyzer.srcname, fullname)
1.31 __init__.py(955):         self.add_line('', sourcename)
1.31 __init__.py(369):         if line.strip():  # not a blank line
1.31 __init__.py(372):             self.directive.result.append('', source, *lineno)
1.31 __init__.py(958):         try:
1.31 __init__.py(959):             sig = self.format_signature()
1.31 __init__.py(500):         if self.args is not None:
1.31 __init__.py(506):             try:
1.31 __init__.py(507):                 retann = None
1.31 __init__.py(508):                 args = self._call_format_args(**kwargs)
1.31 __init__.py(485):         if kwargs:
1.31 __init__.py(493):         return self.format_args()
1.31 __init__.py(471):         return None
1.31 __init__.py(509):                 if args:
1.31 __init__.py(519):         result = self.env.events.emit_firstresult('autodoc-process-signature',
1.31 __init__.py(520):                                                   self.objtype, self.fullname,
1.31 __init__.py(521):                                                   self.object, self.options, args, retann)
1.32 __init__.py(519):         result = self.env.events.emit_firstresult('autodoc-process-signature',
1.32 __init__.py(522):         if result:
1.32 __init__.py(525):         if args is not None:
1.32 __init__.py(528):             return ''
1.32 __init__.py(966):         self.add_directive_header(sig)
1.32 __init__.py(1038):         Documenter.add_directive_header(self, sig)
1.32 __init__.py(532):         domain = getattr(self, 'domain', 'py')
1.32 __init__.py(533):         directive = getattr(self, 'directivetype', self.objtype)
1.32 __init__.py(534):         name = self.format_name()
1.32 __init__.py(482):         return '.'.join(self.objpath) or self.modname
1.32 __init__.py(535):         sourcename = self.get_sourcename()
1.32 __init__.py(585):         if (getattr(self.object, '__module__', None) and
1.32 __init__.py(591):             fullname = self.fullname
1.32 __init__.py(593):         if self.analyzer:
1.32 __init__.py(594):             return '%s:docstring of %s' % (self.analyzer.srcname, fullname)
1.32 __init__.py(538):         prefix = '.. %s:%s:: ' % (domain, directive)
1.32 __init__.py(539):         for i, sig_line in enumerate(sig.split("\n")):
1.32 __init__.py(540):             self.add_line('%s%s%s' % (prefix, name, sig_line),
1.32 __init__.py(541):                           sourcename)
1.32 __init__.py(540):             self.add_line('%s%s%s' % (prefix, name, sig_line),
1.32 __init__.py(369):         if line.strip():  # not a blank line
1.32 __init__.py(370):             self.directive.result.append(self.indent + line, source, *lineno)
1.32 __init__.py(542):             if i == 0:
1.32 __init__.py(543):                 prefix = " " * len(prefix)
1.32 __init__.py(539):         for i, sig_line in enumerate(sig.split("\n")):
1.32 __init__.py(545):         if self.options.noindex:
1.32 __init__.py(261):         try:
1.32 __init__.py(262):             return self[name.replace('_', '-')]
1.32 __init__.py(263):         except KeyError:
1.32 __init__.py(264):             return None
1.32 __init__.py(547):         if self.objpath:
1.32 __init__.py(1040):         sourcename = self.get_sourcename()
1.32 __init__.py(585):         if (getattr(self.object, '__module__', None) and
1.32 __init__.py(591):             fullname = self.fullname
1.32 __init__.py(593):         if self.analyzer:
1.32 __init__.py(594):             return '%s:docstring of %s' % (self.analyzer.srcname, fullname)
1.32 __init__.py(1043):         if self.options.synopsis:
1.32 __init__.py(261):         try:
1.32 __init__.py(262):             return self[name.replace('_', '-')]
1.32 __init__.py(263):         except KeyError:
1.32 __init__.py(264):             return None
1.32 __init__.py(1045):         if self.options.platform:
1.32 __init__.py(261):         try:
1.32 __init__.py(262):             return self[name.replace('_', '-')]
1.32 __init__.py(263):         except KeyError:
1.32 __init__.py(264):             return None
1.32 __init__.py(1047):         if self.options.deprecated:
1.32 __init__.py(261):         try:
1.32 __init__.py(262):             return self[name.replace('_', '-')]
1.32 __init__.py(263):         except KeyError:
1.32 __init__.py(264):             return None
1.32 __init__.py(967):         self.add_line('', sourcename)
1.32 __init__.py(369):         if line.strip():  # not a blank line
1.32 __init__.py(372):             self.directive.result.append('', source, *lineno)
1.32 __init__.py(970):         self.indent += self.content_indent
1.32 __init__.py(973):         self.add_content(more_content)
1.32 __init__.py(601):         if no_docstring:
1.32 __init__.py(607):         sourcename = self.get_sourcename()
1.32 __init__.py(585):         if (getattr(self.object, '__module__', None) and
1.32 __init__.py(591):             fullname = self.fullname
1.32 __init__.py(593):         if self.analyzer:
1.32 __init__.py(594):             return '%s:docstring of %s' % (self.analyzer.srcname, fullname)
1.32 __init__.py(608):         if self.analyzer:
1.32 __init__.py(609):             attr_docs = self.analyzer.find_attr_docs()
1.32 __init__.py(610):             if self.objpath:
1.32 __init__.py(622):         if not no_docstring:
1.32 __init__.py(623):             docstrings = self.get_doc()
1.32 __init__.py(558):         if ignore is not None:
1.32 __init__.py(562):         docstring = getdoc(self.object, self.get_attr, self.config.autodoc_inherit_docstrings,
1.32 __init__.py(563):                            self.parent, self.object_name)
1.32 __init__.py(562):         docstring = getdoc(self.object, self.get_attr, self.config.autodoc_inherit_docstrings,
1.32 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.32 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.32 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.32 __init__.py(564):         if docstring:
1.32 __init__.py(567):         return []
1.32 __init__.py(624):             if docstrings is None:
1.32 __init__.py(628):                 if not docstrings:
1.32 __init__.py(632):                     docstrings.append([])
1.32 __init__.py(633):                 for i, line in enumerate(self.process_doc(docstrings)):
1.32 __init__.py(571):         for docstringlines in docstrings:
1.32 __init__.py(572):             if self.env.app:
1.32 __init__.py(574):                 self.env.app.emit('autodoc-process-docstring',
1.32 __init__.py(575):                                   self.objtype, self.fullname, self.object,
1.32 __init__.py(576):                                   self.options, docstringlines)
1.32 __init__.py(574):                 self.env.app.emit('autodoc-process-docstring',
1.32 __init__.py(578):                 if docstringlines and docstringlines[-1] != '':
1.32 __init__.py(582):             yield from docstringlines
1.32 __init__.py(571):         for docstringlines in docstrings:
1.32 __init__.py(637):         if more_content:
1.32 __init__.py(976):         self.document_members(all_members)
1.32 __init__.py(827):         self.env.temp_data['autodoc:module'] = self.modname
1.32 __init__.py(828):         if self.objpath:
1.32 __init__.py(831):         want_all = (all_members or
1.32 __init__.py(832):                     self.options.inherited_members or
1.32 __init__.py(261):         try:
1.32 __init__.py(262):             return self[name.replace('_', '-')]
1.32 __init__.py(263):         except KeyError:
1.32 __init__.py(264):             return None
1.32 __init__.py(831):         want_all = (all_members or
1.32 __init__.py(833):                     self.options.members is ALL)
1.32 __init__.py(261):         try:
1.32 __init__.py(262):             return self[name.replace('_', '-')]
1.32 __init__.py(831):         want_all = (all_members or
1.32 __init__.py(835):         members_check_module, members = self.get_object_members(want_all)
1.32 __init__.py(1078):         members = self.get_module_members()
1.32 __init__.py(1052):         if self.analyzer:
1.32 __init__.py(1053):             attr_docs = self.analyzer.attr_docs
1.32 __init__.py(1057):         members: Dict[str, ObjectMember] = {}
1.32 __init__.py(1058):         for name in dir(self.object):
1.32 __init__.py(1059):             try:
1.32 __init__.py(1060):                 value = safe_getattr(self.object, name, None)
1.32 __init__.py(1061):                 if ismock(value):
1.32 __init__.py(1063):                 docstring = attr_docs.get(('', name), [])
1.32 __init__.py(1064):                 members[name] = ObjectMember(name, value, docstring="\n".join(docstring))
1.32 __init__.py(282):         return super().__new__(cls, (name, obj))  # type: ignore
1.32 __init__.py(286):         self.__name__ = name
1.32 __init__.py(287):         self.object = obj
1.32 __init__.py(288):         self.docstring = docstring
1.32 __init__.py(289):         self.skipped = skipped
1.32 __init__.py(290):         self.class_ = class_
1.32 __init__.py(1058):         for name in dir(self.object):
1.32 __init__.py(1059):             try:
1.32 __init__.py(1060):                 value = safe_getattr(self.object, name, None)
1.32 __init__.py(1061):                 if ismock(value):
1.32 __init__.py(1063):                 docstring = attr_docs.get(('', name), [])
1.32 __init__.py(1064):                 members[name] = ObjectMember(name, value, docstring="\n".join(docstring))
1.32 __init__.py(282):         return super().__new__(cls, (name, obj))  # type: ignore
1.32 __init__.py(286):         self.__name__ = name
1.32 __init__.py(287):         self.object = obj
1.32 __init__.py(288):         self.docstring = docstring
1.32 __init__.py(289):         self.skipped = skipped
1.32 __init__.py(290):         self.class_ = class_
1.32 __init__.py(1058):         for name in dir(self.object):
1.32 __init__.py(1059):             try:
1.32 __init__.py(1060):                 value = safe_getattr(self.object, name, None)
1.32 __init__.py(1061):                 if ismock(value):
1.32 __init__.py(1063):                 docstring = attr_docs.get(('', name), [])
1.32 __init__.py(1064):                 members[name] = ObjectMember(name, value, docstring="\n".join(docstring))
1.32 __init__.py(282):         return super().__new__(cls, (name, obj))  # type: ignore
1.32 __init__.py(286):         self.__name__ = name
1.32 __init__.py(287):         self.object = obj
1.32 __init__.py(288):         self.docstring = docstring
1.32 __init__.py(289):         self.skipped = skipped
1.32 __init__.py(290):         self.class_ = class_
1.32 __init__.py(1058):         for name in dir(self.object):
1.32 __init__.py(1059):             try:
1.32 __init__.py(1060):                 value = safe_getattr(self.object, name, None)
1.32 __init__.py(1061):                 if ismock(value):
1.32 __init__.py(1063):                 docstring = attr_docs.get(('', name), [])
1.32 __init__.py(1064):                 members[name] = ObjectMember(name, value, docstring="\n".join(docstring))
1.32 __init__.py(282):         return super().__new__(cls, (name, obj))  # type: ignore
1.32 __init__.py(286):         self.__name__ = name
1.32 __init__.py(287):         self.object = obj
1.32 __init__.py(288):         self.docstring = docstring
1.32 __init__.py(289):         self.skipped = skipped
1.32 __init__.py(290):         self.class_ = class_
1.32 __init__.py(1058):         for name in dir(self.object):
1.32 __init__.py(1059):             try:
1.32 __init__.py(1060):                 value = safe_getattr(self.object, name, None)
1.32 __init__.py(1061):                 if ismock(value):
1.32 __init__.py(1063):                 docstring = attr_docs.get(('', name), [])
1.32 __init__.py(1064):                 members[name] = ObjectMember(name, value, docstring="\n".join(docstring))
1.32 __init__.py(282):         return super().__new__(cls, (name, obj))  # type: ignore
1.32 __init__.py(286):         self.__name__ = name
1.32 __init__.py(287):         self.object = obj
1.32 __init__.py(288):         self.docstring = docstring
1.32 __init__.py(289):         self.skipped = skipped
1.32 __init__.py(290):         self.class_ = class_
1.32 __init__.py(1058):         for name in dir(self.object):
1.32 __init__.py(1059):             try:
1.32 __init__.py(1060):                 value = safe_getattr(self.object, name, None)
1.32 __init__.py(1061):                 if ismock(value):
1.32 __init__.py(1063):                 docstring = attr_docs.get(('', name), [])
1.32 __init__.py(1064):                 members[name] = ObjectMember(name, value, docstring="\n".join(docstring))
1.32 __init__.py(282):         return super().__new__(cls, (name, obj))  # type: ignore
1.32 __init__.py(286):         self.__name__ = name
1.32 __init__.py(287):         self.object = obj
1.32 __init__.py(288):         self.docstring = docstring
1.32 __init__.py(289):         self.skipped = skipped
1.32 __init__.py(290):         self.class_ = class_
1.32 __init__.py(1058):         for name in dir(self.object):
1.32 __init__.py(1059):             try:
1.32 __init__.py(1060):                 value = safe_getattr(self.object, name, None)
1.32 __init__.py(1061):                 if ismock(value):
1.32 __init__.py(1063):                 docstring = attr_docs.get(('', name), [])
1.32 __init__.py(1064):                 members[name] = ObjectMember(name, value, docstring="\n".join(docstring))
1.32 __init__.py(282):         return super().__new__(cls, (name, obj))  # type: ignore
1.32 __init__.py(286):         self.__name__ = name
1.32 __init__.py(287):         self.object = obj
1.32 __init__.py(288):         self.docstring = docstring
1.32 __init__.py(289):         self.skipped = skipped
1.32 __init__.py(290):         self.class_ = class_
1.32 __init__.py(1058):         for name in dir(self.object):
1.32 __init__.py(1059):             try:
1.32 __init__.py(1060):                 value = safe_getattr(self.object, name, None)
1.32 __init__.py(1061):                 if ismock(value):
1.32 __init__.py(1063):                 docstring = attr_docs.get(('', name), [])
1.32 __init__.py(1064):                 members[name] = ObjectMember(name, value, docstring="\n".join(docstring))
1.32 __init__.py(282):         return super().__new__(cls, (name, obj))  # type: ignore
1.32 __init__.py(286):         self.__name__ = name
1.32 __init__.py(287):         self.object = obj
1.32 __init__.py(288):         self.docstring = docstring
1.32 __init__.py(289):         self.skipped = skipped
1.32 __init__.py(290):         self.class_ = class_
1.32 __init__.py(1058):         for name in dir(self.object):
1.32 __init__.py(1059):             try:
1.32 __init__.py(1060):                 value = safe_getattr(self.object, name, None)
1.32 __init__.py(1061):                 if ismock(value):
1.32 __init__.py(1063):                 docstring = attr_docs.get(('', name), [])
1.32 __init__.py(1064):                 members[name] = ObjectMember(name, value, docstring="\n".join(docstring))
1.32 __init__.py(282):         return super().__new__(cls, (name, obj))  # type: ignore
1.32 __init__.py(286):         self.__name__ = name
1.32 __init__.py(287):         self.object = obj
1.32 __init__.py(288):         self.docstring = docstring
1.32 __init__.py(289):         self.skipped = skipped
1.32 __init__.py(290):         self.class_ = class_
1.32 __init__.py(1058):         for name in dir(self.object):
1.32 __init__.py(1059):             try:
1.32 __init__.py(1060):                 value = safe_getattr(self.object, name, None)
1.32 __init__.py(1061):                 if ismock(value):
1.32 __init__.py(1063):                 docstring = attr_docs.get(('', name), [])
1.32 __init__.py(1064):                 members[name] = ObjectMember(name, value, docstring="\n".join(docstring))
1.32 __init__.py(282):         return super().__new__(cls, (name, obj))  # type: ignore
1.32 __init__.py(286):         self.__name__ = name
1.32 __init__.py(287):         self.object = obj
1.32 __init__.py(288):         self.docstring = docstring
1.32 __init__.py(289):         self.skipped = skipped
1.32 __init__.py(290):         self.class_ = class_
1.32 __init__.py(1058):         for name in dir(self.object):
1.32 __init__.py(1059):             try:
1.32 __init__.py(1060):                 value = safe_getattr(self.object, name, None)
1.32 __init__.py(1061):                 if ismock(value):
1.32 __init__.py(1063):                 docstring = attr_docs.get(('', name), [])
1.32 __init__.py(1064):                 members[name] = ObjectMember(name, value, docstring="\n".join(docstring))
1.32 __init__.py(282):         return super().__new__(cls, (name, obj))  # type: ignore
1.32 __init__.py(286):         self.__name__ = name
1.32 __init__.py(287):         self.object = obj
1.32 __init__.py(288):         self.docstring = docstring
1.32 __init__.py(289):         self.skipped = skipped
1.32 __init__.py(290):         self.class_ = class_
1.32 __init__.py(1058):         for name in dir(self.object):
1.32 __init__.py(1059):             try:
1.32 __init__.py(1060):                 value = safe_getattr(self.object, name, None)
1.32 __init__.py(1061):                 if ismock(value):
1.32 __init__.py(1063):                 docstring = attr_docs.get(('', name), [])
1.32 __init__.py(1064):                 members[name] = ObjectMember(name, value, docstring="\n".join(docstring))
1.32 __init__.py(282):         return super().__new__(cls, (name, obj))  # type: ignore
1.32 __init__.py(286):         self.__name__ = name
1.32 __init__.py(287):         self.object = obj
1.32 __init__.py(288):         self.docstring = docstring
1.32 __init__.py(289):         self.skipped = skipped
1.32 __init__.py(290):         self.class_ = class_
1.32 __init__.py(1058):         for name in dir(self.object):
1.32 __init__.py(1059):             try:
1.32 __init__.py(1060):                 value = safe_getattr(self.object, name, None)
1.32 __init__.py(1061):                 if ismock(value):
1.32 __init__.py(1063):                 docstring = attr_docs.get(('', name), [])
1.32 __init__.py(1064):                 members[name] = ObjectMember(name, value, docstring="\n".join(docstring))
1.32 __init__.py(282):         return super().__new__(cls, (name, obj))  # type: ignore
1.32 __init__.py(286):         self.__name__ = name
1.32 __init__.py(287):         self.object = obj
1.32 __init__.py(288):         self.docstring = docstring
1.32 __init__.py(289):         self.skipped = skipped
1.32 __init__.py(290):         self.class_ = class_
1.32 __init__.py(1058):         for name in dir(self.object):
1.32 __init__.py(1059):             try:
1.32 __init__.py(1060):                 value = safe_getattr(self.object, name, None)
1.32 __init__.py(1061):                 if ismock(value):
1.32 __init__.py(1063):                 docstring = attr_docs.get(('', name), [])
1.32 __init__.py(1064):                 members[name] = ObjectMember(name, value, docstring="\n".join(docstring))
1.32 __init__.py(282):         return super().__new__(cls, (name, obj))  # type: ignore
1.32 __init__.py(286):         self.__name__ = name
1.32 __init__.py(287):         self.object = obj
1.32 __init__.py(288):         self.docstring = docstring
1.32 __init__.py(289):         self.skipped = skipped
1.32 __init__.py(290):         self.class_ = class_
1.32 __init__.py(1058):         for name in dir(self.object):
1.32 __init__.py(1059):             try:
1.32 __init__.py(1060):                 value = safe_getattr(self.object, name, None)
1.32 __init__.py(1061):                 if ismock(value):
1.32 __init__.py(1063):                 docstring = attr_docs.get(('', name), [])
1.32 __init__.py(1064):                 members[name] = ObjectMember(name, value, docstring="\n".join(docstring))
1.32 __init__.py(282):         return super().__new__(cls, (name, obj))  # type: ignore
1.32 __init__.py(286):         self.__name__ = name
1.32 __init__.py(287):         self.object = obj
1.32 __init__.py(288):         self.docstring = docstring
1.32 __init__.py(289):         self.skipped = skipped
1.32 __init__.py(290):         self.class_ = class_
1.32 __init__.py(1058):         for name in dir(self.object):
1.32 __init__.py(1059):             try:
1.32 __init__.py(1060):                 value = safe_getattr(self.object, name, None)
1.32 __init__.py(1061):                 if ismock(value):
1.32 __init__.py(1063):                 docstring = attr_docs.get(('', name), [])
1.32 __init__.py(1064):                 members[name] = ObjectMember(name, value, docstring="\n".join(docstring))
1.32 __init__.py(282):         return super().__new__(cls, (name, obj))  # type: ignore
1.32 __init__.py(286):         self.__name__ = name
1.32 __init__.py(287):         self.object = obj
1.32 __init__.py(288):         self.docstring = docstring
1.32 __init__.py(289):         self.skipped = skipped
1.32 __init__.py(290):         self.class_ = class_
1.32 __init__.py(1058):         for name in dir(self.object):
1.32 __init__.py(1069):         for name in inspect.getannotations(self.object):
1.32 __init__.py(1075):         return members
1.32 __init__.py(1079):         if want_all:
1.32 __init__.py(1080):             if self.__all__ is None:
1.32 __init__.py(1083):                 return True, list(members.values())
1.32 __init__.py(838):         memberdocumenters: List[Tuple[Documenter, bool]] = []
1.32 __init__.py(839):         for (mname, member, isattr) in self.filter_members(members, want_all):
1.32 __init__.py(684):         def is_filtered_inherited_member(name: str, obj: Any) -> bool:
1.32 __init__.py(699):         ret = []
1.32 __init__.py(702):         namespace = '.'.join(self.objpath)  # will be empty for modules
1.32 __init__.py(704):         if self.analyzer:
1.32 __init__.py(705):             attr_docs = self.analyzer.find_attr_docs()
1.32 __init__.py(710):         for obj in members:
1.32 __init__.py(711):             membername, member = obj
1.32 __init__.py(713):             if member is INSTANCEATTR:
1.32 __init__.py(715):             elif (namespace, membername) in attr_docs:
1.32 __init__.py(718):                 isattr = False
1.32 __init__.py(720):             doc = getdoc(member, self.get_attr, self.config.autodoc_inherit_docstrings,
1.32 __init__.py(721):                          self.parent, self.object_name)
1.32 __init__.py(720):             doc = getdoc(member, self.get_attr, self.config.autodoc_inherit_docstrings,
1.32 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.32 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.32 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.32 __init__.py(722):             if not isinstance(doc, str):
1.32 __init__.py(728):             cls = self.get_attr(member, '__class__', None)
1.32 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.32 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.32 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.32 __init__.py(729):             if cls:
1.32 __init__.py(730):                 cls_doc = self.get_attr(cls, '__doc__', None)
1.32 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.32 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.32 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.32 __init__.py(731):                 if cls_doc == doc:
1.32 __init__.py(734):             if isinstance(obj, ObjectMember) and obj.docstring:
1.32 __init__.py(738):             doc, metadata = separate_metadata(doc)
1.32 __init__.py(739):             has_doc = bool(doc)
1.32 __init__.py(741):             if 'private' in metadata:
1.32 __init__.py(744):             elif 'public' in metadata:
1.32 __init__.py(748):                 isprivate = membername.startswith('_')
1.32 __init__.py(750):             keep = False
1.32 __init__.py(751):             if ismock(member):
1.32 __init__.py(754):             elif self.options.exclude_members and membername in self.options.exclude_members:
1.32 __init__.py(261):         try:
1.32 __init__.py(262):             return self[name.replace('_', '-')]
1.32 __init__.py(263):         except KeyError:
1.32 __init__.py(264):             return None
1.32 __init__.py(757):             elif want_all and special_member_re.match(membername):
1.32 __init__.py(768):             elif (namespace, membername) in attr_docs:
1.32 __init__.py(777):             elif want_all and isprivate:
1.32 __init__.py(788):                 if (self.options.members is ALL and
1.32 __init__.py(261):         try:
1.32 __init__.py(262):             return self[name.replace('_', '-')]
1.32 __init__.py(789):                         is_filtered_inherited_member(membername, obj)):
1.32 __init__.py(685):             if inspect.isclass(self.object):
1.32 __init__.py(697):             return False
1.32 __init__.py(788):                 if (self.options.members is ALL and
1.32 __init__.py(793):                     keep = has_doc or self.options.undoc_members
1.32 __init__.py(795):             if isinstance(obj, ObjectMember) and obj.skipped:
1.32 __init__.py(801):             if self.env.app:
1.32 __init__.py(803):                 try:
1.32 __init__.py(804):                     skip_user = self.env.app.emit_firstresult(
1.32 __init__.py(805):                         'autodoc-skip-member', self.objtype, membername, member,
1.32 __init__.py(806):                         not keep, self.options)
1.32 __init__.py(804):                     skip_user = self.env.app.emit_firstresult(
1.32 __init__.py(807):                     if skip_user is not None:
1.32 __init__.py(815):             if keep:
1.32 __init__.py(816):                 ret.append((membername, member, isattr))
1.32 __init__.py(710):         for obj in members:
1.32 __init__.py(711):             membername, member = obj
1.32 __init__.py(713):             if member is INSTANCEATTR:
1.32 __init__.py(715):             elif (namespace, membername) in attr_docs:
1.32 __init__.py(718):                 isattr = False
1.32 __init__.py(720):             doc = getdoc(member, self.get_attr, self.config.autodoc_inherit_docstrings,
1.32 __init__.py(721):                          self.parent, self.object_name)
1.32 __init__.py(720):             doc = getdoc(member, self.get_attr, self.config.autodoc_inherit_docstrings,
1.32 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.32 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.32 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.32 __init__.py(722):             if not isinstance(doc, str):
1.32 __init__.py(728):             cls = self.get_attr(member, '__class__', None)
1.32 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.32 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.32 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.32 __init__.py(729):             if cls:
1.32 __init__.py(730):                 cls_doc = self.get_attr(cls, '__doc__', None)
1.32 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.32 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.32 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.32 __init__.py(731):                 if cls_doc == doc:
1.32 __init__.py(734):             if isinstance(obj, ObjectMember) and obj.docstring:
1.32 __init__.py(738):             doc, metadata = separate_metadata(doc)
1.32 __init__.py(739):             has_doc = bool(doc)
1.32 __init__.py(741):             if 'private' in metadata:
1.32 __init__.py(744):             elif 'public' in metadata:
1.32 __init__.py(748):                 isprivate = membername.startswith('_')
1.32 __init__.py(750):             keep = False
1.32 __init__.py(751):             if ismock(member):
1.32 __init__.py(754):             elif self.options.exclude_members and membername in self.options.exclude_members:
1.32 __init__.py(261):         try:
1.32 __init__.py(262):             return self[name.replace('_', '-')]
1.32 __init__.py(263):         except KeyError:
1.32 __init__.py(264):             return None
1.32 __init__.py(757):             elif want_all and special_member_re.match(membername):
1.32 __init__.py(768):             elif (namespace, membername) in attr_docs:
1.32 __init__.py(777):             elif want_all and isprivate:
1.32 __init__.py(788):                 if (self.options.members is ALL and
1.32 __init__.py(261):         try:
1.32 __init__.py(262):             return self[name.replace('_', '-')]
1.32 __init__.py(789):                         is_filtered_inherited_member(membername, obj)):
1.32 __init__.py(685):             if inspect.isclass(self.object):
1.32 __init__.py(697):             return False
1.32 __init__.py(788):                 if (self.options.members is ALL and
1.32 __init__.py(793):                     keep = has_doc or self.options.undoc_members
1.32 __init__.py(795):             if isinstance(obj, ObjectMember) and obj.skipped:
1.32 __init__.py(801):             if self.env.app:
1.32 __init__.py(803):                 try:
1.32 __init__.py(804):                     skip_user = self.env.app.emit_firstresult(
1.32 __init__.py(805):                         'autodoc-skip-member', self.objtype, membername, member,
1.32 __init__.py(806):                         not keep, self.options)
1.32 __init__.py(804):                     skip_user = self.env.app.emit_firstresult(
1.32 __init__.py(807):                     if skip_user is not None:
1.32 __init__.py(815):             if keep:
1.32 __init__.py(816):                 ret.append((membername, member, isattr))
1.32 __init__.py(710):         for obj in members:
1.32 __init__.py(711):             membername, member = obj
1.32 __init__.py(713):             if member is INSTANCEATTR:
1.32 __init__.py(715):             elif (namespace, membername) in attr_docs:
1.32 __init__.py(718):                 isattr = False
1.32 __init__.py(720):             doc = getdoc(member, self.get_attr, self.config.autodoc_inherit_docstrings,
1.32 __init__.py(721):                          self.parent, self.object_name)
1.32 __init__.py(720):             doc = getdoc(member, self.get_attr, self.config.autodoc_inherit_docstrings,
1.32 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.32 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.32 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.32 __init__.py(722):             if not isinstance(doc, str):
1.32 __init__.py(728):             cls = self.get_attr(member, '__class__', None)
1.32 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.32 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.32 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.32 __init__.py(729):             if cls:
1.32 __init__.py(730):                 cls_doc = self.get_attr(cls, '__doc__', None)
1.32 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.32 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.32 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.32 __init__.py(731):                 if cls_doc == doc:
1.32 __init__.py(734):             if isinstance(obj, ObjectMember) and obj.docstring:
1.32 __init__.py(738):             doc, metadata = separate_metadata(doc)
1.32 __init__.py(739):             has_doc = bool(doc)
1.32 __init__.py(741):             if 'private' in metadata:
1.32 __init__.py(744):             elif 'public' in metadata:
1.32 __init__.py(748):                 isprivate = membername.startswith('_')
1.32 __init__.py(750):             keep = False
1.32 __init__.py(751):             if ismock(member):
1.32 __init__.py(754):             elif self.options.exclude_members and membername in self.options.exclude_members:
1.32 __init__.py(261):         try:
1.32 __init__.py(262):             return self[name.replace('_', '-')]
1.32 __init__.py(263):         except KeyError:
1.32 __init__.py(264):             return None
1.32 __init__.py(757):             elif want_all and special_member_re.match(membername):
1.32 __init__.py(768):             elif (namespace, membername) in attr_docs:
1.32 __init__.py(777):             elif want_all and isprivate:
1.32 __init__.py(788):                 if (self.options.members is ALL and
1.32 __init__.py(261):         try:
1.32 __init__.py(262):             return self[name.replace('_', '-')]
1.32 __init__.py(789):                         is_filtered_inherited_member(membername, obj)):
1.32 __init__.py(685):             if inspect.isclass(self.object):
1.32 __init__.py(697):             return False
1.32 __init__.py(788):                 if (self.options.members is ALL and
1.32 __init__.py(793):                     keep = has_doc or self.options.undoc_members
1.32 __init__.py(795):             if isinstance(obj, ObjectMember) and obj.skipped:
1.32 __init__.py(801):             if self.env.app:
1.32 __init__.py(803):                 try:
1.32 __init__.py(804):                     skip_user = self.env.app.emit_firstresult(
1.32 __init__.py(805):                         'autodoc-skip-member', self.objtype, membername, member,
1.32 __init__.py(806):                         not keep, self.options)
1.32 __init__.py(804):                     skip_user = self.env.app.emit_firstresult(
1.32 __init__.py(807):                     if skip_user is not None:
1.32 __init__.py(815):             if keep:
1.32 __init__.py(816):                 ret.append((membername, member, isattr))
1.32 __init__.py(710):         for obj in members:
1.32 __init__.py(711):             membername, member = obj
1.32 __init__.py(713):             if member is INSTANCEATTR:
1.32 __init__.py(715):             elif (namespace, membername) in attr_docs:
1.32 __init__.py(716):                 isattr = True
1.32 __init__.py(720):             doc = getdoc(member, self.get_attr, self.config.autodoc_inherit_docstrings,
1.32 __init__.py(721):                          self.parent, self.object_name)
1.32 __init__.py(720):             doc = getdoc(member, self.get_attr, self.config.autodoc_inherit_docstrings,
1.32 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.32 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.32 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.32 __init__.py(722):             if not isinstance(doc, str):
1.32 __init__.py(724):                 doc = None
1.32 __init__.py(728):             cls = self.get_attr(member, '__class__', None)
1.32 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.32 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.32 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.32 __init__.py(729):             if cls:
1.32 __init__.py(730):                 cls_doc = self.get_attr(cls, '__doc__', None)
1.32 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.32 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.32 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.32 __init__.py(731):                 if cls_doc == doc:
1.32 __init__.py(732):                     doc = None
1.32 __init__.py(734):             if isinstance(obj, ObjectMember) and obj.docstring:
1.32 __init__.py(736):                 doc = obj.docstring
1.32 __init__.py(738):             doc, metadata = separate_metadata(doc)
1.32 __init__.py(739):             has_doc = bool(doc)
1.32 __init__.py(741):             if 'private' in metadata:
1.32 __init__.py(744):             elif 'public' in metadata:
1.32 __init__.py(748):                 isprivate = membername.startswith('_')
1.32 __init__.py(750):             keep = False
1.32 __init__.py(751):             if ismock(member):
1.32 __init__.py(754):             elif self.options.exclude_members and membername in self.options.exclude_members:
1.32 __init__.py(261):         try:
1.32 __init__.py(262):             return self[name.replace('_', '-')]
1.32 __init__.py(263):         except KeyError:
1.32 __init__.py(264):             return None
1.32 __init__.py(757):             elif want_all and special_member_re.match(membername):
1.32 __init__.py(768):             elif (namespace, membername) in attr_docs:
1.32 __init__.py(769):                 if want_all and isprivate:
1.32 __init__.py(776):                     keep = True
1.32 __init__.py(795):             if isinstance(obj, ObjectMember) and obj.skipped:
1.32 __init__.py(801):             if self.env.app:
1.32 __init__.py(803):                 try:
1.32 __init__.py(804):                     skip_user = self.env.app.emit_firstresult(
1.32 __init__.py(805):                         'autodoc-skip-member', self.objtype, membername, member,
1.32 __init__.py(806):                         not keep, self.options)
1.32 __init__.py(804):                     skip_user = self.env.app.emit_firstresult(
1.32 __init__.py(807):                     if skip_user is not None:
1.32 __init__.py(815):             if keep:
1.32 __init__.py(816):                 ret.append((membername, member, isattr))
1.32 __init__.py(710):         for obj in members:
1.32 __init__.py(711):             membername, member = obj
1.32 __init__.py(713):             if member is INSTANCEATTR:
1.32 __init__.py(715):             elif (namespace, membername) in attr_docs:
1.32 __init__.py(716):                 isattr = True
1.32 __init__.py(720):             doc = getdoc(member, self.get_attr, self.config.autodoc_inherit_docstrings,
1.32 __init__.py(721):                          self.parent, self.object_name)
1.32 __init__.py(720):             doc = getdoc(member, self.get_attr, self.config.autodoc_inherit_docstrings,
1.32 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.32 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.32 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.32 __init__.py(722):             if not isinstance(doc, str):
1.32 __init__.py(724):                 doc = None
1.32 __init__.py(728):             cls = self.get_attr(member, '__class__', None)
1.32 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.32 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.32 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.32 __init__.py(729):             if cls:
1.32 __init__.py(730):                 cls_doc = self.get_attr(cls, '__doc__', None)
1.32 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.32 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.32 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.32 __init__.py(731):                 if cls_doc == doc:
1.32 __init__.py(732):                     doc = None
1.32 __init__.py(734):             if isinstance(obj, ObjectMember) and obj.docstring:
1.32 __init__.py(736):                 doc = obj.docstring
1.32 __init__.py(738):             doc, metadata = separate_metadata(doc)
1.32 __init__.py(739):             has_doc = bool(doc)
1.32 __init__.py(741):             if 'private' in metadata:
1.32 __init__.py(744):             elif 'public' in metadata:
1.32 __init__.py(748):                 isprivate = membername.startswith('_')
1.32 __init__.py(750):             keep = False
1.32 __init__.py(751):             if ismock(member):
1.32 __init__.py(754):             elif self.options.exclude_members and membername in self.options.exclude_members:
1.32 __init__.py(261):         try:
1.32 __init__.py(262):             return self[name.replace('_', '-')]
1.32 __init__.py(263):         except KeyError:
1.32 __init__.py(264):             return None
1.32 __init__.py(757):             elif want_all and special_member_re.match(membername):
1.32 __init__.py(768):             elif (namespace, membername) in attr_docs:
1.32 __init__.py(769):                 if want_all and isprivate:
1.32 __init__.py(776):                     keep = True
1.32 __init__.py(795):             if isinstance(obj, ObjectMember) and obj.skipped:
1.32 __init__.py(801):             if self.env.app:
1.32 __init__.py(803):                 try:
1.32 __init__.py(804):                     skip_user = self.env.app.emit_firstresult(
1.32 __init__.py(805):                         'autodoc-skip-member', self.objtype, membername, member,
1.32 __init__.py(806):                         not keep, self.options)
1.32 __init__.py(804):                     skip_user = self.env.app.emit_firstresult(
1.32 __init__.py(807):                     if skip_user is not None:
1.32 __init__.py(815):             if keep:
1.32 __init__.py(816):                 ret.append((membername, member, isattr))
1.32 __init__.py(710):         for obj in members:
1.32 __init__.py(711):             membername, member = obj
1.32 __init__.py(713):             if member is INSTANCEATTR:
1.32 __init__.py(715):             elif (namespace, membername) in attr_docs:
1.32 __init__.py(718):                 isattr = False
1.32 __init__.py(720):             doc = getdoc(member, self.get_attr, self.config.autodoc_inherit_docstrings,
1.32 __init__.py(721):                          self.parent, self.object_name)
1.32 __init__.py(720):             doc = getdoc(member, self.get_attr, self.config.autodoc_inherit_docstrings,
1.32 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.32 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.32 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.32 __init__.py(722):             if not isinstance(doc, str):
1.32 __init__.py(728):             cls = self.get_attr(member, '__class__', None)
1.32 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.32 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.32 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.32 __init__.py(729):             if cls:
1.32 __init__.py(730):                 cls_doc = self.get_attr(cls, '__doc__', None)
1.32 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.32 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.32 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.32 __init__.py(731):                 if cls_doc == doc:
1.32 __init__.py(734):             if isinstance(obj, ObjectMember) and obj.docstring:
1.32 __init__.py(738):             doc, metadata = separate_metadata(doc)
1.32 __init__.py(739):             has_doc = bool(doc)
1.32 __init__.py(741):             if 'private' in metadata:
1.32 __init__.py(744):             elif 'public' in metadata:
1.32 __init__.py(748):                 isprivate = membername.startswith('_')
1.32 __init__.py(750):             keep = False
1.32 __init__.py(751):             if ismock(member):
1.32 __init__.py(754):             elif self.options.exclude_members and membername in self.options.exclude_members:
1.32 __init__.py(261):         try:
1.32 __init__.py(262):             return self[name.replace('_', '-')]
1.32 __init__.py(263):         except KeyError:
1.32 __init__.py(264):             return None
1.32 __init__.py(757):             elif want_all and special_member_re.match(membername):
1.32 __init__.py(768):             elif (namespace, membername) in attr_docs:
1.32 __init__.py(777):             elif want_all and isprivate:
1.32 __init__.py(788):                 if (self.options.members is ALL and
1.32 __init__.py(261):         try:
1.33 __init__.py(262):             return self[name.replace('_', '-')]
1.33 __init__.py(789):                         is_filtered_inherited_member(membername, obj)):
1.33 __init__.py(685):             if inspect.isclass(self.object):
1.33 __init__.py(697):             return False
1.33 __init__.py(788):                 if (self.options.members is ALL and
1.33 __init__.py(793):                     keep = has_doc or self.options.undoc_members
1.33 __init__.py(795):             if isinstance(obj, ObjectMember) and obj.skipped:
1.33 __init__.py(801):             if self.env.app:
1.33 __init__.py(803):                 try:
1.33 __init__.py(804):                     skip_user = self.env.app.emit_firstresult(
1.33 __init__.py(805):                         'autodoc-skip-member', self.objtype, membername, member,
1.33 __init__.py(806):                         not keep, self.options)
1.33 __init__.py(804):                     skip_user = self.env.app.emit_firstresult(
1.33 __init__.py(807):                     if skip_user is not None:
1.33 __init__.py(815):             if keep:
1.33 __init__.py(816):                 ret.append((membername, member, isattr))
1.33 __init__.py(710):         for obj in members:
1.33 __init__.py(711):             membername, member = obj
1.33 __init__.py(713):             if member is INSTANCEATTR:
1.33 __init__.py(715):             elif (namespace, membername) in attr_docs:
1.33 __init__.py(716):                 isattr = True
1.33 __init__.py(720):             doc = getdoc(member, self.get_attr, self.config.autodoc_inherit_docstrings,
1.33 __init__.py(721):                          self.parent, self.object_name)
1.33 __init__.py(720):             doc = getdoc(member, self.get_attr, self.config.autodoc_inherit_docstrings,
1.33 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.33 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.33 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.33 __init__.py(722):             if not isinstance(doc, str):
1.33 __init__.py(724):                 doc = None
1.33 __init__.py(728):             cls = self.get_attr(member, '__class__', None)
1.33 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.33 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.33 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.33 __init__.py(729):             if cls:
1.33 __init__.py(730):                 cls_doc = self.get_attr(cls, '__doc__', None)
1.33 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.33 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.33 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.33 __init__.py(731):                 if cls_doc == doc:
1.33 __init__.py(732):                     doc = None
1.33 __init__.py(734):             if isinstance(obj, ObjectMember) and obj.docstring:
1.33 __init__.py(736):                 doc = obj.docstring
1.33 __init__.py(738):             doc, metadata = separate_metadata(doc)
1.33 __init__.py(739):             has_doc = bool(doc)
1.33 __init__.py(741):             if 'private' in metadata:
1.33 __init__.py(744):             elif 'public' in metadata:
1.33 __init__.py(748):                 isprivate = membername.startswith('_')
1.33 __init__.py(750):             keep = False
1.33 __init__.py(751):             if ismock(member):
1.33 __init__.py(754):             elif self.options.exclude_members and membername in self.options.exclude_members:
1.33 __init__.py(261):         try:
1.33 __init__.py(262):             return self[name.replace('_', '-')]
1.33 __init__.py(263):         except KeyError:
1.33 __init__.py(264):             return None
1.33 __init__.py(757):             elif want_all and special_member_re.match(membername):
1.33 __init__.py(768):             elif (namespace, membername) in attr_docs:
1.33 __init__.py(769):                 if want_all and isprivate:
1.33 __init__.py(776):                     keep = True
1.33 __init__.py(795):             if isinstance(obj, ObjectMember) and obj.skipped:
1.33 __init__.py(801):             if self.env.app:
1.33 __init__.py(803):                 try:
1.33 __init__.py(804):                     skip_user = self.env.app.emit_firstresult(
1.33 __init__.py(805):                         'autodoc-skip-member', self.objtype, membername, member,
1.33 __init__.py(806):                         not keep, self.options)
1.33 __init__.py(804):                     skip_user = self.env.app.emit_firstresult(
1.33 __init__.py(807):                     if skip_user is not None:
1.33 __init__.py(815):             if keep:
1.33 __init__.py(816):                 ret.append((membername, member, isattr))
1.33 __init__.py(710):         for obj in members:
1.33 __init__.py(711):             membername, member = obj
1.33 __init__.py(713):             if member is INSTANCEATTR:
1.33 __init__.py(715):             elif (namespace, membername) in attr_docs:
1.33 __init__.py(718):                 isattr = False
1.33 __init__.py(720):             doc = getdoc(member, self.get_attr, self.config.autodoc_inherit_docstrings,
1.33 __init__.py(721):                          self.parent, self.object_name)
1.33 __init__.py(720):             doc = getdoc(member, self.get_attr, self.config.autodoc_inherit_docstrings,
1.33 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.33 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.33 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.33 __init__.py(722):             if not isinstance(doc, str):
1.33 __init__.py(728):             cls = self.get_attr(member, '__class__', None)
1.33 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.33 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.33 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.33 __init__.py(729):             if cls:
1.33 __init__.py(730):                 cls_doc = self.get_attr(cls, '__doc__', None)
1.33 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.33 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.33 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.33 __init__.py(731):                 if cls_doc == doc:
1.33 __init__.py(734):             if isinstance(obj, ObjectMember) and obj.docstring:
1.33 __init__.py(738):             doc, metadata = separate_metadata(doc)
1.33 __init__.py(739):             has_doc = bool(doc)
1.33 __init__.py(741):             if 'private' in metadata:
1.33 __init__.py(744):             elif 'public' in metadata:
1.33 __init__.py(748):                 isprivate = membername.startswith('_')
1.33 __init__.py(750):             keep = False
1.33 __init__.py(751):             if ismock(member):
1.33 __init__.py(754):             elif self.options.exclude_members and membername in self.options.exclude_members:
1.33 __init__.py(261):         try:
1.33 __init__.py(262):             return self[name.replace('_', '-')]
1.33 __init__.py(263):         except KeyError:
1.33 __init__.py(264):             return None
1.33 __init__.py(757):             elif want_all and special_member_re.match(membername):
1.33 __init__.py(768):             elif (namespace, membername) in attr_docs:
1.33 __init__.py(777):             elif want_all and isprivate:
1.33 __init__.py(788):                 if (self.options.members is ALL and
1.33 __init__.py(261):         try:
1.33 __init__.py(262):             return self[name.replace('_', '-')]
1.33 __init__.py(789):                         is_filtered_inherited_member(membername, obj)):
1.33 __init__.py(685):             if inspect.isclass(self.object):
1.33 __init__.py(697):             return False
1.33 __init__.py(788):                 if (self.options.members is ALL and
1.33 __init__.py(793):                     keep = has_doc or self.options.undoc_members
1.33 __init__.py(795):             if isinstance(obj, ObjectMember) and obj.skipped:
1.33 __init__.py(801):             if self.env.app:
1.33 __init__.py(803):                 try:
1.33 __init__.py(804):                     skip_user = self.env.app.emit_firstresult(
1.33 __init__.py(805):                         'autodoc-skip-member', self.objtype, membername, member,
1.33 __init__.py(806):                         not keep, self.options)
1.33 __init__.py(804):                     skip_user = self.env.app.emit_firstresult(
1.33 __init__.py(807):                     if skip_user is not None:
1.33 __init__.py(815):             if keep:
1.33 __init__.py(816):                 ret.append((membername, member, isattr))
1.33 __init__.py(710):         for obj in members:
1.33 __init__.py(711):             membername, member = obj
1.33 __init__.py(713):             if member is INSTANCEATTR:
1.33 __init__.py(715):             elif (namespace, membername) in attr_docs:
1.33 __init__.py(718):                 isattr = False
1.33 __init__.py(720):             doc = getdoc(member, self.get_attr, self.config.autodoc_inherit_docstrings,
1.33 __init__.py(721):                          self.parent, self.object_name)
1.33 __init__.py(720):             doc = getdoc(member, self.get_attr, self.config.autodoc_inherit_docstrings,
1.33 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.33 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.33 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.33 __init__.py(722):             if not isinstance(doc, str):
1.33 __init__.py(728):             cls = self.get_attr(member, '__class__', None)
1.33 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.33 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.33 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.33 __init__.py(729):             if cls:
1.33 __init__.py(730):                 cls_doc = self.get_attr(cls, '__doc__', None)
1.33 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.33 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.33 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.33 __init__.py(731):                 if cls_doc == doc:
1.33 __init__.py(732):                     doc = None
1.33 __init__.py(734):             if isinstance(obj, ObjectMember) and obj.docstring:
1.33 __init__.py(738):             doc, metadata = separate_metadata(doc)
1.33 __init__.py(739):             has_doc = bool(doc)
1.33 __init__.py(741):             if 'private' in metadata:
1.33 __init__.py(744):             elif 'public' in metadata:
1.33 __init__.py(748):                 isprivate = membername.startswith('_')
1.33 __init__.py(750):             keep = False
1.33 __init__.py(751):             if ismock(member):
1.33 __init__.py(754):             elif self.options.exclude_members and membername in self.options.exclude_members:
1.33 __init__.py(261):         try:
1.33 __init__.py(262):             return self[name.replace('_', '-')]
1.33 __init__.py(263):         except KeyError:
1.33 __init__.py(264):             return None
1.33 __init__.py(757):             elif want_all and special_member_re.match(membername):
1.33 __init__.py(759):                 if self.options.special_members and membername in self.options.special_members:
1.33 __init__.py(261):         try:
1.33 __init__.py(262):             return self[name.replace('_', '-')]
1.33 __init__.py(263):         except KeyError:
1.33 __init__.py(264):             return None
1.33 __init__.py(767):                     keep = False
1.33 __init__.py(795):             if isinstance(obj, ObjectMember) and obj.skipped:
1.33 __init__.py(801):             if self.env.app:
1.33 __init__.py(803):                 try:
1.33 __init__.py(804):                     skip_user = self.env.app.emit_firstresult(
1.33 __init__.py(805):                         'autodoc-skip-member', self.objtype, membername, member,
1.33 __init__.py(806):                         not keep, self.options)
1.33 __init__.py(804):                     skip_user = self.env.app.emit_firstresult(
1.33 __init__.py(807):                     if skip_user is not None:
1.33 __init__.py(815):             if keep:
1.33 __init__.py(710):         for obj in members:
1.33 __init__.py(711):             membername, member = obj
1.33 __init__.py(713):             if member is INSTANCEATTR:
1.33 __init__.py(715):             elif (namespace, membername) in attr_docs:
1.33 __init__.py(718):                 isattr = False
1.33 __init__.py(720):             doc = getdoc(member, self.get_attr, self.config.autodoc_inherit_docstrings,
1.33 __init__.py(721):                          self.parent, self.object_name)
1.33 __init__.py(720):             doc = getdoc(member, self.get_attr, self.config.autodoc_inherit_docstrings,
1.33 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.33 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.33 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.33 __init__.py(722):             if not isinstance(doc, str):
1.33 __init__.py(728):             cls = self.get_attr(member, '__class__', None)
1.33 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.33 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.33 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.33 __init__.py(729):             if cls:
1.33 __init__.py(730):                 cls_doc = self.get_attr(cls, '__doc__', None)
1.33 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.33 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.33 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.33 __init__.py(731):                 if cls_doc == doc:
1.33 __init__.py(732):                     doc = None
1.33 __init__.py(734):             if isinstance(obj, ObjectMember) and obj.docstring:
1.33 __init__.py(738):             doc, metadata = separate_metadata(doc)
1.33 __init__.py(739):             has_doc = bool(doc)
1.33 __init__.py(741):             if 'private' in metadata:
1.33 __init__.py(744):             elif 'public' in metadata:
1.33 __init__.py(748):                 isprivate = membername.startswith('_')
1.33 __init__.py(750):             keep = False
1.33 __init__.py(751):             if ismock(member):
1.33 __init__.py(754):             elif self.options.exclude_members and membername in self.options.exclude_members:
1.33 __init__.py(261):         try:
1.33 __init__.py(262):             return self[name.replace('_', '-')]
1.33 __init__.py(263):         except KeyError:
1.33 __init__.py(264):             return None
1.33 __init__.py(757):             elif want_all and special_member_re.match(membername):
1.33 __init__.py(759):                 if self.options.special_members and membername in self.options.special_members:
1.33 __init__.py(261):         try:
1.33 __init__.py(262):             return self[name.replace('_', '-')]
1.33 __init__.py(263):         except KeyError:
1.33 __init__.py(264):             return None
1.33 __init__.py(767):                     keep = False
1.33 __init__.py(795):             if isinstance(obj, ObjectMember) and obj.skipped:
1.33 __init__.py(801):             if self.env.app:
1.33 __init__.py(803):                 try:
1.33 __init__.py(804):                     skip_user = self.env.app.emit_firstresult(
1.33 __init__.py(805):                         'autodoc-skip-member', self.objtype, membername, member,
1.33 __init__.py(806):                         not keep, self.options)
1.33 __init__.py(804):                     skip_user = self.env.app.emit_firstresult(
1.33 __init__.py(807):                     if skip_user is not None:
1.33 __init__.py(815):             if keep:
1.33 __init__.py(710):         for obj in members:
1.33 __init__.py(711):             membername, member = obj
1.33 __init__.py(713):             if member is INSTANCEATTR:
1.33 __init__.py(715):             elif (namespace, membername) in attr_docs:
1.33 __init__.py(718):                 isattr = False
1.33 __init__.py(720):             doc = getdoc(member, self.get_attr, self.config.autodoc_inherit_docstrings,
1.33 __init__.py(721):                          self.parent, self.object_name)
1.33 __init__.py(720):             doc = getdoc(member, self.get_attr, self.config.autodoc_inherit_docstrings,
1.33 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.33 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.33 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.33 __init__.py(722):             if not isinstance(doc, str):
1.33 __init__.py(724):                 doc = None
1.33 __init__.py(728):             cls = self.get_attr(member, '__class__', None)
1.33 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.33 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.33 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.33 __init__.py(729):             if cls:
1.33 __init__.py(730):                 cls_doc = self.get_attr(cls, '__doc__', None)
1.33 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.33 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.33 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.33 __init__.py(731):                 if cls_doc == doc:
1.33 __init__.py(732):                     doc = None
1.33 __init__.py(734):             if isinstance(obj, ObjectMember) and obj.docstring:
1.33 __init__.py(738):             doc, metadata = separate_metadata(doc)
1.33 __init__.py(739):             has_doc = bool(doc)
1.33 __init__.py(741):             if 'private' in metadata:
1.33 __init__.py(744):             elif 'public' in metadata:
1.33 __init__.py(748):                 isprivate = membername.startswith('_')
1.33 __init__.py(750):             keep = False
1.33 __init__.py(751):             if ismock(member):
1.33 __init__.py(754):             elif self.options.exclude_members and membername in self.options.exclude_members:
1.33 __init__.py(261):         try:
1.33 __init__.py(262):             return self[name.replace('_', '-')]
1.33 __init__.py(263):         except KeyError:
1.33 __init__.py(264):             return None
1.33 __init__.py(757):             elif want_all and special_member_re.match(membername):
1.33 __init__.py(759):                 if self.options.special_members and membername in self.options.special_members:
1.33 __init__.py(261):         try:
1.33 __init__.py(262):             return self[name.replace('_', '-')]
1.33 __init__.py(263):         except KeyError:
1.33 __init__.py(264):             return None
1.33 __init__.py(767):                     keep = False
1.33 __init__.py(795):             if isinstance(obj, ObjectMember) and obj.skipped:
1.33 __init__.py(801):             if self.env.app:
1.33 __init__.py(803):                 try:
1.33 __init__.py(804):                     skip_user = self.env.app.emit_firstresult(
1.33 __init__.py(805):                         'autodoc-skip-member', self.objtype, membername, member,
1.33 __init__.py(806):                         not keep, self.options)
1.33 __init__.py(804):                     skip_user = self.env.app.emit_firstresult(
1.33 __init__.py(807):                     if skip_user is not None:
1.33 __init__.py(815):             if keep:
1.33 __init__.py(710):         for obj in members:
1.33 __init__.py(711):             membername, member = obj
1.33 __init__.py(713):             if member is INSTANCEATTR:
1.33 __init__.py(715):             elif (namespace, membername) in attr_docs:
1.33 __init__.py(718):                 isattr = False
1.33 __init__.py(720):             doc = getdoc(member, self.get_attr, self.config.autodoc_inherit_docstrings,
1.33 __init__.py(721):                          self.parent, self.object_name)
1.33 __init__.py(720):             doc = getdoc(member, self.get_attr, self.config.autodoc_inherit_docstrings,
1.33 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.33 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.33 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.33 __init__.py(722):             if not isinstance(doc, str):
1.33 __init__.py(728):             cls = self.get_attr(member, '__class__', None)
1.33 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.33 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.33 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.33 __init__.py(729):             if cls:
1.33 __init__.py(730):                 cls_doc = self.get_attr(cls, '__doc__', None)
1.33 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.33 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.33 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.33 __init__.py(731):                 if cls_doc == doc:
1.33 __init__.py(732):                     doc = None
1.33 __init__.py(734):             if isinstance(obj, ObjectMember) and obj.docstring:
1.33 __init__.py(738):             doc, metadata = separate_metadata(doc)
1.33 __init__.py(739):             has_doc = bool(doc)
1.33 __init__.py(741):             if 'private' in metadata:
1.33 __init__.py(744):             elif 'public' in metadata:
1.33 __init__.py(748):                 isprivate = membername.startswith('_')
1.33 __init__.py(750):             keep = False
1.33 __init__.py(751):             if ismock(member):
1.33 __init__.py(754):             elif self.options.exclude_members and membername in self.options.exclude_members:
1.33 __init__.py(261):         try:
1.33 __init__.py(262):             return self[name.replace('_', '-')]
1.33 __init__.py(263):         except KeyError:
1.33 __init__.py(264):             return None
1.33 __init__.py(757):             elif want_all and special_member_re.match(membername):
1.33 __init__.py(759):                 if self.options.special_members and membername in self.options.special_members:
1.33 __init__.py(261):         try:
1.33 __init__.py(262):             return self[name.replace('_', '-')]
1.33 __init__.py(263):         except KeyError:
1.33 __init__.py(264):             return None
1.33 __init__.py(767):                     keep = False
1.33 __init__.py(795):             if isinstance(obj, ObjectMember) and obj.skipped:
1.33 __init__.py(801):             if self.env.app:
1.33 __init__.py(803):                 try:
1.33 __init__.py(804):                     skip_user = self.env.app.emit_firstresult(
1.33 __init__.py(805):                         'autodoc-skip-member', self.objtype, membername, member,
1.33 __init__.py(806):                         not keep, self.options)
1.33 __init__.py(804):                     skip_user = self.env.app.emit_firstresult(
1.33 __init__.py(807):                     if skip_user is not None:
1.33 __init__.py(815):             if keep:
1.33 __init__.py(710):         for obj in members:
1.33 __init__.py(711):             membername, member = obj
1.33 __init__.py(713):             if member is INSTANCEATTR:
1.33 __init__.py(715):             elif (namespace, membername) in attr_docs:
1.33 __init__.py(718):                 isattr = False
1.33 __init__.py(720):             doc = getdoc(member, self.get_attr, self.config.autodoc_inherit_docstrings,
1.33 __init__.py(721):                          self.parent, self.object_name)
1.33 __init__.py(720):             doc = getdoc(member, self.get_attr, self.config.autodoc_inherit_docstrings,
1.33 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.33 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.33 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.33 __init__.py(722):             if not isinstance(doc, str):
1.33 __init__.py(728):             cls = self.get_attr(member, '__class__', None)
1.33 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.33 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.33 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.33 __init__.py(729):             if cls:
1.33 __init__.py(730):                 cls_doc = self.get_attr(cls, '__doc__', None)
1.33 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.33 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.33 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.33 __init__.py(731):                 if cls_doc == doc:
1.33 __init__.py(732):                     doc = None
1.33 __init__.py(734):             if isinstance(obj, ObjectMember) and obj.docstring:
1.33 __init__.py(738):             doc, metadata = separate_metadata(doc)
1.33 __init__.py(739):             has_doc = bool(doc)
1.33 __init__.py(741):             if 'private' in metadata:
1.33 __init__.py(744):             elif 'public' in metadata:
1.33 __init__.py(748):                 isprivate = membername.startswith('_')
1.33 __init__.py(750):             keep = False
1.33 __init__.py(751):             if ismock(member):
1.33 __init__.py(754):             elif self.options.exclude_members and membername in self.options.exclude_members:
1.33 __init__.py(261):         try:
1.33 __init__.py(262):             return self[name.replace('_', '-')]
1.33 __init__.py(263):         except KeyError:
1.33 __init__.py(264):             return None
1.33 __init__.py(757):             elif want_all and special_member_re.match(membername):
1.33 __init__.py(759):                 if self.options.special_members and membername in self.options.special_members:
1.33 __init__.py(261):         try:
1.33 __init__.py(262):             return self[name.replace('_', '-')]
1.33 __init__.py(263):         except KeyError:
1.33 __init__.py(264):             return None
1.33 __init__.py(767):                     keep = False
1.33 __init__.py(795):             if isinstance(obj, ObjectMember) and obj.skipped:
1.33 __init__.py(801):             if self.env.app:
1.33 __init__.py(803):                 try:
1.33 __init__.py(804):                     skip_user = self.env.app.emit_firstresult(
1.33 __init__.py(805):                         'autodoc-skip-member', self.objtype, membername, member,
1.33 __init__.py(806):                         not keep, self.options)
1.33 __init__.py(804):                     skip_user = self.env.app.emit_firstresult(
1.33 __init__.py(807):                     if skip_user is not None:
1.33 __init__.py(815):             if keep:
1.33 __init__.py(710):         for obj in members:
1.33 __init__.py(711):             membername, member = obj
1.33 __init__.py(713):             if member is INSTANCEATTR:
1.33 __init__.py(715):             elif (namespace, membername) in attr_docs:
1.33 __init__.py(718):                 isattr = False
1.33 __init__.py(720):             doc = getdoc(member, self.get_attr, self.config.autodoc_inherit_docstrings,
1.33 __init__.py(721):                          self.parent, self.object_name)
1.33 __init__.py(720):             doc = getdoc(member, self.get_attr, self.config.autodoc_inherit_docstrings,
1.33 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.33 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.33 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.33 __init__.py(722):             if not isinstance(doc, str):
1.33 __init__.py(728):             cls = self.get_attr(member, '__class__', None)
1.33 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.33 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.33 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.33 __init__.py(729):             if cls:
1.33 __init__.py(730):                 cls_doc = self.get_attr(cls, '__doc__', None)
1.33 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.33 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.33 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.33 __init__.py(731):                 if cls_doc == doc:
1.33 __init__.py(732):                     doc = None
1.33 __init__.py(734):             if isinstance(obj, ObjectMember) and obj.docstring:
1.33 __init__.py(738):             doc, metadata = separate_metadata(doc)
1.33 __init__.py(739):             has_doc = bool(doc)
1.33 __init__.py(741):             if 'private' in metadata:
1.33 __init__.py(744):             elif 'public' in metadata:
1.33 __init__.py(748):                 isprivate = membername.startswith('_')
1.33 __init__.py(750):             keep = False
1.33 __init__.py(751):             if ismock(member):
1.33 __init__.py(754):             elif self.options.exclude_members and membername in self.options.exclude_members:
1.33 __init__.py(261):         try:
1.33 __init__.py(262):             return self[name.replace('_', '-')]
1.33 __init__.py(263):         except KeyError:
1.33 __init__.py(264):             return None
1.33 __init__.py(757):             elif want_all and special_member_re.match(membername):
1.33 __init__.py(759):                 if self.options.special_members and membername in self.options.special_members:
1.33 __init__.py(261):         try:
1.33 __init__.py(262):             return self[name.replace('_', '-')]
1.33 __init__.py(263):         except KeyError:
1.33 __init__.py(264):             return None
1.33 __init__.py(767):                     keep = False
1.33 __init__.py(795):             if isinstance(obj, ObjectMember) and obj.skipped:
1.33 __init__.py(801):             if self.env.app:
1.33 __init__.py(803):                 try:
1.33 __init__.py(804):                     skip_user = self.env.app.emit_firstresult(
1.33 __init__.py(805):                         'autodoc-skip-member', self.objtype, membername, member,
1.33 __init__.py(806):                         not keep, self.options)
1.33 __init__.py(804):                     skip_user = self.env.app.emit_firstresult(
1.33 __init__.py(807):                     if skip_user is not None:
1.33 __init__.py(815):             if keep:
1.33 __init__.py(710):         for obj in members:
1.33 __init__.py(711):             membername, member = obj
1.33 __init__.py(713):             if member is INSTANCEATTR:
1.33 __init__.py(715):             elif (namespace, membername) in attr_docs:
1.33 __init__.py(718):                 isattr = False
1.33 __init__.py(720):             doc = getdoc(member, self.get_attr, self.config.autodoc_inherit_docstrings,
1.33 __init__.py(721):                          self.parent, self.object_name)
1.33 __init__.py(720):             doc = getdoc(member, self.get_attr, self.config.autodoc_inherit_docstrings,
1.33 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.33 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.33 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.33 __init__.py(722):             if not isinstance(doc, str):
1.33 __init__.py(728):             cls = self.get_attr(member, '__class__', None)
1.33 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.33 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.33 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.33 __init__.py(729):             if cls:
1.33 __init__.py(730):                 cls_doc = self.get_attr(cls, '__doc__', None)
1.33 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.33 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.33 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.33 __init__.py(731):                 if cls_doc == doc:
1.33 __init__.py(732):                     doc = None
1.33 __init__.py(734):             if isinstance(obj, ObjectMember) and obj.docstring:
1.33 __init__.py(738):             doc, metadata = separate_metadata(doc)
1.33 __init__.py(739):             has_doc = bool(doc)
1.33 __init__.py(741):             if 'private' in metadata:
1.33 __init__.py(744):             elif 'public' in metadata:
1.33 __init__.py(748):                 isprivate = membername.startswith('_')
1.33 __init__.py(750):             keep = False
1.33 __init__.py(751):             if ismock(member):
1.33 __init__.py(754):             elif self.options.exclude_members and membername in self.options.exclude_members:
1.33 __init__.py(261):         try:
1.33 __init__.py(262):             return self[name.replace('_', '-')]
1.33 __init__.py(263):         except KeyError:
1.33 __init__.py(264):             return None
1.33 __init__.py(757):             elif want_all and special_member_re.match(membername):
1.33 __init__.py(759):                 if self.options.special_members and membername in self.options.special_members:
1.33 __init__.py(261):         try:
1.33 __init__.py(262):             return self[name.replace('_', '-')]
1.33 __init__.py(263):         except KeyError:
1.33 __init__.py(264):             return None
1.33 __init__.py(767):                     keep = False
1.33 __init__.py(795):             if isinstance(obj, ObjectMember) and obj.skipped:
1.33 __init__.py(801):             if self.env.app:
1.33 __init__.py(803):                 try:
1.33 __init__.py(804):                     skip_user = self.env.app.emit_firstresult(
1.33 __init__.py(805):                         'autodoc-skip-member', self.objtype, membername, member,
1.33 __init__.py(806):                         not keep, self.options)
1.33 __init__.py(804):                     skip_user = self.env.app.emit_firstresult(
1.33 __init__.py(807):                     if skip_user is not None:
1.33 __init__.py(815):             if keep:
1.33 __init__.py(710):         for obj in members:
1.33 __init__.py(711):             membername, member = obj
1.33 __init__.py(713):             if member is INSTANCEATTR:
1.33 __init__.py(715):             elif (namespace, membername) in attr_docs:
1.33 __init__.py(718):                 isattr = False
1.33 __init__.py(720):             doc = getdoc(member, self.get_attr, self.config.autodoc_inherit_docstrings,
1.33 __init__.py(721):                          self.parent, self.object_name)
1.33 __init__.py(720):             doc = getdoc(member, self.get_attr, self.config.autodoc_inherit_docstrings,
1.33 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.33 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.33 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.33 __init__.py(722):             if not isinstance(doc, str):
1.33 __init__.py(728):             cls = self.get_attr(member, '__class__', None)
1.33 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.33 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.33 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.33 __init__.py(729):             if cls:
1.33 __init__.py(730):                 cls_doc = self.get_attr(cls, '__doc__', None)
1.33 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.33 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.33 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.33 __init__.py(731):                 if cls_doc == doc:
1.33 __init__.py(732):                     doc = None
1.33 __init__.py(734):             if isinstance(obj, ObjectMember) and obj.docstring:
1.33 __init__.py(738):             doc, metadata = separate_metadata(doc)
1.33 __init__.py(739):             has_doc = bool(doc)
1.33 __init__.py(741):             if 'private' in metadata:
1.33 __init__.py(744):             elif 'public' in metadata:
1.33 __init__.py(748):                 isprivate = membername.startswith('_')
1.33 __init__.py(750):             keep = False
1.33 __init__.py(751):             if ismock(member):
1.33 __init__.py(754):             elif self.options.exclude_members and membername in self.options.exclude_members:
1.33 __init__.py(261):         try:
1.33 __init__.py(262):             return self[name.replace('_', '-')]
1.33 __init__.py(263):         except KeyError:
1.33 __init__.py(264):             return None
1.33 __init__.py(757):             elif want_all and special_member_re.match(membername):
1.33 __init__.py(759):                 if self.options.special_members and membername in self.options.special_members:
1.33 __init__.py(261):         try:
1.33 __init__.py(262):             return self[name.replace('_', '-')]
1.33 __init__.py(263):         except KeyError:
1.33 __init__.py(264):             return None
1.33 __init__.py(767):                     keep = False
1.33 __init__.py(795):             if isinstance(obj, ObjectMember) and obj.skipped:
1.33 __init__.py(801):             if self.env.app:
1.33 __init__.py(803):                 try:
1.33 __init__.py(804):                     skip_user = self.env.app.emit_firstresult(
1.33 __init__.py(805):                         'autodoc-skip-member', self.objtype, membername, member,
1.33 __init__.py(806):                         not keep, self.options)
1.33 __init__.py(804):                     skip_user = self.env.app.emit_firstresult(
1.33 __init__.py(807):                     if skip_user is not None:
1.33 __init__.py(815):             if keep:
1.33 __init__.py(710):         for obj in members:
1.33 __init__.py(818):         return ret
1.33 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.33 __init__.py(365):         return self.env.app.registry.documenters
1.33 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.33 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.33 __init__.py(1006):         return False
1.33 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.33 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.33 __init__.py(1460):         return isinstance(member, type)
1.33 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.33 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.33 __init__.py(1777):         return isinstance(member, type) and issubclass(member, BaseException)
1.33 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.33 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.33 __init__.py(1937):         return isinstance(parent, ModuleDocumenter) and isattr
1.33 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.33 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.33 __init__.py(2050):         return inspect.isNewType(member) and isattr
1.33 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.33 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.33 __init__.py(1284):         return (inspect.isfunction(member) or inspect.isbuiltin(member) or
1.33 __init__.py(1285):                 (inspect.isroutine(member) and isinstance(parent, ModuleDocumenter)))
1.33 __init__.py(1284):         return (inspect.isfunction(member) or inspect.isbuiltin(member) or
1.33 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.33 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.33 __init__.py(1284):         return (inspect.isfunction(member) or inspect.isbuiltin(member) or
1.33 __init__.py(1285):                 (inspect.isroutine(member) and isinstance(parent, ModuleDocumenter)))
1.33 __init__.py(1284):         return (inspect.isfunction(member) or inspect.isbuiltin(member) or
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(2065):         return inspect.isroutine(member) and not isinstance(parent, ModuleDocumenter)
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(2467):         if inspect.isattributedescriptor(member):
1.34 __init__.py(2469):         elif (not isinstance(parent, ModuleDocumenter) and
1.34 __init__.py(2474):             return False
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(2628):         return inspect.isproperty(member) and isinstance(parent, ClassDocumenter)
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(2673):         return not isinstance(parent, ModuleDocumenter) and inspect.isNewType(member)
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(842):             if not classes:
1.34 __init__.py(844):                 continue
1.34 __init__.py(839):         for (mname, member, isattr) in self.filter_members(members, want_all):
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(365):         return self.env.app.registry.documenters
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(1006):         return False
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(1460):         return isinstance(member, type)
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(1777):         return isinstance(member, type) and issubclass(member, BaseException)
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(1937):         return isinstance(parent, ModuleDocumenter) and isattr
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(2050):         return inspect.isNewType(member) and isattr
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(1284):         return (inspect.isfunction(member) or inspect.isbuiltin(member) or
1.34 __init__.py(1285):                 (inspect.isroutine(member) and isinstance(parent, ModuleDocumenter)))
1.34 __init__.py(1284):         return (inspect.isfunction(member) or inspect.isbuiltin(member) or
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(1284):         return (inspect.isfunction(member) or inspect.isbuiltin(member) or
1.34 __init__.py(1285):                 (inspect.isroutine(member) and isinstance(parent, ModuleDocumenter)))
1.34 __init__.py(1284):         return (inspect.isfunction(member) or inspect.isbuiltin(member) or
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(2065):         return inspect.isroutine(member) and not isinstance(parent, ModuleDocumenter)
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(2467):         if inspect.isattributedescriptor(member):
1.34 __init__.py(2469):         elif (not isinstance(parent, ModuleDocumenter) and
1.34 __init__.py(2474):             return False
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(2628):         return inspect.isproperty(member) and isinstance(parent, ClassDocumenter)
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(2673):         return not isinstance(parent, ModuleDocumenter) and inspect.isNewType(member)
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(842):             if not classes:
1.34 __init__.py(844):                 continue
1.34 __init__.py(839):         for (mname, member, isattr) in self.filter_members(members, want_all):
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(365):         return self.env.app.registry.documenters
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(1006):         return False
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(1460):         return isinstance(member, type)
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(1777):         return isinstance(member, type) and issubclass(member, BaseException)
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(1937):         return isinstance(parent, ModuleDocumenter) and isattr
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(2050):         return inspect.isNewType(member) and isattr
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(1284):         return (inspect.isfunction(member) or inspect.isbuiltin(member) or
1.34 __init__.py(1285):                 (inspect.isroutine(member) and isinstance(parent, ModuleDocumenter)))
1.34 __init__.py(1284):         return (inspect.isfunction(member) or inspect.isbuiltin(member) or
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(1284):         return (inspect.isfunction(member) or inspect.isbuiltin(member) or
1.34 __init__.py(1285):                 (inspect.isroutine(member) and isinstance(parent, ModuleDocumenter)))
1.34 __init__.py(1284):         return (inspect.isfunction(member) or inspect.isbuiltin(member) or
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(2065):         return inspect.isroutine(member) and not isinstance(parent, ModuleDocumenter)
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(2467):         if inspect.isattributedescriptor(member):
1.34 __init__.py(2469):         elif (not isinstance(parent, ModuleDocumenter) and
1.34 __init__.py(2474):             return False
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(2628):         return inspect.isproperty(member) and isinstance(parent, ClassDocumenter)
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(2673):         return not isinstance(parent, ModuleDocumenter) and inspect.isNewType(member)
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(842):             if not classes:
1.34 __init__.py(844):                 continue
1.34 __init__.py(839):         for (mname, member, isattr) in self.filter_members(members, want_all):
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(365):         return self.env.app.registry.documenters
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(1006):         return False
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(1460):         return isinstance(member, type)
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(1777):         return isinstance(member, type) and issubclass(member, BaseException)
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(1937):         return isinstance(parent, ModuleDocumenter) and isattr
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(2050):         return inspect.isNewType(member) and isattr
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(1284):         return (inspect.isfunction(member) or inspect.isbuiltin(member) or
1.34 __init__.py(1285):                 (inspect.isroutine(member) and isinstance(parent, ModuleDocumenter)))
1.34 __init__.py(1284):         return (inspect.isfunction(member) or inspect.isbuiltin(member) or
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(1284):         return (inspect.isfunction(member) or inspect.isbuiltin(member) or
1.34 __init__.py(1285):                 (inspect.isroutine(member) and isinstance(parent, ModuleDocumenter)))
1.34 __init__.py(1284):         return (inspect.isfunction(member) or inspect.isbuiltin(member) or
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(2065):         return inspect.isroutine(member) and not isinstance(parent, ModuleDocumenter)
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(2467):         if inspect.isattributedescriptor(member):
1.34 __init__.py(2469):         elif (not isinstance(parent, ModuleDocumenter) and
1.34 __init__.py(2474):             return False
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(2628):         return inspect.isproperty(member) and isinstance(parent, ClassDocumenter)
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(2673):         return not isinstance(parent, ModuleDocumenter) and inspect.isNewType(member)
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(842):             if not classes:
1.34 __init__.py(846):             classes.sort(key=lambda cls: cls.priority)
1.34 __init__.py(846):             classes.sort(key=lambda cls: cls.priority)
1.34 __init__.py(849):             full_mname = self.modname + '::' + '.'.join(self.objpath + [mname])
1.34 __init__.py(850):             documenter = classes[-1](self.directive, full_mname, self.indent)
1.34 __init__.py(338):         self.directive = directive
1.34 __init__.py(339):         self.config: Config = directive.env.config
1.34 __init__.py(340):         self.env: BuildEnvironment = directive.env
1.34 __init__.py(341):         self.options = directive.genopt
1.34 __init__.py(342):         self.name = name
1.34 __init__.py(343):         self.indent = indent
1.34 __init__.py(346):         self.modname: str = None
1.34 __init__.py(347):         self.module: ModuleType = None
1.34 __init__.py(348):         self.objpath: List[str] = None
1.34 __init__.py(349):         self.fullname: str = None
1.34 __init__.py(352):         self.args: str = None
1.34 __init__.py(353):         self.retann: str = None
1.34 __init__.py(355):         self.object: Any = None
1.34 __init__.py(356):         self.object_name: str = None
1.34 __init__.py(358):         self.parent: Any = None
1.34 __init__.py(360):         self.analyzer: ModuleAnalyzer = None
1.34 __init__.py(851):             memberdocumenters.append((documenter, isattr))
1.34 __init__.py(839):         for (mname, member, isattr) in self.filter_members(members, want_all):
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(365):         return self.env.app.registry.documenters
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(1006):         return False
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(1460):         return isinstance(member, type)
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(1777):         return isinstance(member, type) and issubclass(member, BaseException)
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(1937):         return isinstance(parent, ModuleDocumenter) and isattr
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(2050):         return inspect.isNewType(member) and isattr
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(1284):         return (inspect.isfunction(member) or inspect.isbuiltin(member) or
1.34 __init__.py(1285):                 (inspect.isroutine(member) and isinstance(parent, ModuleDocumenter)))
1.34 __init__.py(1284):         return (inspect.isfunction(member) or inspect.isbuiltin(member) or
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(1284):         return (inspect.isfunction(member) or inspect.isbuiltin(member) or
1.34 __init__.py(1285):                 (inspect.isroutine(member) and isinstance(parent, ModuleDocumenter)))
1.34 __init__.py(1284):         return (inspect.isfunction(member) or inspect.isbuiltin(member) or
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(2065):         return inspect.isroutine(member) and not isinstance(parent, ModuleDocumenter)
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(2467):         if inspect.isattributedescriptor(member):
1.34 __init__.py(2469):         elif (not isinstance(parent, ModuleDocumenter) and
1.34 __init__.py(2474):             return False
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(2628):         return inspect.isproperty(member) and isinstance(parent, ClassDocumenter)
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(2673):         return not isinstance(parent, ModuleDocumenter) and inspect.isNewType(member)
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(842):             if not classes:
1.34 __init__.py(846):             classes.sort(key=lambda cls: cls.priority)
1.34 __init__.py(846):             classes.sort(key=lambda cls: cls.priority)
1.34 __init__.py(849):             full_mname = self.modname + '::' + '.'.join(self.objpath + [mname])
1.34 __init__.py(850):             documenter = classes[-1](self.directive, full_mname, self.indent)
1.34 __init__.py(338):         self.directive = directive
1.34 __init__.py(339):         self.config: Config = directive.env.config
1.34 __init__.py(340):         self.env: BuildEnvironment = directive.env
1.34 __init__.py(341):         self.options = directive.genopt
1.34 __init__.py(342):         self.name = name
1.34 __init__.py(343):         self.indent = indent
1.34 __init__.py(346):         self.modname: str = None
1.34 __init__.py(347):         self.module: ModuleType = None
1.34 __init__.py(348):         self.objpath: List[str] = None
1.34 __init__.py(349):         self.fullname: str = None
1.34 __init__.py(352):         self.args: str = None
1.34 __init__.py(353):         self.retann: str = None
1.34 __init__.py(355):         self.object: Any = None
1.34 __init__.py(356):         self.object_name: str = None
1.34 __init__.py(358):         self.parent: Any = None
1.34 __init__.py(360):         self.analyzer: ModuleAnalyzer = None
1.34 __init__.py(851):             memberdocumenters.append((documenter, isattr))
1.34 __init__.py(839):         for (mname, member, isattr) in self.filter_members(members, want_all):
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(365):         return self.env.app.registry.documenters
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(1006):         return False
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(1460):         return isinstance(member, type)
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(1777):         return isinstance(member, type) and issubclass(member, BaseException)
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(1937):         return isinstance(parent, ModuleDocumenter) and isattr
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(2050):         return inspect.isNewType(member) and isattr
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(1284):         return (inspect.isfunction(member) or inspect.isbuiltin(member) or
1.34 __init__.py(1285):                 (inspect.isroutine(member) and isinstance(parent, ModuleDocumenter)))
1.34 __init__.py(1284):         return (inspect.isfunction(member) or inspect.isbuiltin(member) or
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(1284):         return (inspect.isfunction(member) or inspect.isbuiltin(member) or
1.34 __init__.py(1285):                 (inspect.isroutine(member) and isinstance(parent, ModuleDocumenter)))
1.34 __init__.py(1284):         return (inspect.isfunction(member) or inspect.isbuiltin(member) or
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(2065):         return inspect.isroutine(member) and not isinstance(parent, ModuleDocumenter)
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(2467):         if inspect.isattributedescriptor(member):
1.34 __init__.py(2469):         elif (not isinstance(parent, ModuleDocumenter) and
1.34 __init__.py(2474):             return False
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(2628):         return inspect.isproperty(member) and isinstance(parent, ClassDocumenter)
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(2673):         return not isinstance(parent, ModuleDocumenter) and inspect.isNewType(member)
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(842):             if not classes:
1.34 __init__.py(846):             classes.sort(key=lambda cls: cls.priority)
1.34 __init__.py(846):             classes.sort(key=lambda cls: cls.priority)
1.34 __init__.py(849):             full_mname = self.modname + '::' + '.'.join(self.objpath + [mname])
1.34 __init__.py(850):             documenter = classes[-1](self.directive, full_mname, self.indent)
1.34 __init__.py(1445):         super().__init__(*args)
1.34 __init__.py(338):         self.directive = directive
1.34 __init__.py(339):         self.config: Config = directive.env.config
1.34 __init__.py(340):         self.env: BuildEnvironment = directive.env
1.34 __init__.py(341):         self.options = directive.genopt
1.34 __init__.py(342):         self.name = name
1.34 __init__.py(343):         self.indent = indent
1.34 __init__.py(346):         self.modname: str = None
1.34 __init__.py(347):         self.module: ModuleType = None
1.34 __init__.py(348):         self.objpath: List[str] = None
1.34 __init__.py(349):         self.fullname: str = None
1.34 __init__.py(352):         self.args: str = None
1.34 __init__.py(353):         self.retann: str = None
1.34 __init__.py(355):         self.object: Any = None
1.34 __init__.py(356):         self.object_name: str = None
1.34 __init__.py(358):         self.parent: Any = None
1.34 __init__.py(360):         self.analyzer: ModuleAnalyzer = None
1.34 __init__.py(1447):         if self.config.autodoc_class_signature == 'separated':
1.34 __init__.py(1455):         merge_members_option(self.options)
1.34 __init__.py(178):     if options.get('members') is ALL:
1.34 __init__.py(180):         return
1.34 __init__.py(851):             memberdocumenters.append((documenter, isattr))
1.34 __init__.py(839):         for (mname, member, isattr) in self.filter_members(members, want_all):
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(365):         return self.env.app.registry.documenters
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(1006):         return False
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(1460):         return isinstance(member, type)
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(1777):         return isinstance(member, type) and issubclass(member, BaseException)
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(1937):         return isinstance(parent, ModuleDocumenter) and isattr
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(2050):         return inspect.isNewType(member) and isattr
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(1284):         return (inspect.isfunction(member) or inspect.isbuiltin(member) or
1.34 __init__.py(1285):                 (inspect.isroutine(member) and isinstance(parent, ModuleDocumenter)))
1.34 __init__.py(1284):         return (inspect.isfunction(member) or inspect.isbuiltin(member) or
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(1284):         return (inspect.isfunction(member) or inspect.isbuiltin(member) or
1.34 __init__.py(1285):                 (inspect.isroutine(member) and isinstance(parent, ModuleDocumenter)))
1.34 __init__.py(1284):         return (inspect.isfunction(member) or inspect.isbuiltin(member) or
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(2065):         return inspect.isroutine(member) and not isinstance(parent, ModuleDocumenter)
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(2467):         if inspect.isattributedescriptor(member):
1.34 __init__.py(2469):         elif (not isinstance(parent, ModuleDocumenter) and
1.34 __init__.py(2474):             return False
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(2628):         return inspect.isproperty(member) and isinstance(parent, ClassDocumenter)
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(2673):         return not isinstance(parent, ModuleDocumenter) and inspect.isNewType(member)
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(842):             if not classes:
1.34 __init__.py(846):             classes.sort(key=lambda cls: cls.priority)
1.34 __init__.py(846):             classes.sort(key=lambda cls: cls.priority)
1.34 __init__.py(849):             full_mname = self.modname + '::' + '.'.join(self.objpath + [mname])
1.34 __init__.py(850):             documenter = classes[-1](self.directive, full_mname, self.indent)
1.34 __init__.py(338):         self.directive = directive
1.34 __init__.py(339):         self.config: Config = directive.env.config
1.34 __init__.py(340):         self.env: BuildEnvironment = directive.env
1.34 __init__.py(341):         self.options = directive.genopt
1.34 __init__.py(342):         self.name = name
1.34 __init__.py(343):         self.indent = indent
1.34 __init__.py(346):         self.modname: str = None
1.34 __init__.py(347):         self.module: ModuleType = None
1.34 __init__.py(348):         self.objpath: List[str] = None
1.34 __init__.py(349):         self.fullname: str = None
1.34 __init__.py(352):         self.args: str = None
1.34 __init__.py(353):         self.retann: str = None
1.34 __init__.py(355):         self.object: Any = None
1.34 __init__.py(356):         self.object_name: str = None
1.34 __init__.py(358):         self.parent: Any = None
1.34 __init__.py(360):         self.analyzer: ModuleAnalyzer = None
1.34 __init__.py(851):             memberdocumenters.append((documenter, isattr))
1.34 __init__.py(839):         for (mname, member, isattr) in self.filter_members(members, want_all):
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(365):         return self.env.app.registry.documenters
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(1006):         return False
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(1460):         return isinstance(member, type)
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(1777):         return isinstance(member, type) and issubclass(member, BaseException)
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(1937):         return isinstance(parent, ModuleDocumenter) and isattr
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(2050):         return inspect.isNewType(member) and isattr
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(1284):         return (inspect.isfunction(member) or inspect.isbuiltin(member) or
1.34 __init__.py(1285):                 (inspect.isroutine(member) and isinstance(parent, ModuleDocumenter)))
1.34 __init__.py(1284):         return (inspect.isfunction(member) or inspect.isbuiltin(member) or
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(1284):         return (inspect.isfunction(member) or inspect.isbuiltin(member) or
1.34 __init__.py(1285):                 (inspect.isroutine(member) and isinstance(parent, ModuleDocumenter)))
1.34 __init__.py(1284):         return (inspect.isfunction(member) or inspect.isbuiltin(member) or
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(2065):         return inspect.isroutine(member) and not isinstance(parent, ModuleDocumenter)
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(2467):         if inspect.isattributedescriptor(member):
1.34 __init__.py(2469):         elif (not isinstance(parent, ModuleDocumenter) and
1.34 __init__.py(2474):             return False
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(2628):         return inspect.isproperty(member) and isinstance(parent, ClassDocumenter)
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(841):                        if cls.can_document_member(member, mname, isattr, self)]
1.34 __init__.py(2673):         return not isinstance(parent, ModuleDocumenter) and inspect.isNewType(member)
1.34 __init__.py(840):             classes = [cls for cls in self.documenters.values()
1.34 __init__.py(842):             if not classes:
1.34 __init__.py(844):                 continue
1.34 __init__.py(839):         for (mname, member, isattr) in self.filter_members(members, want_all):
1.34 __init__.py(853):         member_order = self.options.member_order or self.config.autodoc_member_order
1.34 __init__.py(261):         try:
1.34 __init__.py(262):             return self[name.replace('_', '-')]
1.34 __init__.py(263):         except KeyError:
1.34 __init__.py(264):             return None
1.34 __init__.py(854):         memberdocumenters = self.sort_members(memberdocumenters, member_order)
1.34 __init__.py(1105):         if order == 'bysource' and self.__all__:
1.34 __init__.py(1120):             return super().sort_members(documenters, order)
1.34 __init__.py(868):         if order == 'groupwise':
1.34 __init__.py(871):         elif order == 'bysource':
1.34 __init__.py(886):             documenters.sort(key=lambda e: e[0].name)
1.34 __init__.py(886):             documenters.sort(key=lambda e: e[0].name)
1.34 __init__.py(886):             documenters.sort(key=lambda e: e[0].name)
1.34 __init__.py(886):             documenters.sort(key=lambda e: e[0].name)
1.34 __init__.py(886):             documenters.sort(key=lambda e: e[0].name)
1.34 __init__.py(888):         return documenters
1.34 __init__.py(856):         for documenter, isattr in memberdocumenters:
1.34 __init__.py(857):             documenter.generate(
1.34 __init__.py(858):                 all_members=True, real_modname=self.real_modname,
1.34 __init__.py(859):                 check_module=members_check_module and not isattr)
1.34 __init__.py(857):             documenter.generate(
1.34 __init__.py(900):         if not self.parse_name():
1.34 __init__.py(394):         try:
1.34 __init__.py(395):             matched = py_ext_sig_re.match(self.name)
1.34 __init__.py(396):             explicit_modname, path, base, args, retann = matched.groups()
1.34 __init__.py(403):         if explicit_modname is not None:
1.34 __init__.py(404):             modname = explicit_modname[:-2]
1.34 __init__.py(405):             parents = path.rstrip('.').split('.') if path else []
1.34 __init__.py(410):         with mock(self.config.autodoc_mock_imports):
1.34 __init__.py(411):             self.modname, self.objpath = self.resolve_name(modname, parents, path, base)
1.34 __init__.py(1130):         if modname is None:
1.34 __init__.py(1141):         return modname, parents + [base]
1.34 __init__.py(413):         if not self.modname:
1.34 __init__.py(416):         self.args = args
1.34 __init__.py(417):         self.retann = retann
1.34 __init__.py(418):         self.fullname = ((self.modname or '') +
1.34 __init__.py(419):                          ('.' + '.'.join(self.objpath) if self.objpath else ''))
1.34 __init__.py(418):         self.fullname = ((self.modname or '') +
1.34 __init__.py(420):         return True
1.34 __init__.py(910):         if not self.import_object():
1.34 __init__.py(1954):         ret = super().import_object(raiseerror)
1.34 __init__.py(1888):         try:
1.34 __init__.py(1889):             return super().import_object(raiseerror=True)  # type: ignore
1.34 __init__.py(428):         with mock(self.config.autodoc_mock_imports):
1.34 __init__.py(429):             try:
1.34 __init__.py(430):                 ret = import_object(self.modname, self.objpath, self.objtype,
1.34 __init__.py(431):                                     attrgetter=self.get_attr,
1.34 __init__.py(432):                                     warningiserror=self.config.autodoc_warningiserror)
1.34 __init__.py(430):                 ret = import_object(self.modname, self.objpath, self.objtype,
1.34 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.34 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.34 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.34 __init__.py(433):                 self.module, self.parent, self.object_name, self.object = ret
1.34 __init__.py(434):                 if ismock(self.object):
1.34 __init__.py(436):                 return True
1.34 __init__.py(1955):         if self.parent:
1.34 __init__.py(1956):             self.update_annotations(self.parent)
1.34 __init__.py(1941):         annotations = dict(inspect.getannotations(parent))
1.34 __init__.py(1942):         parent.__annotations__ = annotations
1.34 __init__.py(1944):         try:
1.34 __init__.py(1945):             analyzer = ModuleAnalyzer.for_module(self.modname)
1.34 __init__.py(1946):             analyzer.analyze()
1.34 __init__.py(1947):             for (classname, attrname), annotation in analyzer.annotations.items():
1.34 __init__.py(1958):         return ret
1.34 __init__.py(918):         guess_modname = self.get_real_modname()
1.34 __init__.py(1999):         real_modname = self.get_attr(self.parent or self.object, '__module__', None)
1.34 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.34 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.34 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.34 __init__.py(2000):         return real_modname or self.modname
1.34 __init__.py(919):         self.real_modname: str = real_modname or guess_modname
1.34 __init__.py(922):         try:
1.34 __init__.py(923):             self.analyzer = ModuleAnalyzer.for_module(self.real_modname)
1.34 __init__.py(926):             self.analyzer.find_attr_docs()
1.34 __init__.py(935):             self.directive.record_dependencies.add(self.analyzer.srcname)
1.34 __init__.py(937):         if self.real_modname != guess_modname:
1.34 __init__.py(946):         if check_module:
1.34 __init__.py(950):         sourcename = self.get_sourcename()
1.34 __init__.py(585):         if (getattr(self.object, '__module__', None) and
1.34 __init__.py(586):                 getattr(self.object, '__qualname__', None)):
1.34 __init__.py(585):         if (getattr(self.object, '__module__', None) and
1.34 __init__.py(591):             fullname = self.fullname
1.34 __init__.py(593):         if self.analyzer:
1.34 __init__.py(594):             return '%s:docstring of %s' % (self.analyzer.srcname, fullname)
1.34 __init__.py(955):         self.add_line('', sourcename)
1.34 __init__.py(369):         if line.strip():  # not a blank line
1.34 __init__.py(372):             self.directive.result.append('', source, *lineno)
1.34 __init__.py(958):         try:
1.34 __init__.py(959):             sig = self.format_signature()
1.34 __init__.py(500):         if self.args is not None:
1.34 __init__.py(506):             try:
1.34 __init__.py(507):                 retann = None
1.34 __init__.py(508):                 args = self._call_format_args(**kwargs)
1.34 __init__.py(485):         if kwargs:
1.34 __init__.py(493):         return self.format_args()
1.34 __init__.py(471):         return None
1.34 __init__.py(509):                 if args:
1.34 __init__.py(519):         result = self.env.events.emit_firstresult('autodoc-process-signature',
1.34 __init__.py(520):                                                   self.objtype, self.fullname,
1.34 __init__.py(521):                                                   self.object, self.options, args, retann)
1.34 __init__.py(519):         result = self.env.events.emit_firstresult('autodoc-process-signature',
1.34 __init__.py(522):         if result:
1.34 __init__.py(525):         if args is not None:
1.34 __init__.py(528):             return ''
1.34 __init__.py(966):         self.add_directive_header(sig)
1.34 __init__.py(1972):         super().add_directive_header(sig)
1.34 __init__.py(532):         domain = getattr(self, 'domain', 'py')
1.34 __init__.py(533):         directive = getattr(self, 'directivetype', self.objtype)
1.34 __init__.py(534):         name = self.format_name()
1.34 __init__.py(482):         return '.'.join(self.objpath) or self.modname
1.34 __init__.py(535):         sourcename = self.get_sourcename()
1.34 __init__.py(585):         if (getattr(self.object, '__module__', None) and
1.34 __init__.py(586):                 getattr(self.object, '__qualname__', None)):
1.34 __init__.py(585):         if (getattr(self.object, '__module__', None) and
1.34 __init__.py(591):             fullname = self.fullname
1.34 __init__.py(593):         if self.analyzer:
1.34 __init__.py(594):             return '%s:docstring of %s' % (self.analyzer.srcname, fullname)
1.34 __init__.py(538):         prefix = '.. %s:%s:: ' % (domain, directive)
1.34 __init__.py(539):         for i, sig_line in enumerate(sig.split("\n")):
1.35 __init__.py(540):             self.add_line('%s%s%s' % (prefix, name, sig_line),
1.35 __init__.py(541):                           sourcename)
1.35 __init__.py(540):             self.add_line('%s%s%s' % (prefix, name, sig_line),
1.35 __init__.py(369):         if line.strip():  # not a blank line
1.35 __init__.py(370):             self.directive.result.append(self.indent + line, source, *lineno)
1.35 __init__.py(542):             if i == 0:
1.35 __init__.py(543):                 prefix = " " * len(prefix)
1.35 __init__.py(539):         for i, sig_line in enumerate(sig.split("\n")):
1.35 __init__.py(545):         if self.options.noindex:
1.35 __init__.py(261):         try:
1.35 __init__.py(262):             return self[name.replace('_', '-')]
1.35 __init__.py(263):         except KeyError:
1.35 __init__.py(264):             return None
1.35 __init__.py(547):         if self.objpath:
1.35 __init__.py(550):             self.add_line('   :module: %s' % self.modname, sourcename)
1.35 __init__.py(369):         if line.strip():  # not a blank line
1.35 __init__.py(370):             self.directive.result.append(self.indent + line, source, *lineno)
1.35 __init__.py(1973):         sourcename = self.get_sourcename()
1.35 __init__.py(585):         if (getattr(self.object, '__module__', None) and
1.35 __init__.py(586):                 getattr(self.object, '__qualname__', None)):
1.35 __init__.py(585):         if (getattr(self.object, '__module__', None) and
1.35 __init__.py(591):             fullname = self.fullname
1.35 __init__.py(593):         if self.analyzer:
1.35 __init__.py(594):             return '%s:docstring of %s' % (self.analyzer.srcname, fullname)
1.35 __init__.py(1974):         if self.options.annotation is SUPPRESS or self.should_suppress_directive_header():
1.35 __init__.py(261):         try:
1.35 __init__.py(262):             return self[name.replace('_', '-')]
1.35 __init__.py(263):         except KeyError:
1.35 __init__.py(264):             return None
1.35 __init__.py(1809):         return (inspect.isgenericalias(self.object) or
1.35 __init__.py(1809):         return (inspect.isgenericalias(self.object) or
1.35 __init__.py(1975):             pass
1.35 __init__.py(967):         self.add_line('', sourcename)
1.35 __init__.py(369):         if line.strip():  # not a blank line
1.35 __init__.py(372):             self.directive.result.append('', source, *lineno)
1.35 __init__.py(970):         self.indent += self.content_indent
1.35 __init__.py(973):         self.add_content(more_content)
1.35 __init__.py(2026):         self.analyzer = None
1.35 __init__.py(2028):         if not more_content:
1.35 __init__.py(2029):             more_content = StringList()
1.35 __init__.py(2031):         self.update_content(more_content)
1.35 __init__.py(1813):         if inspect.isgenericalias(self.object):
1.35 __init__.py(1814):             more_content.append(_('alias of %s') % restify(self.object), '')
1.35 __init__.py(1815):             more_content.append('', '')
1.35 __init__.py(1817):         super().update_content(more_content)
1.35 __init__.py(1831):         if inspect.isNewType(self.object):
1.35 __init__.py(1836):         super().update_content(more_content)
1.35 __init__.py(1864):         if isinstance(self.object, TypeVar):
1.35 __init__.py(1878):         super().update_content(more_content)
1.35 __init__.py(1799):         pass
1.35 __init__.py(2032):         super().add_content(more_content, no_docstring=no_docstring)
1.35 __init__.py(601):         if no_docstring:
1.35 __init__.py(607):         sourcename = self.get_sourcename()
1.35 __init__.py(585):         if (getattr(self.object, '__module__', None) and
1.35 __init__.py(586):                 getattr(self.object, '__qualname__', None)):
1.35 __init__.py(585):         if (getattr(self.object, '__module__', None) and
1.35 __init__.py(591):             fullname = self.fullname
1.35 __init__.py(593):         if self.analyzer:
1.35 __init__.py(596):             return 'docstring of %s' % fullname
1.35 __init__.py(608):         if self.analyzer:
1.35 __init__.py(622):         if not no_docstring:
1.35 __init__.py(623):             docstrings = self.get_doc()
1.35 __init__.py(2016):         comment = self.get_module_comment(self.objpath[-1])
1.35 __init__.py(2003):         try:
1.35 __init__.py(2004):             analyzer = ModuleAnalyzer.for_module(self.modname)
1.35 __init__.py(2005):             analyzer.analyze()
1.35 __init__.py(2006):             key = ('', attrname)
1.35 __init__.py(2007):             if key in analyzer.attr_docs:
1.35 __init__.py(2008):                 return list(analyzer.attr_docs[key])
1.35 __init__.py(2017):         if comment:
1.35 __init__.py(2018):             return [comment]
1.35 __init__.py(624):             if docstrings is None:
1.35 __init__.py(628):                 if not docstrings:
1.35 __init__.py(633):                 for i, line in enumerate(self.process_doc(docstrings)):
1.35 __init__.py(571):         for docstringlines in docstrings:
1.35 __init__.py(572):             if self.env.app:
1.35 __init__.py(574):                 self.env.app.emit('autodoc-process-docstring',
1.35 __init__.py(575):                                   self.objtype, self.fullname, self.object,
1.35 __init__.py(576):                                   self.options, docstringlines)
1.35 __init__.py(574):                 self.env.app.emit('autodoc-process-docstring',
1.35 __init__.py(578):                 if docstringlines and docstringlines[-1] != '':
1.35 __init__.py(582):             yield from docstringlines
1.35 __init__.py(634):                     self.add_line(line, sourcename, i)
1.35 __init__.py(369):         if line.strip():  # not a blank line
1.35 __init__.py(370):             self.directive.result.append(self.indent + line, source, *lineno)
1.35 __init__.py(633):                 for i, line in enumerate(self.process_doc(docstrings)):
1.35 __init__.py(634):                     self.add_line(line, sourcename, i)
1.35 __init__.py(369):         if line.strip():  # not a blank line
1.35 __init__.py(370):             self.directive.result.append(self.indent + line, source, *lineno)
1.35 __init__.py(633):                 for i, line in enumerate(self.process_doc(docstrings)):
1.35 __init__.py(634):                     self.add_line(line, sourcename, i)
1.35 __init__.py(369):         if line.strip():  # not a blank line
1.35 __init__.py(372):             self.directive.result.append('', source, *lineno)
1.35 __init__.py(633):                 for i, line in enumerate(self.process_doc(docstrings)):
1.35 __init__.py(571):         for docstringlines in docstrings:
1.35 __init__.py(637):         if more_content:
1.35 __init__.py(638):             for line, src in zip(more_content.data, more_content.items):
1.35 __init__.py(639):                 self.add_line(line, src[0], src[1])
1.35 __init__.py(369):         if line.strip():  # not a blank line
1.35 __init__.py(370):             self.directive.result.append(self.indent + line, source, *lineno)
1.35 __init__.py(638):             for line, src in zip(more_content.data, more_content.items):
1.35 __init__.py(639):                 self.add_line(line, src[0], src[1])
1.35 __init__.py(369):         if line.strip():  # not a blank line
1.35 __init__.py(372):             self.directive.result.append('', source, *lineno)
1.35 __init__.py(638):             for line, src in zip(more_content.data, more_content.items):
1.35 __init__.py(976):         self.document_members(all_members)
1.35 __init__.py(1996):         pass
1.35 __init__.py(856):         for documenter, isattr in memberdocumenters:
1.35 __init__.py(857):             documenter.generate(
1.35 __init__.py(858):                 all_members=True, real_modname=self.real_modname,
1.35 __init__.py(859):                 check_module=members_check_module and not isattr)
1.35 __init__.py(857):             documenter.generate(
1.35 __init__.py(900):         if not self.parse_name():
1.35 __init__.py(394):         try:
1.35 __init__.py(395):             matched = py_ext_sig_re.match(self.name)
1.35 __init__.py(396):             explicit_modname, path, base, args, retann = matched.groups()
1.35 __init__.py(403):         if explicit_modname is not None:
1.35 __init__.py(404):             modname = explicit_modname[:-2]
1.35 __init__.py(405):             parents = path.rstrip('.').split('.') if path else []
1.35 __init__.py(410):         with mock(self.config.autodoc_mock_imports):
1.35 __init__.py(411):             self.modname, self.objpath = self.resolve_name(modname, parents, path, base)
1.35 __init__.py(1130):         if modname is None:
1.35 __init__.py(1141):         return modname, parents + [base]
1.35 __init__.py(413):         if not self.modname:
1.35 __init__.py(416):         self.args = args
1.35 __init__.py(417):         self.retann = retann
1.35 __init__.py(418):         self.fullname = ((self.modname or '') +
1.35 __init__.py(419):                          ('.' + '.'.join(self.objpath) if self.objpath else ''))
1.35 __init__.py(418):         self.fullname = ((self.modname or '') +
1.35 __init__.py(420):         return True
1.35 __init__.py(910):         if not self.import_object():
1.35 __init__.py(1954):         ret = super().import_object(raiseerror)
1.35 __init__.py(1888):         try:
1.35 __init__.py(1889):             return super().import_object(raiseerror=True)  # type: ignore
1.35 __init__.py(428):         with mock(self.config.autodoc_mock_imports):
1.35 __init__.py(429):             try:
1.35 __init__.py(430):                 ret = import_object(self.modname, self.objpath, self.objtype,
1.35 __init__.py(431):                                     attrgetter=self.get_attr,
1.35 __init__.py(432):                                     warningiserror=self.config.autodoc_warningiserror)
1.35 __init__.py(430):                 ret = import_object(self.modname, self.objpath, self.objtype,
1.35 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.35 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.35 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.35 __init__.py(433):                 self.module, self.parent, self.object_name, self.object = ret
1.35 __init__.py(434):                 if ismock(self.object):
1.35 __init__.py(436):                 return True
1.35 __init__.py(1955):         if self.parent:
1.35 __init__.py(1956):             self.update_annotations(self.parent)
1.35 __init__.py(1941):         annotations = dict(inspect.getannotations(parent))
1.35 __init__.py(1942):         parent.__annotations__ = annotations
1.35 __init__.py(1944):         try:
1.35 __init__.py(1945):             analyzer = ModuleAnalyzer.for_module(self.modname)
1.35 __init__.py(1946):             analyzer.analyze()
1.35 __init__.py(1947):             for (classname, attrname), annotation in analyzer.annotations.items():
1.35 __init__.py(1958):         return ret
1.35 __init__.py(918):         guess_modname = self.get_real_modname()
1.35 __init__.py(1999):         real_modname = self.get_attr(self.parent or self.object, '__module__', None)
1.35 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.35 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.35 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.35 __init__.py(2000):         return real_modname or self.modname
1.35 __init__.py(919):         self.real_modname: str = real_modname or guess_modname
1.35 __init__.py(922):         try:
1.35 __init__.py(923):             self.analyzer = ModuleAnalyzer.for_module(self.real_modname)
1.35 __init__.py(926):             self.analyzer.find_attr_docs()
1.35 __init__.py(935):             self.directive.record_dependencies.add(self.analyzer.srcname)
1.35 __init__.py(937):         if self.real_modname != guess_modname:
1.35 __init__.py(946):         if check_module:
1.35 __init__.py(950):         sourcename = self.get_sourcename()
1.35 __init__.py(585):         if (getattr(self.object, '__module__', None) and
1.35 __init__.py(586):                 getattr(self.object, '__qualname__', None)):
1.35 __init__.py(585):         if (getattr(self.object, '__module__', None) and
1.35 __init__.py(591):             fullname = self.fullname
1.35 __init__.py(593):         if self.analyzer:
1.35 __init__.py(594):             return '%s:docstring of %s' % (self.analyzer.srcname, fullname)
1.35 __init__.py(955):         self.add_line('', sourcename)
1.35 __init__.py(369):         if line.strip():  # not a blank line
1.35 __init__.py(372):             self.directive.result.append('', source, *lineno)
1.35 __init__.py(958):         try:
1.35 __init__.py(959):             sig = self.format_signature()
1.35 __init__.py(500):         if self.args is not None:
1.35 __init__.py(506):             try:
1.35 __init__.py(507):                 retann = None
1.35 __init__.py(508):                 args = self._call_format_args(**kwargs)
1.35 __init__.py(485):         if kwargs:
1.35 __init__.py(493):         return self.format_args()
1.35 __init__.py(471):         return None
1.35 __init__.py(509):                 if args:
1.35 __init__.py(519):         result = self.env.events.emit_firstresult('autodoc-process-signature',
1.35 __init__.py(520):                                                   self.objtype, self.fullname,
1.35 __init__.py(521):                                                   self.object, self.options, args, retann)
1.35 __init__.py(519):         result = self.env.events.emit_firstresult('autodoc-process-signature',
1.35 __init__.py(522):         if result:
1.35 __init__.py(525):         if args is not None:
1.35 __init__.py(528):             return ''
1.35 __init__.py(966):         self.add_directive_header(sig)
1.35 __init__.py(1972):         super().add_directive_header(sig)
1.35 __init__.py(532):         domain = getattr(self, 'domain', 'py')
1.35 __init__.py(533):         directive = getattr(self, 'directivetype', self.objtype)
1.35 __init__.py(534):         name = self.format_name()
1.35 __init__.py(482):         return '.'.join(self.objpath) or self.modname
1.35 __init__.py(535):         sourcename = self.get_sourcename()
1.35 __init__.py(585):         if (getattr(self.object, '__module__', None) and
1.35 __init__.py(586):                 getattr(self.object, '__qualname__', None)):
1.35 __init__.py(585):         if (getattr(self.object, '__module__', None) and
1.35 __init__.py(591):             fullname = self.fullname
1.35 __init__.py(593):         if self.analyzer:
1.35 __init__.py(594):             return '%s:docstring of %s' % (self.analyzer.srcname, fullname)
1.35 __init__.py(538):         prefix = '.. %s:%s:: ' % (domain, directive)
1.35 __init__.py(539):         for i, sig_line in enumerate(sig.split("\n")):
1.35 __init__.py(540):             self.add_line('%s%s%s' % (prefix, name, sig_line),
1.35 __init__.py(541):                           sourcename)
1.35 __init__.py(540):             self.add_line('%s%s%s' % (prefix, name, sig_line),
1.35 __init__.py(369):         if line.strip():  # not a blank line
1.35 __init__.py(370):             self.directive.result.append(self.indent + line, source, *lineno)
1.35 __init__.py(542):             if i == 0:
1.35 __init__.py(543):                 prefix = " " * len(prefix)
1.35 __init__.py(539):         for i, sig_line in enumerate(sig.split("\n")):
1.35 __init__.py(545):         if self.options.noindex:
1.35 __init__.py(261):         try:
1.35 __init__.py(262):             return self[name.replace('_', '-')]
1.35 __init__.py(263):         except KeyError:
1.35 __init__.py(264):             return None
1.35 __init__.py(547):         if self.objpath:
1.35 __init__.py(550):             self.add_line('   :module: %s' % self.modname, sourcename)
1.35 __init__.py(369):         if line.strip():  # not a blank line
1.35 __init__.py(370):             self.directive.result.append(self.indent + line, source, *lineno)
1.35 __init__.py(1973):         sourcename = self.get_sourcename()
1.35 __init__.py(585):         if (getattr(self.object, '__module__', None) and
1.35 __init__.py(586):                 getattr(self.object, '__qualname__', None)):
1.35 __init__.py(585):         if (getattr(self.object, '__module__', None) and
1.35 __init__.py(591):             fullname = self.fullname
1.35 __init__.py(593):         if self.analyzer:
1.35 __init__.py(594):             return '%s:docstring of %s' % (self.analyzer.srcname, fullname)
1.35 __init__.py(1974):         if self.options.annotation is SUPPRESS or self.should_suppress_directive_header():
1.35 __init__.py(261):         try:
1.35 __init__.py(262):             return self[name.replace('_', '-')]
1.35 __init__.py(263):         except KeyError:
1.35 __init__.py(264):             return None
1.35 __init__.py(1809):         return (inspect.isgenericalias(self.object) or
1.35 __init__.py(1809):         return (inspect.isgenericalias(self.object) or
1.35 __init__.py(1975):             pass
1.35 __init__.py(967):         self.add_line('', sourcename)
1.35 __init__.py(369):         if line.strip():  # not a blank line
1.35 __init__.py(372):             self.directive.result.append('', source, *lineno)
1.35 __init__.py(970):         self.indent += self.content_indent
1.35 __init__.py(973):         self.add_content(more_content)
1.35 __init__.py(2026):         self.analyzer = None
1.35 __init__.py(2028):         if not more_content:
1.35 __init__.py(2029):             more_content = StringList()
1.35 __init__.py(2031):         self.update_content(more_content)
1.35 __init__.py(1813):         if inspect.isgenericalias(self.object):
1.35 __init__.py(1814):             more_content.append(_('alias of %s') % restify(self.object), '')
1.35 __init__.py(1815):             more_content.append('', '')
1.35 __init__.py(1817):         super().update_content(more_content)
1.35 __init__.py(1831):         if inspect.isNewType(self.object):
1.35 __init__.py(1836):         super().update_content(more_content)
1.35 __init__.py(1864):         if isinstance(self.object, TypeVar):
1.35 __init__.py(1878):         super().update_content(more_content)
1.35 __init__.py(1799):         pass
1.35 __init__.py(2032):         super().add_content(more_content, no_docstring=no_docstring)
1.35 __init__.py(601):         if no_docstring:
1.35 __init__.py(607):         sourcename = self.get_sourcename()
1.35 __init__.py(585):         if (getattr(self.object, '__module__', None) and
1.35 __init__.py(586):                 getattr(self.object, '__qualname__', None)):
1.35 __init__.py(585):         if (getattr(self.object, '__module__', None) and
1.35 __init__.py(591):             fullname = self.fullname
1.35 __init__.py(593):         if self.analyzer:
1.35 __init__.py(596):             return 'docstring of %s' % fullname
1.35 __init__.py(608):         if self.analyzer:
1.35 __init__.py(622):         if not no_docstring:
1.35 __init__.py(623):             docstrings = self.get_doc()
1.35 __init__.py(2016):         comment = self.get_module_comment(self.objpath[-1])
1.35 __init__.py(2003):         try:
1.35 __init__.py(2004):             analyzer = ModuleAnalyzer.for_module(self.modname)
1.35 __init__.py(2005):             analyzer.analyze()
1.35 __init__.py(2006):             key = ('', attrname)
1.35 __init__.py(2007):             if key in analyzer.attr_docs:
1.35 __init__.py(2008):                 return list(analyzer.attr_docs[key])
1.35 __init__.py(2017):         if comment:
1.35 __init__.py(2018):             return [comment]
1.35 __init__.py(624):             if docstrings is None:
1.35 __init__.py(628):                 if not docstrings:
1.35 __init__.py(633):                 for i, line in enumerate(self.process_doc(docstrings)):
1.35 __init__.py(571):         for docstringlines in docstrings:
1.35 __init__.py(572):             if self.env.app:
1.35 __init__.py(574):                 self.env.app.emit('autodoc-process-docstring',
1.35 __init__.py(575):                                   self.objtype, self.fullname, self.object,
1.35 __init__.py(576):                                   self.options, docstringlines)
1.35 __init__.py(574):                 self.env.app.emit('autodoc-process-docstring',
1.35 __init__.py(578):                 if docstringlines and docstringlines[-1] != '':
1.35 __init__.py(582):             yield from docstringlines
1.35 __init__.py(634):                     self.add_line(line, sourcename, i)
1.35 __init__.py(369):         if line.strip():  # not a blank line
1.35 __init__.py(370):             self.directive.result.append(self.indent + line, source, *lineno)
1.35 __init__.py(633):                 for i, line in enumerate(self.process_doc(docstrings)):
1.35 __init__.py(634):                     self.add_line(line, sourcename, i)
1.35 __init__.py(369):         if line.strip():  # not a blank line
1.35 __init__.py(372):             self.directive.result.append('', source, *lineno)
1.35 __init__.py(633):                 for i, line in enumerate(self.process_doc(docstrings)):
1.35 __init__.py(634):                     self.add_line(line, sourcename, i)
1.35 __init__.py(369):         if line.strip():  # not a blank line
1.35 __init__.py(370):             self.directive.result.append(self.indent + line, source, *lineno)
1.35 __init__.py(633):                 for i, line in enumerate(self.process_doc(docstrings)):
1.35 __init__.py(634):                     self.add_line(line, sourcename, i)
1.35 __init__.py(369):         if line.strip():  # not a blank line
1.35 __init__.py(372):             self.directive.result.append('', source, *lineno)
1.35 __init__.py(633):                 for i, line in enumerate(self.process_doc(docstrings)):
1.35 __init__.py(634):                     self.add_line(line, sourcename, i)
1.35 __init__.py(369):         if line.strip():  # not a blank line
1.35 __init__.py(370):             self.directive.result.append(self.indent + line, source, *lineno)
1.35 __init__.py(633):                 for i, line in enumerate(self.process_doc(docstrings)):
1.35 __init__.py(634):                     self.add_line(line, sourcename, i)
1.35 __init__.py(369):         if line.strip():  # not a blank line
1.35 __init__.py(370):             self.directive.result.append(self.indent + line, source, *lineno)
1.35 __init__.py(633):                 for i, line in enumerate(self.process_doc(docstrings)):
1.35 __init__.py(634):                     self.add_line(line, sourcename, i)
1.35 __init__.py(369):         if line.strip():  # not a blank line
1.35 __init__.py(370):             self.directive.result.append(self.indent + line, source, *lineno)
1.35 __init__.py(633):                 for i, line in enumerate(self.process_doc(docstrings)):
1.35 __init__.py(634):                     self.add_line(line, sourcename, i)
1.35 __init__.py(369):         if line.strip():  # not a blank line
1.35 __init__.py(370):             self.directive.result.append(self.indent + line, source, *lineno)
1.35 __init__.py(633):                 for i, line in enumerate(self.process_doc(docstrings)):
1.35 __init__.py(634):                     self.add_line(line, sourcename, i)
1.35 __init__.py(369):         if line.strip():  # not a blank line
1.35 __init__.py(370):             self.directive.result.append(self.indent + line, source, *lineno)
1.35 __init__.py(633):                 for i, line in enumerate(self.process_doc(docstrings)):
1.35 __init__.py(634):                     self.add_line(line, sourcename, i)
1.35 __init__.py(369):         if line.strip():  # not a blank line
1.35 __init__.py(372):             self.directive.result.append('', source, *lineno)
1.35 __init__.py(633):                 for i, line in enumerate(self.process_doc(docstrings)):
1.35 __init__.py(634):                     self.add_line(line, sourcename, i)
1.35 __init__.py(369):         if line.strip():  # not a blank line
1.35 __init__.py(370):             self.directive.result.append(self.indent + line, source, *lineno)
1.35 __init__.py(633):                 for i, line in enumerate(self.process_doc(docstrings)):
1.35 __init__.py(634):                     self.add_line(line, sourcename, i)
1.35 __init__.py(369):         if line.strip():  # not a blank line
1.35 __init__.py(370):             self.directive.result.append(self.indent + line, source, *lineno)
1.35 __init__.py(633):                 for i, line in enumerate(self.process_doc(docstrings)):
1.35 __init__.py(634):                     self.add_line(line, sourcename, i)
1.35 __init__.py(369):         if line.strip():  # not a blank line
1.35 __init__.py(370):             self.directive.result.append(self.indent + line, source, *lineno)
1.35 __init__.py(633):                 for i, line in enumerate(self.process_doc(docstrings)):
1.35 __init__.py(634):                     self.add_line(line, sourcename, i)
1.35 __init__.py(369):         if line.strip():  # not a blank line
1.35 __init__.py(370):             self.directive.result.append(self.indent + line, source, *lineno)
1.35 __init__.py(633):                 for i, line in enumerate(self.process_doc(docstrings)):
1.35 __init__.py(634):                     self.add_line(line, sourcename, i)
1.35 __init__.py(369):         if line.strip():  # not a blank line
1.35 __init__.py(372):             self.directive.result.append('', source, *lineno)
1.35 __init__.py(633):                 for i, line in enumerate(self.process_doc(docstrings)):
1.35 __init__.py(634):                     self.add_line(line, sourcename, i)
1.35 __init__.py(369):         if line.strip():  # not a blank line
1.35 __init__.py(370):             self.directive.result.append(self.indent + line, source, *lineno)
1.35 __init__.py(633):                 for i, line in enumerate(self.process_doc(docstrings)):
1.35 __init__.py(634):                     self.add_line(line, sourcename, i)
1.35 __init__.py(369):         if line.strip():  # not a blank line
1.35 __init__.py(370):             self.directive.result.append(self.indent + line, source, *lineno)
1.35 __init__.py(633):                 for i, line in enumerate(self.process_doc(docstrings)):
1.35 __init__.py(634):                     self.add_line(line, sourcename, i)
1.35 __init__.py(369):         if line.strip():  # not a blank line
1.35 __init__.py(370):             self.directive.result.append(self.indent + line, source, *lineno)
1.35 __init__.py(633):                 for i, line in enumerate(self.process_doc(docstrings)):
1.35 __init__.py(634):                     self.add_line(line, sourcename, i)
1.35 __init__.py(369):         if line.strip():  # not a blank line
1.35 __init__.py(372):             self.directive.result.append('', source, *lineno)
1.35 __init__.py(633):                 for i, line in enumerate(self.process_doc(docstrings)):
1.35 __init__.py(571):         for docstringlines in docstrings:
1.35 __init__.py(637):         if more_content:
1.35 __init__.py(638):             for line, src in zip(more_content.data, more_content.items):
1.35 __init__.py(639):                 self.add_line(line, src[0], src[1])
1.35 __init__.py(369):         if line.strip():  # not a blank line
1.35 __init__.py(370):             self.directive.result.append(self.indent + line, source, *lineno)
1.35 __init__.py(638):             for line, src in zip(more_content.data, more_content.items):
1.35 __init__.py(639):                 self.add_line(line, src[0], src[1])
1.35 __init__.py(369):         if line.strip():  # not a blank line
1.35 __init__.py(372):             self.directive.result.append('', source, *lineno)
1.35 __init__.py(638):             for line, src in zip(more_content.data, more_content.items):
1.35 __init__.py(976):         self.document_members(all_members)
1.35 __init__.py(1996):         pass
1.35 __init__.py(856):         for documenter, isattr in memberdocumenters:
1.35 __init__.py(857):             documenter.generate(
1.35 __init__.py(858):                 all_members=True, real_modname=self.real_modname,
1.35 __init__.py(859):                 check_module=members_check_module and not isattr)
1.35 __init__.py(857):             documenter.generate(
1.35 __init__.py(1759):         return super().generate(more_content=more_content,
1.35 __init__.py(1760):                                 check_module=check_module,
1.35 __init__.py(1761):                                 all_members=all_members)
1.35 __init__.py(1759):         return super().generate(more_content=more_content,
1.35 __init__.py(900):         if not self.parse_name():
1.35 __init__.py(394):         try:
1.35 __init__.py(395):             matched = py_ext_sig_re.match(self.name)
1.35 __init__.py(396):             explicit_modname, path, base, args, retann = matched.groups()
1.35 __init__.py(403):         if explicit_modname is not None:
1.35 __init__.py(404):             modname = explicit_modname[:-2]
1.35 __init__.py(405):             parents = path.rstrip('.').split('.') if path else []
1.35 __init__.py(410):         with mock(self.config.autodoc_mock_imports):
1.35 __init__.py(411):             self.modname, self.objpath = self.resolve_name(modname, parents, path, base)
1.35 __init__.py(1130):         if modname is None:
1.35 __init__.py(1141):         return modname, parents + [base]
1.35 __init__.py(413):         if not self.modname:
1.35 __init__.py(416):         self.args = args
1.35 __init__.py(417):         self.retann = retann
1.35 __init__.py(418):         self.fullname = ((self.modname or '') +
1.35 __init__.py(419):                          ('.' + '.'.join(self.objpath) if self.objpath else ''))
1.35 __init__.py(418):         self.fullname = ((self.modname or '') +
1.35 __init__.py(420):         return True
1.35 __init__.py(910):         if not self.import_object():
1.35 __init__.py(1463):         ret = super().import_object(raiseerror)
1.35 __init__.py(428):         with mock(self.config.autodoc_mock_imports):
1.35 __init__.py(429):             try:
1.35 __init__.py(430):                 ret = import_object(self.modname, self.objpath, self.objtype,
1.35 __init__.py(431):                                     attrgetter=self.get_attr,
1.35 __init__.py(432):                                     warningiserror=self.config.autodoc_warningiserror)
1.35 __init__.py(430):                 ret = import_object(self.modname, self.objpath, self.objtype,
1.35 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.35 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.35 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.35 __init__.py(433):                 self.module, self.parent, self.object_name, self.object = ret
1.35 __init__.py(434):                 if ismock(self.object):
1.35 __init__.py(436):                 return True
1.35 __init__.py(1466):         if ret:
1.35 __init__.py(1467):             if hasattr(self.object, '__name__'):
1.35 __init__.py(1468):                 self.doc_as_attr = (self.objpath[-1] != self.object.__name__)
1.35 __init__.py(1471):         return ret
1.35 __init__.py(918):         guess_modname = self.get_real_modname()
1.35 __init__.py(451):         return self.get_attr(self.object, '__module__', None) or self.modname
1.35 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.35 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.35 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.35 __init__.py(919):         self.real_modname: str = real_modname or guess_modname
1.35 __init__.py(922):         try:
1.35 __init__.py(923):             self.analyzer = ModuleAnalyzer.for_module(self.real_modname)
1.35 __init__.py(926):             self.analyzer.find_attr_docs()
1.63 __init__.py(935):             self.directive.record_dependencies.add(self.analyzer.srcname)
1.63 __init__.py(937):         if self.real_modname != guess_modname:
1.63 __init__.py(946):         if check_module:
1.63 __init__.py(947):             if not self.check_module():
1.63 __init__.py(457):         if self.options.imported_members:
1.63 __init__.py(261):         try:
1.63 __init__.py(262):             return self[name.replace('_', '-')]
1.63 __init__.py(263):         except KeyError:
1.63 __init__.py(264):             return None
1.63 __init__.py(460):         subject = inspect.unpartial(self.object)
1.63 __init__.py(461):         modname = self.get_attr(subject, '__module__', None)
1.63 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.63 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.63 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.63 __init__.py(462):         if modname and modname != self.modname:
1.63 __init__.py(463):             return False
1.63 __init__.py(948):                 return
1.63 __init__.py(856):         for documenter, isattr in memberdocumenters:
1.63 __init__.py(857):             documenter.generate(
1.63 __init__.py(858):                 all_members=True, real_modname=self.real_modname,
1.63 __init__.py(859):                 check_module=members_check_module and not isattr)
1.63 __init__.py(857):             documenter.generate(
1.63 __init__.py(900):         if not self.parse_name():
1.63 __init__.py(394):         try:
1.63 __init__.py(395):             matched = py_ext_sig_re.match(self.name)
1.63 __init__.py(396):             explicit_modname, path, base, args, retann = matched.groups()
1.63 __init__.py(403):         if explicit_modname is not None:
1.63 __init__.py(404):             modname = explicit_modname[:-2]
1.63 __init__.py(405):             parents = path.rstrip('.').split('.') if path else []
1.63 __init__.py(410):         with mock(self.config.autodoc_mock_imports):
1.63 __init__.py(411):             self.modname, self.objpath = self.resolve_name(modname, parents, path, base)
1.63 __init__.py(1130):         if modname is None:
1.63 __init__.py(1141):         return modname, parents + [base]
1.63 __init__.py(413):         if not self.modname:
1.63 __init__.py(416):         self.args = args
1.63 __init__.py(417):         self.retann = retann
1.63 __init__.py(418):         self.fullname = ((self.modname or '') +
1.63 __init__.py(419):                          ('.' + '.'.join(self.objpath) if self.objpath else ''))
1.63 __init__.py(418):         self.fullname = ((self.modname or '') +
1.63 __init__.py(420):         return True
1.63 __init__.py(910):         if not self.import_object():
1.63 __init__.py(1954):         ret = super().import_object(raiseerror)
1.63 __init__.py(1888):         try:
1.63 __init__.py(1889):             return super().import_object(raiseerror=True)  # type: ignore
1.63 __init__.py(428):         with mock(self.config.autodoc_mock_imports):
1.63 __init__.py(429):             try:
1.63 __init__.py(430):                 ret = import_object(self.modname, self.objpath, self.objtype,
1.63 __init__.py(431):                                     attrgetter=self.get_attr,
1.63 __init__.py(432):                                     warningiserror=self.config.autodoc_warningiserror)
1.63 __init__.py(430):                 ret = import_object(self.modname, self.objpath, self.objtype,
1.63 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.63 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.63 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.63 __init__.py(433):                 self.module, self.parent, self.object_name, self.object = ret
1.63 __init__.py(434):                 if ismock(self.object):
1.63 __init__.py(436):                 return True
1.63 __init__.py(1955):         if self.parent:
1.63 __init__.py(1956):             self.update_annotations(self.parent)
1.63 __init__.py(1941):         annotations = dict(inspect.getannotations(parent))
1.63 __init__.py(1942):         parent.__annotations__ = annotations
1.63 __init__.py(1944):         try:
1.63 __init__.py(1945):             analyzer = ModuleAnalyzer.for_module(self.modname)
1.63 __init__.py(1946):             analyzer.analyze()
1.63 __init__.py(1947):             for (classname, attrname), annotation in analyzer.annotations.items():
1.63 __init__.py(1958):         return ret
1.63 __init__.py(918):         guess_modname = self.get_real_modname()
1.63 __init__.py(1999):         real_modname = self.get_attr(self.parent or self.object, '__module__', None)
1.63 __init__.py(329):         return autodoc_attrgetter(self.env.app, obj, name, *defargs)
1.63 __init__.py(2684):     for typ, func in app.registry.autodoc_attrgettrs.items():
1.63 __init__.py(2688):     return safe_getattr(obj, name, *defargs)
1.63 __init__.py(2000):         return real_modname or self.modname
1.63 __init__.py(919):         self.real_modname: str = real_modname or guess_modname
1.63 __init__.py(922):         try:
1.63 __init__.py(923):             self.analyzer = ModuleAnalyzer.for_module(self.real_modname)
1.63 __init__.py(926):             self.analyzer.find_attr_docs()
1.63 __init__.py(935):             self.directive.record_dependencies.add(self.analyzer.srcname)
1.63 __init__.py(937):         if self.real_modname != guess_modname:
1.63 __init__.py(946):         if check_module:
1.63 __init__.py(950):         sourcename = self.get_sourcename()
1.63 __init__.py(585):         if (getattr(self.object, '__module__', None) and
1.63 __init__.py(586):                 getattr(self.object, '__qualname__', None)):
1.63 __init__.py(585):         if (getattr(self.object, '__module__', None) and
1.63 __init__.py(591):             fullname = self.fullname
1.63 __init__.py(593):         if self.analyzer:
1.63 __init__.py(594):             return '%s:docstring of %s' % (self.analyzer.srcname, fullname)
1.63 __init__.py(955):         self.add_line('', sourcename)
1.63 __init__.py(369):         if line.strip():  # not a blank line
1.63 __init__.py(372):             self.directive.result.append('', source, *lineno)
1.63 __init__.py(958):         try:
1.63 __init__.py(959):             sig = self.format_signature()
1.63 __init__.py(500):         if self.args is not None:
1.63 __init__.py(506):             try:
1.63 __init__.py(507):                 retann = None
1.63 __init__.py(508):                 args = self._call_format_args(**kwargs)
1.63 __init__.py(485):         if kwargs:
1.63 __init__.py(493):         return self.format_args()
1.63 __init__.py(471):         return None
1.63 __init__.py(509):                 if args:
1.63 __init__.py(519):         result = self.env.events.emit_firstresult('autodoc-process-signature',
1.63 __init__.py(520):                                                   self.objtype, self.fullname,
1.63 __init__.py(521):                                                   self.object, self.options, args, retann)
1.63 __init__.py(519):         result = self.env.events.emit_firstresult('autodoc-process-signature',
1.63 __init__.py(522):         if result:
1.63 __init__.py(525):         if args is not None:
1.63 __init__.py(528):             return ''
1.63 __init__.py(966):         self.add_directive_header(sig)
1.63 __init__.py(1972):         super().add_directive_header(sig)
1.63 __init__.py(532):         domain = getattr(self, 'domain', 'py')
1.63 __init__.py(533):         directive = getattr(self, 'directivetype', self.objtype)
1.63 __init__.py(534):         name = self.format_name()
1.63 __init__.py(482):         return '.'.join(self.objpath) or self.modname
1.63 __init__.py(535):         sourcename = self.get_sourcename()
1.63 __init__.py(585):         if (getattr(self.object, '__module__', None) and
1.63 __init__.py(586):                 getattr(self.object, '__qualname__', None)):
1.63 __init__.py(585):         if (getattr(self.object, '__module__', None) and
1.63 __init__.py(591):             fullname = self.fullname
1.63 __init__.py(593):         if self.analyzer:
1.63 __init__.py(594):             return '%s:docstring of %s' % (self.analyzer.srcname, fullname)
1.63 __init__.py(538):         prefix = '.. %s:%s:: ' % (domain, directive)
1.63 __init__.py(539):         for i, sig_line in enumerate(sig.split("\n")):
1.63 __init__.py(540):             self.add_line('%s%s%s' % (prefix, name, sig_line),
1.63 __init__.py(541):                           sourcename)
1.63 __init__.py(540):             self.add_line('%s%s%s' % (prefix, name, sig_line),
1.63 __init__.py(369):         if line.strip():  # not a blank line
1.63 __init__.py(370):             self.directive.result.append(self.indent + line, source, *lineno)
1.63 __init__.py(542):             if i == 0:
1.63 __init__.py(543):                 prefix = " " * len(prefix)
1.63 __init__.py(539):         for i, sig_line in enumerate(sig.split("\n")):
1.63 __init__.py(545):         if self.options.noindex:
1.63 __init__.py(261):         try:
1.63 __init__.py(262):             return self[name.replace('_', '-')]
1.63 __init__.py(263):         except KeyError:
1.63 __init__.py(264):             return None
1.63 __init__.py(547):         if self.objpath:
1.63 __init__.py(550):             self.add_line('   :module: %s' % self.modname, sourcename)
1.63 __init__.py(369):         if line.strip():  # not a blank line
1.63 __init__.py(370):             self.directive.result.append(self.indent + line, source, *lineno)
1.63 __init__.py(1973):         sourcename = self.get_sourcename()
1.63 __init__.py(585):         if (getattr(self.object, '__module__', None) and
1.63 __init__.py(586):                 getattr(self.object, '__qualname__', None)):
1.63 __init__.py(585):         if (getattr(self.object, '__module__', None) and
1.63 __init__.py(591):             fullname = self.fullname
1.63 __init__.py(593):         if self.analyzer:
1.63 __init__.py(594):             return '%s:docstring of %s' % (self.analyzer.srcname, fullname)
1.63 __init__.py(1974):         if self.options.annotation is SUPPRESS or self.should_suppress_directive_header():
1.63 __init__.py(261):         try:
1.63 __init__.py(262):             return self[name.replace('_', '-')]
1.63 __init__.py(263):         except KeyError:
1.63 __init__.py(264):             return None
1.63 __init__.py(1809):         return (inspect.isgenericalias(self.object) or
1.63 __init__.py(1809):         return (inspect.isgenericalias(self.object) or
1.63 __init__.py(1975):             pass
1.63 __init__.py(967):         self.add_line('', sourcename)
1.63 __init__.py(369):         if line.strip():  # not a blank line
1.63 __init__.py(372):             self.directive.result.append('', source, *lineno)
1.63 __init__.py(970):         self.indent += self.content_indent
1.63 __init__.py(973):         self.add_content(more_content)
1.63 __init__.py(2026):         self.analyzer = None
1.63 __init__.py(2028):         if not more_content:
1.63 __init__.py(2029):             more_content = StringList()
1.63 __init__.py(2031):         self.update_content(more_content)
1.63 __init__.py(1813):         if inspect.isgenericalias(self.object):
1.63 __init__.py(1814):             more_content.append(_('alias of %s') % restify(self.object), '')
1.63 __init__.py(1815):             more_content.append('', '')
1.63 __init__.py(1817):         super().update_content(more_content)
1.63 __init__.py(1831):         if inspect.isNewType(self.object):
1.63 __init__.py(1836):         super().update_content(more_content)
1.63 __init__.py(1864):         if isinstance(self.object, TypeVar):
1.63 __init__.py(1878):         super().update_content(more_content)
1.63 __init__.py(1799):         pass
1.63 __init__.py(2032):         super().add_content(more_content, no_docstring=no_docstring)
1.63 __init__.py(601):         if no_docstring:
1.63 __init__.py(607):         sourcename = self.get_sourcename()
1.63 __init__.py(585):         if (getattr(self.object, '__module__', None) and
1.63 __init__.py(586):                 getattr(self.object, '__qualname__', None)):
1.63 __init__.py(585):         if (getattr(self.object, '__module__', None) and
1.63 __init__.py(591):             fullname = self.fullname
1.63 __init__.py(593):         if self.analyzer:
1.63 __init__.py(596):             return 'docstring of %s' % fullname
1.63 __init__.py(608):         if self.analyzer:
1.63 __init__.py(622):         if not no_docstring:
1.63 __init__.py(623):             docstrings = self.get_doc()
1.63 __init__.py(2016):         comment = self.get_module_comment(self.objpath[-1])
1.63 __init__.py(2003):         try:
1.63 __init__.py(2004):             analyzer = ModuleAnalyzer.for_module(self.modname)
1.63 __init__.py(2005):             analyzer.analyze()
1.63 __init__.py(2006):             key = ('', attrname)
1.63 __init__.py(2007):             if key in analyzer.attr_docs:
1.63 __init__.py(2008):                 return list(analyzer.attr_docs[key])
1.63 __init__.py(2017):         if comment:
1.63 __init__.py(2018):             return [comment]
1.63 __init__.py(624):             if docstrings is None:
1.63 __init__.py(628):                 if not docstrings:
1.63 __init__.py(633):                 for i, line in enumerate(self.process_doc(docstrings)):
1.63 __init__.py(571):         for docstringlines in docstrings:
1.63 __init__.py(572):             if self.env.app:
1.63 __init__.py(574):                 self.env.app.emit('autodoc-process-docstring',
1.63 __init__.py(575):                                   self.objtype, self.fullname, self.object,
1.63 __init__.py(576):                                   self.options, docstringlines)
1.63 __init__.py(574):                 self.env.app.emit('autodoc-process-docstring',
1.63 __init__.py(578):                 if docstringlines and docstringlines[-1] != '':
1.63 __init__.py(582):             yield from docstringlines
1.63 __init__.py(634):                     self.add_line(line, sourcename, i)
1.63 __init__.py(369):         if line.strip():  # not a blank line
1.63 __init__.py(370):             self.directive.result.append(self.indent + line, source, *lineno)
1.63 __init__.py(633):                 for i, line in enumerate(self.process_doc(docstrings)):
1.63 __init__.py(634):                     self.add_line(line, sourcename, i)
1.63 __init__.py(369):         if line.strip():  # not a blank line
1.63 __init__.py(370):             self.directive.result.append(self.indent + line, source, *lineno)
1.63 __init__.py(633):                 for i, line in enumerate(self.process_doc(docstrings)):
1.63 __init__.py(634):                     self.add_line(line, sourcename, i)
1.63 __init__.py(369):         if line.strip():  # not a blank line
1.63 __init__.py(372):             self.directive.result.append('', source, *lineno)
1.63 __init__.py(633):                 for i, line in enumerate(self.process_doc(docstrings)):
1.63 __init__.py(634):                     self.add_line(line, sourcename, i)
1.63 __init__.py(369):         if line.strip():  # not a blank line
1.63 __init__.py(370):             self.directive.result.append(self.indent + line, source, *lineno)
1.63 __init__.py(633):                 for i, line in enumerate(self.process_doc(docstrings)):
1.63 __init__.py(634):                     self.add_line(line, sourcename, i)
1.63 __init__.py(369):         if line.strip():  # not a blank line
1.63 __init__.py(370):             self.directive.result.append(self.indent + line, source, *lineno)
1.63 __init__.py(633):                 for i, line in enumerate(self.process_doc(docstrings)):
1.63 __init__.py(634):                     self.add_line(line, sourcename, i)
1.63 __init__.py(369):         if line.strip():  # not a blank line
1.63 __init__.py(370):             self.directive.result.append(self.indent + line, source, *lineno)
1.63 __init__.py(633):                 for i, line in enumerate(self.process_doc(docstrings)):
1.63 __init__.py(634):                     self.add_line(line, sourcename, i)
1.63 __init__.py(369):         if line.strip():  # not a blank line
1.63 __init__.py(370):             self.directive.result.append(self.indent + line, source, *lineno)
1.63 __init__.py(633):                 for i, line in enumerate(self.process_doc(docstrings)):
1.63 __init__.py(634):                     self.add_line(line, sourcename, i)
1.63 __init__.py(369):         if line.strip():  # not a blank line
1.63 __init__.py(372):             self.directive.result.append('', source, *lineno)
1.63 __init__.py(633):                 for i, line in enumerate(self.process_doc(docstrings)):
1.63 __init__.py(571):         for docstringlines in docstrings:
1.63 __init__.py(637):         if more_content:
1.63 __init__.py(638):             for line, src in zip(more_content.data, more_content.items):
1.63 __init__.py(639):                 self.add_line(line, src[0], src[1])
1.63 __init__.py(369):         if line.strip():  # not a blank line
1.63 __init__.py(370):             self.directive.result.append(self.indent + line, source, *lineno)
1.63 __init__.py(638):             for line, src in zip(more_content.data, more_content.items):
1.63 __init__.py(639):                 self.add_line(line, src[0], src[1])
1.63 __init__.py(369):         if line.strip():  # not a blank line
1.63 __init__.py(372):             self.directive.result.append('', source, *lineno)
1.63 __init__.py(638):             for line, src in zip(more_content.data, more_content.items):
1.63 __init__.py(976):         self.document_members(all_members)
1.63 __init__.py(1996):         pass
1.63 __init__.py(856):         for documenter, isattr in memberdocumenters:
1.63 __init__.py(862):         self.env.temp_data['autodoc:module'] = None
1.63 __init__.py(863):         self.env.temp_data['autodoc:class'] = None
[01mreading sources... [39;49;00m[100%] [35mindex[39;49;00m                                                
[01mlooking for now-outdated files... [39;49;00mnone found
[01mpickling environment... [39;49;00mdone
[01mchecking consistency... [39;49;00mdone
[01mpreparing documents... [39;49;00mdone
[01mwriting output... [39;49;00m[ 50%] [32mfile[39;49;00m                                                  [01mwriting output... [39;49;00m[100%] [32mindex[39;49;00m                                                 
[01mgenerating indices... [39;49;00mgenindex py-modindex done
[01mwriting additional pages... [39;49;00msearch done
[01mcopying static files... [39;49;00mdone
[01mcopying extra files... [39;49;00mdone
[01mdumping search index in English (code: en)... [39;49;00mdone
[01mdumping object inventory... [39;49;00mdone
[01mbuild succeeded.[39;49;00m

The HTML pages are in ../tmp/pytest-of-root/pytest-0/test_type_alias_docstring_bug0/out.
[33m=============================== warnings summary ===============================[0m
sphinx/util/docutils.py:44
  /testbed/sphinx/util/docutils.py:44: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    __version_info__ = tuple(LooseVersion(docutils.__version__).version)

sphinx/highlighting.py:67
  /testbed/sphinx/highlighting.py:67: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    if tuple(LooseVersion(pygmentsversion).version) <= (2, 7, 4):

sphinx/registry.py:24
  /testbed/sphinx/registry.py:24: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html
    from pkg_resources import iter_entry_points

../opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pkg_resources/__init__.py:3147
../opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pkg_resources/__init__.py:3147
../opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pkg_resources/__init__.py:3147
../opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pkg_resources/__init__.py:3147
  /opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pkg_resources/__init__.py:3147: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('sphinxcontrib')`.
  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
    declare_namespace(pkg)

tests/test_coverup_sphinx-doc__sphinx-9229.py::test_type_alias_docstring_bug
tests/test_coverup_sphinx-doc__sphinx-9229.py::test_type_alias_docstring_bug
tests/test_coverup_sphinx-doc__sphinx-9229.py::test_type_alias_docstring_bug
tests/test_coverup_sphinx-doc__sphinx-9229.py::test_type_alias_docstring_bug
tests/test_coverup_sphinx-doc__sphinx-9229.py::test_type_alias_docstring_bug
  /opt/miniconda3/envs/testbed/lib/python3.9/site-packages/alabaster/layout.html:114: DeprecationWarning: 'soft_unicode' has been renamed to 'soft_str'. The old name will be removed in MarkupSafe 2.1.
    _gaq.push(['_setAllowLinker', true]);

tests/test_coverup_sphinx-doc__sphinx-9229.py::test_type_alias_docstring_bug
tests/test_coverup_sphinx-doc__sphinx-9229.py::test_type_alias_docstring_bug
tests/test_coverup_sphinx-doc__sphinx-9229.py::test_type_alias_docstring_bug
tests/test_coverup_sphinx-doc__sphinx-9229.py::test_type_alias_docstring_bug
tests/test_coverup_sphinx-doc__sphinx-9229.py::test_type_alias_docstring_bug
  /opt/miniconda3/envs/testbed/lib/python3.9/site-packages/alabaster/about.html:70: DeprecationWarning: 'soft_unicode' has been renamed to 'soft_str'. The old name will be removed in MarkupSafe 2.1.

tests/test_coverup_sphinx-doc__sphinx-9229.py::test_type_alias_docstring_bug
tests/test_coverup_sphinx-doc__sphinx-9229.py::test_type_alias_docstring_bug
tests/test_coverup_sphinx-doc__sphinx-9229.py::test_type_alias_docstring_bug
tests/test_coverup_sphinx-doc__sphinx-9229.py::test_type_alias_docstring_bug
tests/test_coverup_sphinx-doc__sphinx-9229.py::test_type_alias_docstring_bug
  /opt/miniconda3/envs/testbed/lib/python3.9/site-packages/alabaster/about.html:99: DeprecationWarning: 'soft_unicode' has been renamed to 'soft_str'. The old name will be removed in MarkupSafe 2.1.

tests/test_coverup_sphinx-doc__sphinx-9229.py::test_type_alias_docstring_bug
tests/test_coverup_sphinx-doc__sphinx-9229.py::test_type_alias_docstring_bug
tests/test_coverup_sphinx-doc__sphinx-9229.py::test_type_alias_docstring_bug
tests/test_coverup_sphinx-doc__sphinx-9229.py::test_type_alias_docstring_bug
tests/test_coverup_sphinx-doc__sphinx-9229.py::test_type_alias_docstring_bug
  /opt/miniconda3/envs/testbed/lib/python3.9/site-packages/alabaster/layout.html:215: DeprecationWarning: 'soft_unicode' has been renamed to 'soft_str'. The old name will be removed in MarkupSafe 2.1.

tests/test_coverup_sphinx-doc__sphinx-9229.py::test_type_alias_docstring_bug
tests/test_coverup_sphinx-doc__sphinx-9229.py::test_type_alias_docstring_bug
tests/test_coverup_sphinx-doc__sphinx-9229.py::test_type_alias_docstring_bug
tests/test_coverup_sphinx-doc__sphinx-9229.py::test_type_alias_docstring_bug
tests/test_coverup_sphinx-doc__sphinx-9229.py::test_type_alias_docstring_bug
  /opt/miniconda3/envs/testbed/lib/python3.9/site-packages/alabaster/layout.html:238: DeprecationWarning: 'soft_unicode' has been renamed to 'soft_str'. The old name will be removed in MarkupSafe 2.1.

tests/test_coverup_sphinx-doc__sphinx-9229.py::test_type_alias_docstring_bug
  <template>:33: DeprecationWarning: 'soft_unicode' has been renamed to 'soft_str'. The old name will be removed in MarkupSafe 2.1.

tests/test_coverup_sphinx-doc__sphinx-9229.py::test_type_alias_docstring_bug
  <template>:224: DeprecationWarning: 'soft_unicode' has been renamed to 'soft_str'. The old name will be removed in MarkupSafe 2.1.

tests/test_coverup_sphinx-doc__sphinx-9229.py::test_type_alias_docstring_bug
  <template>:386: DeprecationWarning: 'soft_unicode' has been renamed to 'soft_str'. The old name will be removed in MarkupSafe 2.1.

tests/test_coverup_sphinx-doc__sphinx-9229.py::test_type_alias_docstring_bug
  <template>:401: DeprecationWarning: 'soft_unicode' has been renamed to 'soft_str'. The old name will be removed in MarkupSafe 2.1.

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
============================= slowest 25 durations =============================
1.50s call     tests/test_coverup_sphinx-doc__sphinx-9229.py::test_type_alias_docstring_bug

(2 durations < 0.005s hidden.  Use -vv to show these durations.)
[36m[1m=========================== short test summary info ============================[0m
[31mFAILED[0m tests/test_coverup_sphinx-doc__sphinx-9229.py::[1mtest_type_alias_docstring_bug[0m - AssertionError: Expected docstring for ScaffoldOpts not found.
[31m======================== [31m[1m1 failed[0m, [33m36 warnings[0m[31m in 1.72s[0m[31m ========================[0m
py39: exit 0 (2.60 seconds) /testbed> python -X dev -m pytest -rA --durations 25 tests/test_coverup_sphinx-doc__sphinx-9229.py pid=152
  py39: OK (6.89=setup[4.28]+cmd[2.60] seconds)
  congratulations :) (8.11 seconds)
+ cat coverage.cover
{"/testbed/sphinx/ext/autodoc/__init__.py": {"13": 1, "14": 1, "15": 1, "16": 1, "17": 1, "20": 1, "22": 1, "23": 1, "24": 1, "25": 1, "26": 1, "27": 1, "29": 1, "30": 1, "31": 1, "32": 1, "33": 1, "34": 1, "36": 1, "37": 1, "39": 1, "40": 0, "43": 1, "48": 1, "52": 2, "53": 1, "59": 1, "60": 1, "63": 1, "67": 2, "77": 2, "84": 1, "85": 1, "86": 1, "87": 1, "88": 1, "91": 1, "101": 1, "110": 1, "117": 1, "125": 1, "135": 1, "143": 1, "146": 1, "154": 1, "161": 1, "176": 1, "192": 1, "220": 2, "221": 1, "258": 2, "267": 2, "293": 1, "296": 2, "979": 2, "1123": 2, "1144": 2, "1177": 2, "1255": 2, "1273": 2, "1395": 2, "1416": 1, "1415": 1, "1422": 1, "1421": 1, "1426": 2, "1764": 2, "1780": 2, "1802": 2, "1820": 2, "1839": 2, "1881": 2, "1922": 3, "1923": 1, "2035": 2, "2053": 2, "2257": 2, "2288": 2, "2335": 2, "2388": 2, "2443": 3, "2444": 1, "2445": 1, "2446": 1, "2615": 2, "2658": 2, "2676": 1, "2682": 1, "2691": 1, "2700": 1, "2701": 1, "2702": 1, "2703": 1, "2704": 1, "2705": 1, "2706": 1, "2709": 1, "64": 0, "70": 1, "73": 1, "71": 0, "74": 0, "80": 1, "81": 0, "93": 1, "94": 1, "95": 0, "96": 0, "98": 0, "103": 0, "104": 0, "105": 0, "106": 0, "107": 0, "112": 0, "113": 0, "114": 0, "119": 0, "120": 0, "122": 0, "127": 0, "128": 0, "129": 0, "130": 0, "132": 0, "137": 0, "138": 0, "140": 0, "147": 0, "149": 0, "151": 0, "158": 0, "163": 0, "164": 0, "165": 0, "166": 0, "167": 0, "168": 0, "169": 0, "170": 0, "171": 0, "173": 0, "178": 2, "180": 2, "182": 0, "183": 0, "184": 0, "185": 0, "186": 0, "187": 0, "204": 0, "205": 0, "217": 0, "206": 0, "207": 0, "208": 0, "209": 0, "211": 0, "212": 0, "213": 0, "215": 0, "216": 0, "230": 0, "232": 0, "233": 0, "253": 0, "234": 0, "235": 0, "236": 0, "237": 0, "238": 0, "239": 0, "240": 0, "241": 0, "242": 0, "243": 0, "244": 0, "245": 0, "246": 0, "247": 0, "248": 0, "249": 0, "251": 0, "252": 0, "260": 1, "261": 44, "262": 44, "263": 38, "264": 38, "281": 1, "284": 2, "285": 1, "282": 16, "286": 16, "287": 16, "288": 16, "289": 16, "290": 16, "313": 1, "315": 1, "317": 1, "319": 1, "321": 1, "324": 1, "323": 1, "327": 1, "331": 1, "332": 2, "333": 1, "337": 1, "362": 1, "363": 1, "367": 1, "374": 2, "375": 1, "385": 1, "422": 1, "445": 1, "453": 1, "466": 1, "473": 1, "484": 1, "495": 1, "530": 1, "552": 1, "569": 1, "584": 1, "598": 2, "599": 1, "641": 1, "669": 2, "670": 1, "820": 1, "865": 2, "866": 1, "890": 2, "891": 1, "329": 59, "335": 0, "338": 5, "339": 5, "340": 5, "341": 5, "342": 5, "343": 5, "346": 5, "347": 5, "348": 5, "349": 5, "352": 5, "353": 5, "355": 5, "356": 5, "358": 5, "360": 5, "365": 8, "369": 51, "370": 32, "372": 19, "383": 0, "394": 5, "395": 5, "396": 5, "397": 0, "398": 0, "399": 0, "400": 0, "403": 5, "404": 4, "405": 4, "407": 1, "408": 1, "410": 5, "411": 5, "413": 5, "414": 0, "416": 5, "417": 5, "418": 10, "419": 5, "420": 5, "428": 5, "429": 5, "430": 10, "431": 5, "432": 5, "433": 5, "434": 5, "435": 0, "436": 5, "437": 0, "438": 0, "439": 0, "441": 0, "442": 0, "443": 0, "451": 2, "457": 1, "458": 0, "460": 1, "461": 1, "462": 1, "463": 1, "464": 0, "471": 4, "482": 4, "485": 4, "486": 0, "487": 0, "488": 0, "490": 0, "493": 4, "500": 4, "502": 0, "503": 0, "506": 4, "507": 4, "508": 4, "509": 4, "510": 0, "511": 0, "512": 0, "513": 0, "514": 0, "515": 0, "516": 0, "517": 0, "519": 8, "520": 4, "521": 4, "522": 4, "523": 0, "525": 4, "526": 0, "528": 4, "532": 4, "533": 4, "534": 4, "535": 4, "538": 4, "539": 8, "540": 8, "541": 4, "542": 4, "543": 4, "545": 4, "546": 0, "547": 4, "550": 3, "558": 1, "559": 0, "560": 0, "561": 0, "562": 2, "563": 1, "564": 1, "565": 0, "566": 0, "567": 1, "571": 8, "572": 4, "574": 8, "575": 4, "576": 4, "578": 4, "580": 0, "582": 4, "585": 28, "586": 12, "589": 0, "591": 16, "593": 16, "594": 13, "596": 3, "601": 4, "602": 0, "603": 0, "604": 0, "607": 4, "608": 4, "609": 1, "610": 1, "611": 0, "612": 0, "613": 0, "616": 0, "618": 0, "619": 0, "622": 4, "623": 4, "624": 4, "626": 0, "628": 4, "632": 1, "633": 34, "634": 30, "637": 4, "638": 9, "639": 6, "648": 0, "649": 0, "650": 0, "651": 0, "652": 0, "653": 0, "655": 0, "656": 0, "657": 0, "658": 0, "660": 0, "661": 0, "662": 0, "663": 0, "664": 0, "666": 0, "667": 0, "684": 1, "699": 1, "702": 1, "704": 1, "705": 1, "707": 0, "710": 17, "711": 16, "713": 16, "714": 0, "715": 16, "716": 3, "718": 13, "720": 32, "721": 16, "722": 16, "724": 4, "728": 16, "729": 16, "730": 16, "731": 16, "732": 11, "734": 16, "736": 3, "738": 16, "739": 16, "741": 16, "743": 0, "744": 16, "746": 0, "748": 16, "750": 16, "751": 16, "753": 0, "754": 16, "756": 0, "757": 16, "759": 8, "760": 0, "761": 0, "762": 0, "763": 0, "765": 0, "767": 8, "768": 8, "769": 3, "770": 0, "771": 0, "773": 0, "776": 3, "777": 5, "778": 0, "779": 0, "780": 0, "781": 0, "782": 0, "784": 0, "786": 0, "788": 10, "789": 5, "790": 0, "793": 5, "795": 16, "797": 0, "801": 16, "803": 16, "804": 32, "805": 16, "806": 16, "807": 16, "808": 0, "809": 0, "810": 0, "812": 0, "813": 0, "815": 16, "816": 8, "818": 1, "685": 5, "686": 0, "687": 0, "689": 0, "690": 0, "691": 0, "692": 0, "693": 0, "694": 0, "695": 0, "697": 5, "827": 1, "828": 1, "829": 0, "831": 3, "832": 1, "833": 1, "835": 1, "838": 1, "839": 9, "840": 108, "842": 8, "844": 4, "846": 8, "849": 4, "850": 4, "851": 4, "853": 1, "854": 1, "856": 5, "857": 8, "858": 4, "859": 4, "862": 1, "863": 1, "841": 88, "868": 1, "870": 0, "871": 1, "872": 0, "874": 0, "876": 0, "879": 0, "884": 0, "886": 5, "888": 1, "877": 0, "878": 0, "900": 5, "902": 0, "903": 0, "906": 0, "907": 0, "910": 5, "911": 0, "918": 5, "919": 5, "922": 5, "923": 5, "926": 5, "927": 0, "928": 0, "930": 0, "932": 0, "933": 0, "935": 5, "937": 5, "939": 0, "940": 0, "941": 0, "942": 0, "943": 0, "946": 5, "947": 1, "948": 1, "950": 4, "955": 4, "958": 4, "959": 4, "960": 0, "961": 0, "962": 0, "963": 0, "966": 4, "967": 4, "970": 4, "973": 4, "976": 4, "983": 1, "984": 1, "985": 1, "988": 1, "989": 1, "990": 1, "991": 1, "992": 1, "993": 1, "994": 1, "987": 1, "997": 1, "1002": 1, "1003": 2, "1004": 1, "1008": 2, "1009": 1, "1015": 1, "1023": 1, "1037": 1, "1050": 1, "1077": 1, "1103": 2, "1104": 1, "998": 1, "999": 1, "1000": 1, "1006": 8, "1010": 1, "1011": 0, "1012": 0, "1013": 1, "1016": 1, "1017": 1, "1018": 0, "1019": 0, "1020": 0, "1021": 1, "1024": 1, "1026": 1, "1027": 1, "1028": 1, "1029": 0, "1031": 0, "1033": 0, "1035": 1, "1038": 1, "1040": 1, "1043": 1, "1044": 0, "1045": 1, "1046": 0, "1047": 1, "1048": 0, "1052": 1, "1053": 1, "1055": 0, "1057": 1, "1058": 17, "1059": 16, "1060": 16, "1061": 16, "1062": 0, "1063": 16, "1064": 16, "1065": 0, "1066": 0, "1069": 1, "1070": 0, "1071": 0, "1072": 0, "1073": 0, "1075": 1, "1078": 1, "1079": 1, "1080": 1, "1083": 1, "1085": 0, "1086": 0, "1087": 0, "1089": 0, "1091": 0, "1092": 0, "1093": 0, "1094": 0, "1095": 0, "1097": 0, "1099": 0, "1100": 0, "1101": 0, "1105": 1, "1107": 0, "1110": 0, "1116": 0, "1118": 0, "1120": 1, "1111": 0, "1112": 0, "1113": 0, "1115": 0, "1128": 2, "1129": 1, "1130": 4, "1131": 0, "1132": 0, "1136": 0, "1138": 0, "1139": 0, "1141": 4, "1149": 2, "1150": 1, "1151": 0, "1152": 0, "1153": 0, "1155": 0, "1159": 0, "1161": 0, "1162": 0, "1164": 0, "1165": 0, "1166": 0, "1167": 0, "1169": 0, "1170": 0, "1171": 0, "1172": 0, "1174": 0, "1182": 1, "1183": 1, "1185": 1, "1236": 1, "1241": 1, "1187": 0, "1188": 0, "1189": 0, "1190": 0, "1191": 0, "1193": 0, "1194": 0, "1195": 0, "1196": 0, "1197": 0, "1198": 0, "1199": 0, "1200": 0, "1201": 0, "1203": 0, "1205": 0, "1206": 0, "1209": 0, "1210": 0, "1211": 0, "1212": 0, "1215": 0, "1216": 0, "1219": 0, "1220": 0, "1221": 0, "1223": 0, "1225": 0, "1228": 0, "1230": 0, "1232": 0, "1234": 0, "1237": 0, "1238": 0, "1239": 0, "1242": 0, "1245": 0, "1246": 0, "1247": 0, "1248": 0, "1249": 0, "1250": 0, "1252": 0, "1260": 1, "1261": 0, "1264": 0, "1265": 0, "1269": 0, "1270": 0, "1277": 1, "1278": 1, "1280": 1, "1281": 2, "1282": 1, "1287": 1, "1307": 1, "1310": 1, "1317": 1, "1355": 1, "1365": 1, "1284": 32, "1285": 16, "1288": 0, "1289": 0, "1291": 0, "1292": 0, "1293": 0, "1294": 0, "1295": 0, "1296": 0, "1297": 0, "1298": 0, "1299": 0, "1300": 0, "1302": 0, "1304": 0, "1305": 0, "1308": 0, "1311": 0, "1312": 0, "1314": 0, "1315": 0, "1318": 0, "1319": 0, "1320": 0, "1321": 0, "1323": 0, "1325": 0, "1326": 0, "1327": 0, "1329": 0, "1331": 0, "1332": 0, "1333": 0, "1335": 0, "1336": 0, "1337": 0, "1338": 0, "1339": 0, "1340": 0, "1341": 0, "1342": 0, "1343": 0, "1344": 0, "1345": 0, "1346": 0, "1347": 0, "1348": 0, "1350": 0, "1351": 0, "1353": 0, "1357": 0, "1358": 0, "1359": 0, "1360": 0, "1361": 0, "1363": 0, "1367": 0, "1368": 0, "1369": 0, "1370": 0, "1371": 0, "1372": 0, "1373": 0, "1374": 0, "1376": 0, "1377": 0, "1379": 0, "1382": 0, "1383": 0, "1384": 0, "1385": 0, "1386": 0, "1387": 0, "1388": 0, "1390": 0, "1392": 0, "1380": 0, "1399": 1, "1402": 1, "1404": 1, "1405": 0, "1406": 0, "1407": 0, "1409": 0, "1430": 1, "1431": 1, "1433": 1, "1434": 1, "1435": 1, "1436": 1, "1437": 1, "1438": 1, "1432": 1, "1441": 1, "1442": 1, "1444": 1, "1457": 1, "1458": 2, "1459": 1, "1462": 1, "1473": 1, "1551": 1, "1568": 1, "1597": 1, "1614": 1, "1628": 1, "1657": 1, "1676": 1, "1728": 1, "1737": 2, "1738": 1, "1747": 1, "1752": 2, "1753": 1, "1445": 1, "1447": 1, "1449": 0, "1450": 0, "1452": 0, "1453": 0, "1455": 1, "1460": 8, "1463": 1, "1466": 1, "1467": 1, "1468": 1, "1470": 0, "1471": 1, "1474": 0, "1487": 0, "1488": 0, "1489": 0, "1493": 0, "1495": 0, "1496": 0, "1497": 0, "1499": 0, "1500": 0, "1501": 0, "1502": 0, "1503": 0, "1504": 0, "1505": 0, "1506": 0, "1509": 0, "1511": 0, "1512": 0, "1513": 0, "1515": 0, "1516": 0, "1517": 0, "1518": 0, "1519": 0, "1520": 0, "1521": 0, "1522": 0, "1525": 0, "1526": 0, "1527": 0, "1528": 0, "1529": 0, "1530": 0, "1531": 0, "1532": 0, "1533": 0, "1539": 0, "1540": 0, "1541": 0, "1542": 0, "1543": 0, "1544": 0, "1545": 0, "1549": 0, "1476": 0, "1477": 0, "1478": 0, "1479": 0, "1480": 0, "1481": 0, "1552": 0, "1553": 0, "1555": 0, "1556": 0, "1557": 0, "1559": 0, "1560": 0, "1561": 0, "1563": 0, "1564": 0, "1566": 0, "1569": 0, "1570": 0, "1571": 0, "1573": 0, "1575": 0, "1576": 0, "1578": 0, "1579": 0, "1581": 0, "1582": 0, "1583": 0, "1584": 0, "1585": 0, "1587": 0, "1588": 0, "1589": 0, "1590": 0, "1591": 0, "1593": 0, "1595": 0, "1598": 0, "1599": 0, "1600": 0, "1601": 0, "1602": 0, "1603": 0, "1604": 0, "1605": 0, "1606": 0, "1608": 0, "1609": 0, "1610": 0, "1612": 0, "1615": 0, "1616": 0, "1617": 0, "1618": 0, "1619": 0, "1621": 0, "1623": 0, "1624": 0, "1626": 0, "1629": 0, "1631": 0, "1632": 0, "1633": 0, "1635": 0, "1636": 0, "1638": 0, "1639": 0, "1640": 0, "1643": 0, "1644": 0, "1645": 0, "1647": 0, "1650": 0, "1651": 0, "1652": 0, "1654": 0, "1655": 0, "1658": 0, "1659": 0, "1660": 0, "1661": 0, "1663": 0, "1664": 0, "1665": 0, "1666": 0, "1668": 0, "1669": 0, "1670": 0, "1671": 0, "1672": 0, "1674": 0, "1677": 0, "1679": 0, "1680": 0, "1681": 0, "1683": 0, "1685": 0, "1686": 0, "1687": 0, "1689": 0, "1691": 0, "1692": 0, "1693": 0, "1694": 0, "1698": 0, "1699": 0, "1700": 0, "1701": 0, "1702": 0, "1704": 0, "1705": 0, "1706": 0, "1707": 0, "1708": 0, "1710": 0, "1711": 0, "1712": 0, "1713": 0, "1715": 0, "1716": 0, "1717": 0, "1718": 0, "1719": 0, "1720": 0, "1721": 0, "1723": 0, "1725": 0, "1726": 0, "1729": 0, "1730": 0, "1731": 0, "1732": 0, "1733": 0, "1734": 0, "1735": 0, "1739": 0, "1740": 0, "1741": 0, "1742": 0, "1743": 0, "1745": 0, "1748": 0, "1749": 0, "1750": 0, "1759": 2, "1760": 1, "1761": 1, "1768": 1, "1769": 1, "1772": 1, "1774": 1, "1775": 2, "1776": 1, "1777": 8, "1782": 1, "1783": 1, "1784": 1, "1785": 1, "1786": 1, "1787": 1, "1789": 1, "1793": 1, "1797": 1, "1791": 0, "1795": 0, "1799": 3, "1808": 1, "1812": 1, "1809": 6, "1810": 0, "1813": 3, "1814": 3, "1815": 3, "1817": 3, "1826": 1, "1830": 1, "1827": 0, "1828": 0, "1831": 3, "1832": 0, "1833": 0, "1834": 0, "1836": 3, "1845": 1, "1849": 1, "1863": 1, "1846": 0, "1847": 0, "1850": 0, "1851": 0, "1852": 0, "1853": 0, "1855": 0, "1856": 0, "1857": 0, "1859": 0, "1861": 0, "1864": 3, "1865": 0, "1866": 0, "1867": 0, "1868": 0, "1869": 0, "1870": 0, "1871": 0, "1872": 0, "1873": 0, "1875": 0, "1876": 0, "1878": 3, "1887": 1, "1911": 1, "1915": 1, "1888": 3, "1889": 3, "1890": 0, "1892": 0, "1893": 0, "1894": 0, "1895": 0, "1896": 0, "1897": 0, "1898": 0, "1899": 0, "1900": 0, "1901": 0, "1902": 0, "1904": 0, "1905": 0, "1907": 0, "1908": 0, "1909": 0, "1912": 0, "1913": 0, "1916": 0, "1917": 0, "1919": 0, "1927": 1, "1928": 1, "1929": 1, "1930": 1, "1931": 1, "1932": 1, "1934": 1, "1935": 2, "1936": 1, "1939": 1, "1953": 1, "1960": 1, "1971": 1, "1995": 1, "1998": 1, "2002": 1, "2014": 1, "2022": 2, "2023": 1, "1937": 8, "1941": 3, "1942": 3, "1944": 3, "1945": 3, "1946": 3, "1947": 3, "1948": 0, "1949": 0, "1950": 0, "1951": 0, "1954": 3, "1955": 3, "1956": 3, "1958": 3, "1961": 0, "1962": 0, "1964": 0, "1965": 0, "1966": 0, "1967": 0, "1969": 0, "1972": 3, "1973": 3, "1974": 3, "1975": 3, "1976": 0, "1977": 0, "1978": 0, "1981": 0, "1982": 0, "1983": 0, "1984": 0, "1986": 0, "1987": 0, "1988": 0, "1990": 0, "1991": 0, "1992": 0, "1993": 0, "1996": 3, "1999": 3, "2000": 3, "2003": 3, "2004": 3, "2005": 3, "2006": 3, "2007": 3, "2008": 3, "2009": 0, "2010": 0, "2012": 0, "2016": 3, "2017": 3, "2018": 3, "2020": 0, "2026": 3, "2028": 3, "2029": 3, "2031": 3, "2032": 3, "2043": 1, "2044": 1, "2045": 1, "2047": 1, "2048": 2, "2049": 1, "2050": 8, "2057": 1, "2058": 1, "2059": 1, "2060": 1, "2062": 1, "2063": 2, "2064": 1, "2067": 1, "2084": 1, "2117": 1, "2133": 1, "2136": 1, "2185": 1, "2195": 1, "2224": 1, "2065": 8, "2068": 0, "2069": 0, "2070": 0, "2073": 0, "2074": 0, "2075": 0, "2077": 0, "2078": 0, "2080": 0, "2082": 0, "2085": 0, "2086": 0, "2088": 0, "2089": 0, "2094": 0, "2096": 0, "2097": 0, "2098": 0, "2099": 0, "2101": 0, "2102": 0, "2103": 0, "2104": 0, "2105": 0, "2106": 0, "2107": 0, "2108": 0, "2109": 0, "2110": 0, "2112": 0, "2114": 0, "2115": 0, "2118": 0, "2120": 0, "2121": 0, "2122": 0, "2123": 0, "2124": 0, "2125": 0, "2126": 0, "2127": 0, "2128": 0, "2129": 0, "2130": 0, "2131": 0, "2134": 0, "2137": 0, "2138": 0, "2139": 0, "2140": 0, "2142": 0, "2144": 0, "2145": 0, "2146": 0, "2148": 0, "2149": 0, "2151": 0, "2152": 0, "2153": 0, "2155": 0, "2156": 0, "2157": 0, "2158": 0, "2159": 0, "2160": 0, "2161": 0, "2162": 0, "2163": 0, "2164": 0, "2165": 0, "2167": 0, "2168": 0, "2170": 0, "2171": 0, "2172": 0, "2173": 0, "2174": 0, "2176": 0, "2177": 0, "2178": 0, "2179": 0, "2180": 0, "2181": 0, "2183": 0, "2187": 0, "2188": 0, "2189": 0, "2190": 0, "2191": 0, "2193": 0, "2197": 0, "2198": 0, "2199": 0, "2200": 0, "2201": 0, "2202": 0, "2203": 0, "2204": 0, "2206": 0, "2207": 0, "2209": 0, "2212": 0, "2213": 0, "2214": 0, "2215": 0, "2216": 0, "2217": 0, "2218": 0, "2220": 0, "2222": 0, "2210": 0, "2225": 0, "2226": 0, "2227": 0, "2228": 0, "2229": 0, "2230": 0, "2231": 0, "2232": 0, "2233": 0, "2234": 0, "2235": 0, "2237": 0, "2238": 0, "2239": 0, "2240": 0, "2241": 0, "2242": 0, "2243": 0, "2244": 0, "2245": 0, "2246": 0, "2247": 0, "2248": 0, "2249": 0, "2250": 0, "2252": 0, "2254": 0, "2266": 1, "2275": 1, "2279": 1, "2267": 0, "2268": 0, "2269": 0, "2271": 0, "2273": 0, "2276": 0, "2277": 0, "2280": 0, "2283": 0, "2285": 0, "2293": 1, "2304": 1, "2311": 1, "2318": 1, "2295": 0, "2296": 0, "2297": 0, "2298": 0, "2300": 0, "2301": 0, "2302": 0, "2305": 0, "2306": 0, "2307": 0, "2309": 0, "2312": 0, "2313": 0, "2314": 0, "2316": 0, "2319": 0, "2320": 0, "2321": 0, "2322": 0, "2323": 0, "2324": 0, "2326": 0, "2327": 0, "2328": 0, "2329": 0, "2330": 0, "2332": 0, "2347": 1, "2349": 1, "2357": 1, "2383": 1, "2352": 0, "2353": 0, "2355": 0, "2360": 0, "2361": 0, "2362": 0, "2363": 0, "2364": 0, "2365": 0, "2366": 0, "2367": 0, "2368": 0, "2369": 0, "2370": 0, "2371": 0, "2372": 0, "2373": 0, "2374": 0, "2376": 0, "2377": 0, "2379": 0, "2380": 0, "2381": 0, "2384": 0, "2385": 0, "2399": 1, "2407": 1, "2432": 1, "2436": 1, "2401": 0, "2402": 0, "2403": 0, "2405": 0, "2410": 0, "2411": 0, "2412": 0, "2413": 0, "2414": 0, "2415": 0, "2416": 0, "2417": 0, "2418": 0, "2419": 0, "2420": 0, "2421": 0, "2422": 0, "2423": 0, "2425": 0, "2426": 0, "2428": 0, "2429": 0, "2430": 0, "2433": 0, "2434": 0, "2437": 0, "2438": 0, "2440": 0, "2450": 1, "2451": 1, "2452": 1, "2453": 1, "2454": 1, "2458": 1, "2460": 1, "2461": 1, "2464": 1, "2465": 2, "2466": 1, "2476": 1, "2479": 1, "2500": 1, "2522": 1, "2531": 1, "2535": 1, "2547": 1, "2570": 1, "2587": 1, "2603": 2, "2604": 1, "2462": 0, "2467": 8, "2468": 0, "2469": 8, "2470": 0, "2471": 0, "2472": 0, "2474": 8, "2477": 0, "2481": 0, "2482": 0, "2484": 0, "2485": 0, "2486": 0, "2487": 0, "2488": 0, "2489": 0, "2490": 0, "2491": 0, "2492": 0, "2493": 0, "2494": 0, "2495": 0, "2496": 0, "2498": 0, "2502": 0, "2503": 0, "2504": 0, "2506": 0, "2507": 0, "2508": 0, "2509": 0, "2511": 0, "2512": 0, "2513": 0, "2514": 0, "2515": 0, "2516": 0, "2517": 0, "2518": 0, "2520": 0, "2523": 0, "2524": 0, "2525": 0, "2526": 0, "2527": 0, "2529": 0, "2532": 0, "2533": 0, "2536": 0, "2537": 0, "2539": 0, "2540": 0, "2541": 0, "2542": 0, "2543": 0, "2545": 0, "2548": 0, "2549": 0, "2550": 0, "2551": 0, "2552": 0, "2553": 0, "2556": 0, "2557": 0, "2558": 0, "2559": 0, "2561": 0, "2562": 0, "2563": 0, "2565": 0, "2566": 0, "2567": 0, "2568": 0, "2571": 0, "2572": 0, "2573": 0, "2574": 0, "2576": 0, "2577": 0, "2578": 0, "2579": 0, "2580": 0, "2581": 0, "2582": 0, "2583": 0, "2585": 0, "2589": 0, "2590": 0, "2591": 0, "2593": 0, "2597": 0, "2598": 0, "2599": 0, "2601": 0, "2607": 0, "2609": 0, "2610": 0, "2611": 0, "2612": 0, "2619": 1, "2620": 1, "2623": 1, "2625": 1, "2626": 2, "2627": 1, "2630": 1, "2633": 1, "2637": 1, "2628": 8, "2631": 0, "2634": 0, "2635": 0, "2638": 0, "2639": 0, "2640": 0, "2641": 0, "2643": 0, "2644": 0, "2645": 0, "2646": 0, "2647": 0, "2648": 0, "2649": 0, "2650": 0, "2651": 0, "2652": 0, "2653": 0, "2654": 0, "2655": 0, "2666": 1, "2667": 1, "2668": 1, "2670": 1, "2671": 2, "2672": 1, "2673": 8, "2678": 0, "2679": 0, "2684": 59, "2685": 0, "2686": 0, "2688": 59, "2692": 1, "2694": 0, "2696": 0, "2710": 1, "2711": 1, "2712": 1, "2713": 1, "2714": 1, "2715": 1, "2716": 1, "2717": 1, "2718": 1, "2719": 1, "2720": 1, "2722": 1, "2723": 2, "2724": 1, "2725": 1, "2726": 1, "2727": 1, "2728": 1, "2729": 2, "2730": 1, "2731": 2, "2732": 1, "2733": 1, "2734": 1, "2735": 1, "2736": 1, "2737": 1, "2738": 1, "2739": 1, "2741": 1, "2743": 1, "2744": 1, "2745": 1, "2747": 1}}
+ git checkout 876fa81e0a038cda466925b85ccf6c5452e0f685
Note: switching to '876fa81e0a038cda466925b85ccf6c5452e0f685'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 876fa81e0 Merge pull request #9235 from sphinx-doc/bot/pull-translations
M	setup.py
M	sphinx/ext/autodoc/__init__.py
M	tox.ini
+ git apply /root/pre_state.patch
error: unrecognized input
