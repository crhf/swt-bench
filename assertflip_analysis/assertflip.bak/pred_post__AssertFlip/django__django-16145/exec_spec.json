{"instance_id": "django__django-16145", "repo": "django/django", "version": "4.2", "environment_setup_commit": "0fbdb9784da915fce5dcc1fe82bac9b4785749e5", "patch_list": ["diff --git a/django/core/management/commands/runserver.py b/django/core/management/commands/runserver.py\n--- a/django/core/management/commands/runserver.py\n+++ b/django/core/management/commands/runserver.py\n@@ -129,6 +129,13 @@ def inner_run(self, *args, **options):\n         shutdown_message = options.get(\"shutdown_message\", \"\")\n         quit_command = \"CTRL-BREAK\" if sys.platform == \"win32\" else \"CONTROL-C\"\n \n+        if self._raw_ipv6:\n+            addr = f\"[{self.addr}]\"\n+        elif self.addr == \"0\":\n+            addr = \"0.0.0.0\"\n+        else:\n+            addr = self.addr\n+\n         if not options[\"skip_checks\"]:\n             self.stdout.write(\"Performing system checks...\\n\\n\")\n             self.check(display_num_errors=True)\n@@ -147,7 +154,7 @@ def inner_run(self, *args, **options):\n                 \"version\": self.get_version(),\n                 \"settings\": settings.SETTINGS_MODULE,\n                 \"protocol\": self.protocol,\n-                \"addr\": \"[%s]\" % self.addr if self._raw_ipv6 else self.addr,\n+                \"addr\": addr,\n                 \"port\": self.port,\n                 \"quit_command\": quit_command,\n             }\n", "diff --git a/dev/null b/tests/test_coverup_django__django-16145.py\nnew file mode 100644\nindex e69de29..11abd1d 100644\n--- /dev/null\n+++ b/tests/test_coverup_django__django-16145.py\n@@ -0,0 +1,19 @@\n+from django.test import TestCase\n+from django.core.management import call_command\n+from io import StringIO\n+from unittest.mock import patch\n+\n+class RunserverShorthandIPTest(TestCase):\n+    def test_runserver_shorthand_ip_output(self):\n+        \"\"\"\n+        Test that running 'runserver 0:8000' outputs \"Starting development server at http://0.0.0.0:8000/\"\n+        as expected.\n+        \"\"\"\n+        out = StringIO()\n+        with patch('sys.stdout', new=out):\n+            # Mock the run function to prevent actual server start\n+            with patch('django.core.servers.basehttp.run', return_value=None):\n+                call_command('runserver', '0:8000', use_reloader=False)\n+        \n+        output = out.getvalue()\n+        self.assertIn(\"Starting development server at http://0.0.0.0:8000/\", output)\n"], "arch": "x86_64", "base_commit": "93d4c9ea1de24eb391cb2b3561b6703fd46374df", "test_directives": ["test_coverup_django__django-16145"], "coverage_files": ["django/core/management/commands/runserver.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_post__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.9", "packages": "requirements.txt", "install": "python -m pip install -e ."}, "cache_level": "instance", "test_command": "python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/core/management/commands/runserver\\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-16145", "req_install_commands": ["conda create -n testbed python=3.9 -y", "cat <<'EOF_59812759871' > $HOME/requirements.txt\naiosmtpd\nasgiref >= 3.6.0\nargon2-cffi >= 19.2.0\nbackports.zoneinfo; python_version < '3.9'\nbcrypt\nblack\ndocutils\ngeoip2; python_version < '3.12'\njinja2 >= 2.11.0\nnumpy; python_version < '3.12'\nPillow >= 6.2.1; sys.platform != 'win32' or python_version < '3.12'\npylibmc; sys.platform != 'win32'\npymemcache >= 3.4.0\npytz\npywatchman; sys.platform != 'win32'\nPyYAML\nredis >= 3.4.0\nselenium\nsqlparse >= 0.3.1\ntblib >= 1.5.0\ntzdata\ncolorama; sys.platform == 'win32'\n\nEOF_59812759871", "conda activate testbed && python -m pip install -r $HOME/requirements.txt", "rm $HOME/requirements.txt"]}