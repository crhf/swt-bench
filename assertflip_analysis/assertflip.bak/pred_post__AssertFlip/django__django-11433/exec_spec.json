{"instance_id": "django__django-11433", "repo": "django/django", "version": "3.0", "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27", "patch_list": ["diff --git a/django/forms/models.py b/django/forms/models.py\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -48,8 +48,11 @@ def construct_instance(form, instance, fields=None, exclude=None):\n             continue\n         # Leave defaults for fields that aren't in POST data, except for\n         # checkbox inputs because they don't appear in POST data if not checked.\n-        if (f.has_default() and\n-                form[f.name].field.widget.value_omitted_from_data(form.data, form.files, form.add_prefix(f.name))):\n+        if (\n+            f.has_default() and\n+            form[f.name].field.widget.value_omitted_from_data(form.data, form.files, form.add_prefix(f.name)) and\n+            cleaned_data.get(f.name) in form[f.name].field.empty_values\n+        ):\n             continue\n         # Defer saving file-type fields until after the other fields, so a\n         # callable upload_to can use the values from other fields.\n", "diff --git a/dev/null b/tests/test_coverup_django__django-11433.py\nnew file mode 100644\nindex e69de29..fa3fa30 100644\n--- /dev/null\n+++ b/tests/test_coverup_django__django-11433.py\n@@ -0,0 +1,33 @@\n+from django.test import TestCase\n+from django.forms import ModelForm\n+from django.db import models\n+from django.forms.models import construct_instance\n+\n+# Step 1: Create a model with a field that has a default value\n+class TestModel(models.Model):\n+    name = models.CharField(max_length=100, default='default_name')\n+\n+    class Meta:\n+        app_label = 'test_app'\n+\n+# Step 2: Create a form for this model, including the field with the default value\n+class TestModelForm(ModelForm):\n+    class Meta:\n+        model = TestModel\n+        fields = ['name']  # Include 'name' field\n+\n+    def clean(self):\n+        # Step 3: Set up cleaned_data to include a value for the field\n+        cleaned_data = super().clean()\n+        cleaned_data['name'] = 'cleaned_name'\n+        return cleaned_data\n+\n+class TestModelFormTest(TestCase):\n+    def test_cleaned_data_overwrites_default(self):\n+        # Step 4: Use construct_instance to apply cleaned_data to a model instance\n+        form = TestModelForm(data={})\n+        form.is_valid()  # Trigger the cleaning process\n+        instance = construct_instance(form, TestModel())\n+\n+        # Step 5: Assert that the field's value is correctly set to the cleaned_data value\n+        self.assertEqual(instance.name, 'cleaned_name')  # This should pass once the bug is fixed\n"], "arch": "x86_64", "base_commit": "21b1d239125f1228e579b1ce8d94d4d5feadd2a6", "test_directives": ["test_coverup_django__django-11433"], "coverage_files": ["django/forms/models.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_post__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.6", "packages": "requirements.txt", "install": "python -m pip install -e .", "eval_commands": ["sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen && locale-gen", "export LANG=en_US.UTF-8", "export LANGUAGE=en_US:en", "export LC_ALL=en_US.UTF-8"]}, "cache_level": "instance", "test_command": "python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/forms/models\\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-11433", "req_install_commands": ["conda create -n testbed python=3.6 -y", "cat <<'EOF_59812759871' > $HOME/requirements.txt\nasgiref ~= 3.2\nargon2-cffi >= 16.1.0\nbcrypt\ndocutils\ngeoip2\njinja2 >= 2.9.2\nnumpy\nPillow != 5.4.0\npylibmc; sys.platform != 'win32'\npython-memcached >= 1.59\npytz\npywatchman; sys.platform != 'win32'\nPyYAML\nselenium\nsqlparse >= 0.2.2\ntblib >= 1.5.0\n\nEOF_59812759871", "conda activate testbed && python -m pip install -r $HOME/requirements.txt", "rm $HOME/requirements.txt"]}