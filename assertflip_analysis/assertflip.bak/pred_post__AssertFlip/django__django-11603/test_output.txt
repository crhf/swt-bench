+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD f618e033acd37d59b536d6e6126e6c5be18037f6
+ sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen
+ locale-gen
Generating locales (this might take a while)...
  en_US.UTF-8... done
Generation complete.
+ export LANG=en_US.UTF-8
+ LANG=en_US.UTF-8
+ export LANGUAGE=en_US:en
+ LANGUAGE=en_US:en
+ export LC_ALL=en_US.UTF-8
+ LC_ALL=en_US.UTF-8
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit f618e033acd37d59b536d6e6126e6c5be18037f6
Author: Nick Pope <nick.pope@flightdataservices.com>
Date:   Tue Feb 5 22:00:56 2019 +0000

    Fixed #30160 -- Added support for LZMA and XZ templates to startapp/startproject management commands.

diff --git a/django/utils/archive.py b/django/utils/archive.py
index c94ca4950b..235809f2ad 100644
--- a/django/utils/archive.py
+++ b/django/utils/archive.py
@@ -220,5 +220,7 @@ extension_map = dict.fromkeys((
     '.tar',
     '.tar.bz2', '.tbz2', '.tbz', '.tz2',
     '.tar.gz', '.tgz', '.taz',
+    '.tar.lzma', '.tlz',
+    '.tar.xz', '.txz',
 ), TarArchive)
 extension_map['.zip'] = ZipArchive
diff --git a/docs/ref/django-admin.txt b/docs/ref/django-admin.txt
index be007c8cdf..b5572cd5c7 100644
--- a/docs/ref/django-admin.txt
+++ b/docs/ref/django-admin.txt
@@ -1223,7 +1223,8 @@ For example::
 
 Provides the path to a directory with a custom app template file, or a path to
 an uncompressed archive (``.tar``) or a compressed archive (``.tar.gz``,
-``.tar.bz2``, ``.tgz``, ``.tbz2``, ``.zip``) containing the app template files.
+``.tar.bz2``, ``.tar.xz``, ``.tar.lzma``, ``.tgz``, ``.tbz2``, ``.txz``,
+``.tlz``, ``.zip``) containing the app template files.
 
 For example, this would look for an app template in the given directory when
 creating the ``myapp`` app::
@@ -1239,6 +1240,11 @@ zip files, you can use a URL like::
 
     django-admin startapp --template=https://github.com/githubuser/django-app-template/archive/master.zip myapp
 
+.. versionchanged:: 3.0
+
+    Support for XZ archives (``.tar.xz``, ``.txz``) and LZMA archives
+    (``.tar.lzma``, ``.tlz``) was added.
+
 .. django-admin-option:: --extension EXTENSIONS, -e EXTENSIONS
 
 Specifies which file extensions in the app template should be rendered with the
diff --git a/docs/releases/3.0.txt b/docs/releases/3.0.txt
index 30f70e0bcf..4bfebba73b 100644
--- a/docs/releases/3.0.txt
+++ b/docs/releases/3.0.txt
@@ -250,6 +250,10 @@ Management Commands
 * The new :option:`--skip-checks` option skips running system checks prior to
   running the command.
 
+* The :option:`startapp --template` and :option:`startproject --template`
+  options now support templates stored in XZ archives (``.tar.xz``, ``.txz``)
+  and LZMA archives (``.tar.lzma``, ``.tlz``).
+
 Migrations
 ~~~~~~~~~~
 
diff --git a/tests/utils_tests/archives/foobar.tar.lzma b/tests/utils_tests/archives/foobar.tar.lzma
new file mode 100644
index 0000000000..758518e1fd
Binary files /dev/null and b/tests/utils_tests/archives/foobar.tar.lzma differ
diff --git a/tests/utils_tests/archives/foobar.tar.xz b/tests/utils_tests/archives/foobar.tar.xz
new file mode 100644
index 0000000000..f50d54371a
Binary files /dev/null and b/tests/utils_tests/archives/foobar.tar.xz differ
diff --git a/tests/utils_tests/archives/leadpath_foobar.tar.lzma b/tests/utils_tests/archives/leadpath_foobar.tar.lzma
new file mode 100644
index 0000000000..bf1af30589
Binary files /dev/null and b/tests/utils_tests/archives/leadpath_foobar.tar.lzma differ
diff --git a/tests/utils_tests/archives/leadpath_foobar.tar.xz b/tests/utils_tests/archives/leadpath_foobar.tar.xz
new file mode 100644
index 0000000000..9fc7a1b82a
Binary files /dev/null and b/tests/utils_tests/archives/leadpath_foobar.tar.xz differ
+ git diff f618e033acd37d59b536d6e6126e6c5be18037f6
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
Requirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.0.dev20190731080213) (2025.2)
Requirement already satisfied: sqlparse in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.0.dev20190731080213) (0.4.4)
Requirement already satisfied: asgiref in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.0.dev20190731080213) (3.4.1)
Requirement already satisfied: typing-extensions in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from asgiref->Django==3.0.dev20190731080213) (4.1.1)
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 3.0.dev20190731080213
    Uninstalling Django-3.0.dev20190731080213:
      Successfully uninstalled Django-3.0.dev20190731080213
  Running setup.py develop for Django
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
Successfully installed Django-3.0.dev20190731080213
+ git apply -v -
Checking patch django/db/models/aggregates.py...
Applied patch django/db/models/aggregates.py cleanly.
+ git apply -v -
<stdin>:26: trailing whitespace.
        
<stdin>:45: trailing whitespace.
        
<stdin>:57: trailing whitespace.
        
Checking patch tests/test_coverup_django__django-11603.py...
Applied patch tests/test_coverup_django__django-11603.py cleanly.
warning: 3 lines add whitespace errors.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/db/models/aggregates\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-11603
Creating test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
test_avg_with_distinct (test_coverup_django__django-11603.AggregateDistinctTests) ... ok
test_sum_with_distinct (test_coverup_django__django-11603.AggregateDistinctTests) ... ['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(django/db/models/aggregates\\.py)']
0.12 aggregates.py(3): """
0.12 aggregates.py(4): from django.core.exceptions import FieldError
0.12 aggregates.py(5): from django.db.models.expressions import Case, Func, Star, When
0.30 aggregates.py(6): from django.db.models.fields import IntegerField
0.30 aggregates.py(7): from django.db.models.functions.mixins import (
0.31 aggregates.py(12):     'Aggregate', 'Avg', 'Count', 'Max', 'Min', 'StdDev', 'Sum', 'Variance',
0.31 aggregates.py(16): class Aggregate(Func):
0.31 aggregates.py(16): class Aggregate(Func):
0.31 aggregates.py(17):     template = '%(function)s(%(distinct)s%(expressions)s)'
0.31 aggregates.py(18):     contains_aggregate = True
0.31 aggregates.py(19):     name = None
0.31 aggregates.py(20):     filter_template = '%s FILTER (WHERE %%(filter)s)'
0.31 aggregates.py(21):     window_compatible = True
0.31 aggregates.py(22):     allow_distinct = False
0.31 aggregates.py(24):     def __init__(self, *expressions, distinct=False, filter=None, **extra):
0.31 aggregates.py(31):     def get_source_fields(self):
0.31 aggregates.py(35):     def get_source_expressions(self):
0.31 aggregates.py(41):     def set_source_expressions(self, exprs):
0.31 aggregates.py(45):     def resolve_expression(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False):
0.31 aggregates.py(60):     @property
0.31 aggregates.py(67):     def get_group_by_cols(self, alias=None):
0.31 aggregates.py(70):     def as_sql(self, compiler, connection, **extra_context):
0.31 aggregates.py(90):     def _get_repr_options(self):
0.31 aggregates.py(99): class Avg(FixDurationInputMixin, NumericOutputFieldMixin, Aggregate):
0.31 aggregates.py(99): class Avg(FixDurationInputMixin, NumericOutputFieldMixin, Aggregate):
0.31 aggregates.py(100):     function = 'AVG'
0.31 aggregates.py(101):     name = 'Avg'
0.31 aggregates.py(102):     allow_distinct = True
0.31 aggregates.py(105): class Count(Aggregate):
0.31 aggregates.py(105): class Count(Aggregate):
0.31 aggregates.py(106):     function = 'COUNT'
0.31 aggregates.py(107):     name = 'Count'
0.31 aggregates.py(108):     output_field = IntegerField()
0.31 aggregates.py(109):     allow_distinct = True
0.31 aggregates.py(111):     def __init__(self, expression, filter=None, **extra):
0.31 aggregates.py(118):     def convert_value(self, value, expression, connection):
0.31 aggregates.py(122): class Max(Aggregate):
0.31 aggregates.py(122): class Max(Aggregate):
0.31 aggregates.py(123):     function = 'MAX'
0.31 aggregates.py(124):     name = 'Max'
0.31 aggregates.py(127): class Min(Aggregate):
0.31 aggregates.py(127): class Min(Aggregate):
0.31 aggregates.py(128):     function = 'MIN'
0.31 aggregates.py(129):     name = 'Min'
0.31 aggregates.py(132): class StdDev(NumericOutputFieldMixin, Aggregate):
0.31 aggregates.py(132): class StdDev(NumericOutputFieldMixin, Aggregate):
0.31 aggregates.py(133):     name = 'StdDev'
0.31 aggregates.py(135):     def __init__(self, expression, sample=False, **extra):
0.31 aggregates.py(139):     def _get_repr_options(self):
0.31 aggregates.py(143): class Sum(FixDurationInputMixin, Aggregate):
0.31 aggregates.py(143): class Sum(FixDurationInputMixin, Aggregate):
0.31 aggregates.py(144):     function = 'SUM'
0.31 aggregates.py(145):     name = 'Sum'
0.31 aggregates.py(146):     allow_distinct = True
0.31 aggregates.py(149): class Variance(NumericOutputFieldMixin, Aggregate):
0.31 aggregates.py(149): class Variance(NumericOutputFieldMixin, Aggregate):
0.31 aggregates.py(150):     name = 'Variance'
0.31 aggregates.py(152):     def __init__(self, expression, sample=False, **extra):
0.31 aggregates.py(156):     def _get_repr_options(self):
Testing against Django installed in '/testbed/django'
Skipping setup of unused database(s): other.
Operations to perform:
  Synchronize unmigrated apps: auth, contenttypes, messages, sessions, staticfiles
  Apply all migrations: admin, sites
Synchronizing apps without migrations:
  Creating tables...
    Creating table django_content_type
    Creating table auth_permission
    Creating table auth_group
    Creating table auth_user
    Creating table django_session
    Running deferred SQL...
Running migrations:
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying sites.0001_initial... OK
  Applying sites.0002_alter_domain_unique... OK
System check identified no issues (0 silenced).
0.84 aggregates.py(25):         if distinct and not self.allow_distinct:
0.84 aggregates.py(27):         self.distinct = distinct
0.84 aggregates.py(28):         self.filter = filter
0.84 aggregates.py(29):         super().__init__(*expressions, **extra)
0.84 aggregates.py(47):         c = super().resolve_expression(query, allow_joins, reuse, summarize)
0.84 aggregates.py(48):         c.filter = c.filter and c.filter.resolve_expression(query, allow_joins, reuse, summarize)
0.84 aggregates.py(49):         if not summarize:
0.84 aggregates.py(58):         return c
0.84 aggregates.py(71):         extra_context['distinct'] = 'DISTINCT ' if self.distinct else ''
0.84 aggregates.py(72):         if self.filter:
0.84 aggregates.py(88):         return super().as_sql(compiler, connection, **extra_context)
0.84 aggregates.py(36):         source_expressions = super().get_source_expressions()
0.84 aggregates.py(37):         if self.filter:
0.84 aggregates.py(39):         return source_expressions
0.84 aggregates.py(33):         return [e._output_field_or_none for e in super().get_source_expressions()]
0.84 aggregates.py(33):         return [e._output_field_or_none for e in super().get_source_expressions()]
0.84 aggregates.py(33):         return [e._output_field_or_none for e in super().get_source_expressions()]
0.84 aggregates.py(25):         if distinct and not self.allow_distinct:
0.84 aggregates.py(27):         self.distinct = distinct
0.84 aggregates.py(28):         self.filter = filter
0.84 aggregates.py(29):         super().__init__(*expressions, **extra)
0.84 aggregates.py(47):         c = super().resolve_expression(query, allow_joins, reuse, summarize)
0.84 aggregates.py(48):         c.filter = c.filter and c.filter.resolve_expression(query, allow_joins, reuse, summarize)
0.84 aggregates.py(49):         if not summarize:
0.84 aggregates.py(58):         return c
0.84 aggregates.py(71):         extra_context['distinct'] = 'DISTINCT ' if self.distinct else ''
0.84 aggregates.py(72):         if self.filter:
0.84 aggregates.py(88):         return super().as_sql(compiler, connection, **extra_context)
0.84 aggregates.py(36):         source_expressions = super().get_source_expressions()
0.84 aggregates.py(37):         if self.filter:
0.84 aggregates.py(39):         return source_expressions
0.84 aggregates.py(33):         return [e._output_field_or_none for e in super().get_source_expressions()]
0.84 aggregates.py(33):         return [e._output_field_or_none for e in super().get_source_expressions()]
0.84 aggregates.py(33):         return [e._output_field_or_none for e in super().get_source_expressions()]
ok

----------------------------------------------------------------------
Ran 2 tests in 0.004s

OK
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
+ cat coverage.cover
{"/testbed/django/db/models/aggregates.py": {"4": 1, "5": 1, "6": 1, "7": 1, "12": 1, "16": 2, "99": 2, "105": 2, "122": 2, "127": 2, "132": 2, "143": 2, "149": 2, "17": 1, "18": 1, "19": 1, "20": 1, "21": 1, "22": 1, "24": 1, "31": 1, "35": 1, "41": 1, "45": 1, "60": 1, "67": 1, "70": 1, "90": 1, "25": 2, "26": 0, "27": 2, "28": 2, "29": 2, "33": 6, "36": 2, "37": 2, "38": 0, "39": 2, "42": 0, "43": 0, "47": 2, "48": 2, "49": 2, "52": 0, "53": 0, "54": 0, "55": 0, "56": 0, "57": 0, "58": 2, "62": 0, "63": 0, "64": 0, "65": 0, "68": 0, "71": 2, "72": 2, "73": 0, "74": 0, "75": 0, "76": 0, "77": 0, "78": 0, "80": 0, "82": 0, "83": 0, "84": 0, "85": 0, "86": 0, "87": 0, "88": 2, "91": 0, "92": 0, "93": 0, "94": 0, "95": 0, "96": 0, "100": 1, "101": 1, "102": 1, "106": 1, "107": 1, "108": 1, "109": 1, "111": 1, "118": 1, "112": 0, "113": 0, "114": 0, "115": 0, "116": 0, "119": 0, "123": 1, "124": 1, "128": 1, "129": 1, "133": 1, "135": 1, "139": 1, "136": 0, "137": 0, "140": 0, "144": 1, "145": 1, "146": 1, "150": 1, "152": 1, "156": 1, "153": 0, "154": 0, "157": 0}}
+ git checkout f618e033acd37d59b536d6e6126e6c5be18037f6
Note: switching to 'f618e033acd37d59b536d6e6126e6c5be18037f6'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at f618e033ac Fixed #30160 -- Added support for LZMA and XZ templates to startapp/startproject management commands.
M	django/db/models/aggregates.py
+ git apply /root/pre_state.patch
error: unrecognized input
