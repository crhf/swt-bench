+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD d79be3ed39b76d3e34431873eec16f6dd354ab17
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit d79be3ed39b76d3e34431873eec16f6dd354ab17
Author: Daniele Procida <daniele@vurt.org>
Date:   Sun Jun 27 10:55:06 2021 +0200

    Refs #32880 -- Rearranged logging security notes.
    
    Expanded security notes and moved them under a new explanation heading
    of their own for future reference and expansion.
    
    Removed specific reference to Sentry since there are multiple
    third-party services that fulfill that role.

diff --git a/docs/topics/logging.txt b/docs/topics/logging.txt
index 5c0be8950b..b458d0c982 100644
--- a/docs/topics/logging.txt
+++ b/docs/topics/logging.txt
@@ -702,15 +702,8 @@ Python logging module.
             }
         },
 
-    Note that this HTML version of the email contains a full traceback,
-    with names and values of local variables at each level of the stack, plus
-    the values of your Django settings. This information is potentially very
-    sensitive, and you may not want to send it over email. Consider using
-    something such as `Sentry`_ to get the best of both worlds -- the
-    rich information of full tracebacks plus the security of *not* sending the
-    information over email. You may also explicitly designate certain
-    sensitive information to be filtered out of error reports -- learn more on
-    :ref:`Filtering error reports<filtering-error-reports>`.
+    Be aware of the :ref:`security implications of logging
+    <logging-security-implications>` when using the ``AdminEmailHandler``.
 
     By setting the ``email_backend`` argument of ``AdminEmailHandler``, the
     :ref:`email backend <topic-email-backends>` that is being used by the
@@ -747,8 +740,6 @@ Python logging module.
         subclass the :class:`~django.utils.log.AdminEmailHandler` class and
         override this method.
 
-.. _Sentry: https://pypi.org/project/sentry/
-
 Filters
 -------
 
@@ -848,3 +839,38 @@ above.
 See also :ref:`Configuring logging <configuring-logging>` to learn how you can
 complement or replace this default logging configuration defined in
 :source:`django/utils/log.py`.
+
+.. _logging-security-implications:
+
+Security implications
+=====================
+
+The logging system handles potentially sensitive information. For example, the
+log record may contain information about a web request or a stack trace, while
+some of the data you collect in your own loggers may also have security
+implications. You need to be sure you know:
+
+* what information is collected
+* where it will subsequently be stored
+* how it will be transferred
+* who might have access to it.
+
+To help control the collection of sensitive information, you can explicitly
+designate certain sensitive information to be filtered out of error reports --
+read more about how to :ref:`filter error reports <filtering-error-reports>`.
+
+``AdminEmailHandler``
+---------------------
+
+The built-in :class:`AdminEmailHandler` deserves a mention in the context of
+security. If its ``include_html`` option is enabled, the email message it sends
+will contain a full traceback, with names and values of local variables at each
+level of the stack, plus the values of your Django settings (in other words,
+the same level of detail that is exposed in a web page when :setting:`DEBUG` is
+``True``).
+
+It's generally not considered a good idea to send such potentially sensitive
+information over email. Consider instead using one of the many third-party
+services to which detailed logs can be sent to get the best of multiple worlds
+-- the rich information of full tracebacks, clear management of who is notified
+and has access to the information, and so on.
+ git diff d79be3ed39b76d3e34431873eec16f6dd354ab17
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: asgiref>=3.3.2 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0.dev20210628094637) (3.8.1)
Requirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0.dev20210628094637) (2025.2)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0.dev20210628094637) (0.5.3)
Requirement already satisfied: typing-extensions>=4 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from asgiref>=3.3.2->Django==4.0.dev20210628094637) (4.13.2)
Building wheels for collected packages: Django
  Building editable for Django (pyproject.toml): started
  Building editable for Django (pyproject.toml): finished with status 'done'
  Created wheel for Django: filename=django-4.0.dev20210628094637-0.editable-py3-none-any.whl size=26191 sha256=b6ef222ef5630e7b876fbfbc89c779eba8c108f54fe32fd7d2528d521d322f95
  Stored in directory: /tmp/pip-ephem-wheel-cache-4qb7gfe0/wheels/b2/50/f1/218f2e9962a80d01a4b1297698978f9fb3b60056aa24343f24
Successfully built Django
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 4.0.dev20210628094637
    Uninstalling Django-4.0.dev20210628094637:
      Successfully uninstalled Django-4.0.dev20210628094637
Successfully installed Django-4.0.dev20210628094637
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
Checking patch django/db/models/query.py...
Applied patch django/db/models/query.py cleanly.
+ git apply -v -
Checking patch tests/test_coverup_django__django-14559.py...
Applied patch tests/test_coverup_django__django-14559.py cleanly.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/db/models/query\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-14559
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(django/db/models/query\\.py)']
0.30 query.py(1): """
0.30 query.py(5): import copy
0.30 query.py(6): import operator
0.30 query.py(7): import warnings
0.30 query.py(8): from itertools import chain
0.30 query.py(10): import django
0.30 query.py(11): from django.conf import settings
0.30 query.py(12): from django.core import exceptions
0.30 query.py(13): from django.db import (
0.30 query.py(17): from django.db.models import AutoField, DateField, DateTimeField, sql
0.30 query.py(18): from django.db.models.constants import LOOKUP_SEP
0.30 query.py(19): from django.db.models.deletion import Collector
0.30 query.py(20): from django.db.models.expressions import Case, Expression, F, Ref, Value, When
0.30 query.py(21): from django.db.models.functions import Cast, Trunc
0.30 query.py(22): from django.db.models.query_utils import FilteredRelation, Q
0.30 query.py(23): from django.db.models.sql.constants import CURSOR, GET_ITERATOR_CHUNK_SIZE
0.30 query.py(24): from django.db.models.utils import create_namedtuple_class, resolve_callables
0.30 query.py(25): from django.utils import timezone
0.30 query.py(26): from django.utils.functional import cached_property, partition
0.30 query.py(29): MAX_GET_RESULTS = 21
0.30 query.py(32): REPR_OUTPUT_SIZE = 20
0.30 query.py(35): class BaseIterable:
0.30 query.py(35): class BaseIterable:
0.30 query.py(36):     def __init__(self, queryset, chunked_fetch=False, chunk_size=GET_ITERATOR_CHUNK_SIZE):
0.30 query.py(42): class ModelIterable(BaseIterable):
0.30 query.py(42): class ModelIterable(BaseIterable):
0.30 query.py(43):     """Iterable that yields a model instance for each row."""
0.30 query.py(45):     def __iter__(self):
0.30 query.py(92): class ValuesIterable(BaseIterable):
0.30 query.py(92): class ValuesIterable(BaseIterable):
0.30 query.py(93):     """
0.30 query.py(97):     def __iter__(self):
0.30 query.py(113): class ValuesListIterable(BaseIterable):
0.30 query.py(113): class ValuesListIterable(BaseIterable):
0.30 query.py(114):     """
0.30 query.py(119):     def __iter__(self):
0.30 query.py(143): class NamedValuesListIterable(ValuesListIterable):
0.30 query.py(143): class NamedValuesListIterable(ValuesListIterable):
0.30 query.py(144):     """
0.30 query.py(149):     def __iter__(self):
0.30 query.py(162): class FlatValuesListIterable(BaseIterable):
0.30 query.py(162): class FlatValuesListIterable(BaseIterable):
0.30 query.py(163):     """
0.30 query.py(168):     def __iter__(self):
0.30 query.py(175): class QuerySet:
0.30 query.py(175): class QuerySet:
0.30 query.py(176):     """Represent a lazy database lookup for a set of objects."""
0.30 query.py(178):     def __init__(self, model=None, query=None, using=None, hints=None):
0.30 query.py(194):     @property
0.30 query.py(195):     def query(self):
0.30 query.py(202):     @query.setter
0.30 query.py(203):     def query(self, value):
0.30 query.py(208):     def as_manager(cls):
0.30 query.py(214):     as_manager.queryset_only = True
0.30 query.py(215):     as_manager = classmethod(as_manager)
0.30 query.py(221):     def __deepcopy__(self, memo):
0.30 query.py(231):     def __getstate__(self):
0.30 query.py(236):     def __setstate__(self, state):
0.30 query.py(255):     def __repr__(self):
0.30 query.py(261):     def __len__(self):
0.30 query.py(265):     def __iter__(self):
0.30 query.py(283):     def __bool__(self):
0.30 query.py(287):     def __getitem__(self, k):
0.30 query.py(320):     def __class_getitem__(cls, *args, **kwargs):
0.30 query.py(323):     def __and__(self, other):
0.30 query.py(334):     def __or__(self, other):
0.30 query.py(352):     def _iterator(self, use_chunked_fetch, chunk_size):
0.30 query.py(355):     def iterator(self, chunk_size=2000):
0.30 query.py(365):     def aggregate(self, *args, **kwargs):
0.30 query.py(401):     def count(self):
0.30 query.py(414):     def get(self, *args, **kwargs):
0.30 query.py(446):     def create(self, **kwargs):
0.30 query.py(456):     def _prepare_for_bulk_create(self, objs):
0.30 query.py(463):     def bulk_create(self, objs, batch_size=None, ignore_conflicts=False):
0.30 query.py(527):     def bulk_update(self, objs, fields, batch_size=None):
0.30 query.py(571):     bulk_update.alters_data = True
0.30 query.py(573):     def get_or_create(self, defaults=None, **kwargs):
0.30 query.py(598):     def update_or_create(self, defaults=None, **kwargs):
0.30 query.py(618):     def _extract_model_params(self, defaults, **kwargs):
0.30 query.py(643):     def _earliest(self, *fields):
0.30 query.py(665):     def earliest(self, *fields):
0.30 query.py(670):     def latest(self, *fields):
0.30 query.py(675):     def first(self):
0.30 query.py(680):     def last(self):
0.30 query.py(685):     def in_bulk(self, id_list=None, *, field_name='pk'):
0.30 query.py(724):     def delete(self):
0.30 query.py(754):     delete.alters_data = True
0.30 query.py(755):     delete.queryset_only = True
0.30 query.py(757):     def _raw_delete(self, using):
0.30 query.py(769):     _raw_delete.alters_data = True
0.30 query.py(771):     def update(self, **kwargs):
0.30 query.py(788):     update.alters_data = True
0.30 query.py(790):     def _update(self, values):
0.30 query.py(805):     _update.alters_data = True
0.30 query.py(806):     _update.queryset_only = False
0.30 query.py(808):     def exists(self):
0.30 query.py(813):     def contains(self, obj):
0.30 query.py(834):     def _prefetch_related_objects(self):
0.30 query.py(839):     def explain(self, *, format=None, **options):
0.30 query.py(846):     def raw(self, raw_query, params=(), translations=None, using=None):
0.30 query.py(853):     def _values(self, *fields, **expressions):
0.30 query.py(861):     def values(self, *fields, **expressions):
0.30 query.py(867):     def values_list(self, *fields, flat=False, named=False):
0.30 query.py(898):     def dates(self, field_name, kind, order='ASC'):
0.30 query.py(914):     def datetimes(self, field_name, kind, order='ASC', tzinfo=None, is_dst=None):
0.30 query.py(941):     def none(self):
0.30 query.py(951):     def all(self):
0.30 query.py(958):     def filter(self, *args, **kwargs):
0.30 query.py(966):     def exclude(self, *args, **kwargs):
0.30 query.py(974):     def _filter_or_exclude(self, negate, args, kwargs):
0.30 query.py(985):     def _filter_or_exclude_inplace(self, negate, args, kwargs):
0.30 query.py(991):     def complex_filter(self, filter_obj):
0.30 query.py(1008):     def _combinator_query(self, combinator, *other_qs, all=False):
0.30 query.py(1019):     def union(self, *other_qs, all=False):
0.30 query.py(1030):     def intersection(self, *other_qs):
0.30 query.py(1039):     def difference(self, *other_qs):
0.30 query.py(1045):     def select_for_update(self, nowait=False, skip_locked=False, of=(), no_key=False):
0.30 query.py(1061):     def select_related(self, *fields):
0.30 query.py(1083):     def prefetch_related(self, *lookups):
0.30 query.py(1106):     def annotate(self, *args, **kwargs):
0.30 query.py(1114):     def alias(self, *args, **kwargs):
0.30 query.py(1121):     def _annotate(self, args, kwargs, select=True):
0.30 query.py(1164):     def order_by(self, *field_names):
0.30 query.py(1173):     def distinct(self, *field_names):
0.30 query.py(1184):     def extra(self, select=None, where=None, params=None, tables=None,
0.30 query.py(1194):     def reverse(self):
0.30 query.py(1202):     def defer(self, *fields):
0.30 query.py(1219):     def only(self, *fields):
0.30 query.py(1240):     def using(self, alias):
0.30 query.py(1250):     @property
0.30 query.py(1251):     def ordered(self):
0.30 query.py(1270):     @property
0.30 query.py(1271):     def db(self):
0.30 query.py(1281):     def _insert(self, objs, fields, returning_fields=None, raw=False, using=None, ignore_conflicts=False):
0.30 query.py(1292):     _insert.alters_data = True
0.30 query.py(1293):     _insert.queryset_only = False
0.30 query.py(1295):     def _batched_insert(self, objs, fields, batch_size, ignore_conflicts=False):
0.30 query.py(1317):     def _chain(self, **kwargs):
0.30 query.py(1329):     def _clone(self):
0.30 query.py(1343):     def _fetch_all(self):
0.30 query.py(1349):     def _next_is_sticky(self):
0.30 query.py(1363):     def _merge_sanity_check(self, other):
0.30 query.py(1374):     def _merge_known_related_objects(self, other):
0.30 query.py(1381):     def resolve_expression(self, *args, **kwargs):
0.30 query.py(1389):     resolve_expression.queryset_only = True
0.30 query.py(1391):     def _add_hints(self, **hints):
0.30 query.py(1398):     def _has_filters(self):
0.30 query.py(1406):     @staticmethod
0.30 query.py(1407):     def _validate_values_are_expressions(values, method_name):
0.30 query.py(1417):     def _not_support_combined_queries(self, operation_name):
0.30 query.py(1425): class InstanceCheckMeta(type):
0.30 query.py(1425): class InstanceCheckMeta(type):
0.30 query.py(1426):     def __instancecheck__(self, instance):
0.30 query.py(1430): class EmptyQuerySet(metaclass=InstanceCheckMeta):
0.30 query.py(1430): class EmptyQuerySet(metaclass=InstanceCheckMeta):
0.30 query.py(1431):     """
0.30 query.py(1436):     def __init__(self, *args, **kwargs):
0.30 query.py(1440): class RawQuerySet:
0.30 query.py(1440): class RawQuerySet:
0.30 query.py(1441):     """
0.30 query.py(1445):     def __init__(self, raw_query, model=None, query=None, params=(),
0.30 query.py(1458):     def resolve_model_init_order(self):
0.30 query.py(1468):     def prefetch_related(self, *lookups):
0.30 query.py(1477):     def _prefetch_related_objects(self):
0.30 query.py(1481):     def _clone(self):
0.30 query.py(1490):     def _fetch_all(self):
0.30 query.py(1496):     def __len__(self):
0.30 query.py(1500):     def __bool__(self):
0.30 query.py(1504):     def __iter__(self):
0.30 query.py(1508):     def iterator(self):
0.30 query.py(1543):     def __repr__(self):
0.30 query.py(1546):     def __getitem__(self, k):
0.30 query.py(1549):     @property
0.30 query.py(1550):     def db(self):
0.30 query.py(1554):     def using(self, alias):
0.30 query.py(1563):     @cached_property
0.30 query.py(1564):     def columns(self):
0.30 query.py(1581):     @cached_property
0.30 query.py(1582):     def model_fields(self):
0.30 query.py(1592): class Prefetch:
0.30 query.py(1592): class Prefetch:
0.30 query.py(1593):     def __init__(self, lookup, queryset=None, to_attr=None):
0.30 query.py(1614):     def __getstate__(self):
0.30 query.py(1624):     def add_prefix(self, prefix):
0.30 query.py(1628):     def get_current_prefetch_to(self, level):
0.30 query.py(1631):     def get_current_to_attr(self, level):
0.30 query.py(1637):     def get_current_queryset(self, level):
0.30 query.py(1642):     def __eq__(self, other):
0.30 query.py(1647):     def __hash__(self):
0.30 query.py(1651): def normalize_prefetch_lookups(lookups, prefix=None):
0.30 query.py(1663): def prefetch_related_objects(model_instances, *related_lookups):
0.30 query.py(1798): def get_prefetcher(instance, through_attr, to_attr):
0.30 query.py(1852): def prefetch_one_level(instances, prefetcher, lookup, level):
0.30 query.py(1952): class RelatedPopulator:
0.30 query.py(1952): class RelatedPopulator:
0.30 query.py(1953):     """
0.30 query.py(1967):     def __init__(self, klass_info, select, db):
0.30 query.py(2013):     def populate(self, row, from_obj):
0.30 query.py(2029): def get_related_populators(klass_info, select, db):
Testing against Django installed in '/testbed/django'
Found 1 test(s).
Skipping setup of unused database(s): other.
Operations to perform:
  Synchronize unmigrated apps: auth, contenttypes, messages, sessions, staticfiles
  Apply all migrations: admin, sites
Synchronizing apps without migrations:
  Creating tables...
    Creating table django_content_type
    Creating table auth_permission
    Creating table auth_group
    Creating table auth_user
    Creating table django_session
    Running deferred SQL...
Running migrations:
  Applying admin.0001_initial...0.61 query.py(179):         self.model = model
0.61 query.py(180):         self._db = using
0.61 query.py(181):         self._hints = hints or {}
0.61 query.py(182):         self._query = query or sql.Query(self.model)
0.61 query.py(183):         self._result_cache = None
0.61 query.py(184):         self._sticky_filter = False
0.61 query.py(185):         self._for_write = False
0.61 query.py(186):         self._prefetch_related_lookups = ()
0.61 query.py(187):         self._prefetch_done = False
0.61 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.61 query.py(189):         self._iterable_class = ModelIterable
0.61 query.py(190):         self._fields = None
0.61 query.py(191):         self._defer_next_filter = False
0.61 query.py(192):         self._deferred_filter = None
0.61 query.py(1242):         clone = self._chain()
0.61 query.py(1322):         obj = self._clone()
0.61 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.61 query.py(196):         if self._deferred_filter:
0.61 query.py(200):         return self._query
0.61 query.py(179):         self.model = model
0.61 query.py(180):         self._db = using
0.61 query.py(181):         self._hints = hints or {}
0.61 query.py(182):         self._query = query or sql.Query(self.model)
0.61 query.py(183):         self._result_cache = None
0.61 query.py(184):         self._sticky_filter = False
0.61 query.py(185):         self._for_write = False
0.61 query.py(186):         self._prefetch_related_lookups = ()
0.61 query.py(187):         self._prefetch_done = False
0.61 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.61 query.py(189):         self._iterable_class = ModelIterable
0.61 query.py(190):         self._fields = None
0.61 query.py(191):         self._defer_next_filter = False
0.61 query.py(192):         self._deferred_filter = None
0.61 query.py(1335):         c._sticky_filter = self._sticky_filter
0.61 query.py(1336):         c._for_write = self._for_write
0.61 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.61 query.py(1338):         c._known_related_objects = self._known_related_objects
0.61 query.py(1339):         c._iterable_class = self._iterable_class
0.61 query.py(1340):         c._fields = self._fields
0.61 query.py(1341):         return c
0.61 query.py(1323):         if obj._sticky_filter:
0.61 query.py(1326):         obj.__dict__.update(kwargs)
0.61 query.py(1327):         return obj
0.61 query.py(1243):         clone._db = alias
0.61 query.py(1244):         return clone
0.61 query.py(451):         obj = self.model(**kwargs)
0.61 query.py(452):         self._for_write = True
0.61 query.py(453):         obj.save(force_insert=True, using=self.db)
0.61 query.py(1273):         if self._for_write:
0.61 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.61 query.py(179):         self.model = model
0.61 query.py(180):         self._db = using
0.61 query.py(181):         self._hints = hints or {}
0.61 query.py(182):         self._query = query or sql.Query(self.model)
0.61 query.py(183):         self._result_cache = None
0.61 query.py(184):         self._sticky_filter = False
0.61 query.py(185):         self._for_write = False
0.61 query.py(186):         self._prefetch_related_lookups = ()
0.61 query.py(187):         self._prefetch_done = False
0.61 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.61 query.py(189):         self._iterable_class = ModelIterable
0.61 query.py(190):         self._fields = None
0.61 query.py(191):         self._defer_next_filter = False
0.61 query.py(192):         self._deferred_filter = None
0.61 query.py(1286):         self._for_write = True
0.61 query.py(1287):         if using is None:
0.61 query.py(1289):         query = sql.InsertQuery(self.model, ignore_conflicts=ignore_conflicts)
0.61 query.py(1290):         query.insert_values(fields, objs, raw=raw)
0.61 query.py(1291):         return query.get_compiler(using=using).execute_sql(returning_fields)
0.61 query.py(454):         return obj
 OK
  Applying admin.0002_logentry_remove_auto_add...0.62 query.py(179):         self.model = model
0.62 query.py(180):         self._db = using
0.62 query.py(181):         self._hints = hints or {}
0.62 query.py(182):         self._query = query or sql.Query(self.model)
0.62 query.py(183):         self._result_cache = None
0.62 query.py(184):         self._sticky_filter = False
0.62 query.py(185):         self._for_write = False
0.62 query.py(186):         self._prefetch_related_lookups = ()
0.62 query.py(187):         self._prefetch_done = False
0.62 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.62 query.py(189):         self._iterable_class = ModelIterable
0.62 query.py(190):         self._fields = None
0.62 query.py(191):         self._defer_next_filter = False
0.62 query.py(192):         self._deferred_filter = None
0.62 query.py(1242):         clone = self._chain()
0.62 query.py(1322):         obj = self._clone()
0.62 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.62 query.py(196):         if self._deferred_filter:
0.62 query.py(200):         return self._query
0.62 query.py(179):         self.model = model
0.62 query.py(180):         self._db = using
0.62 query.py(181):         self._hints = hints or {}
0.62 query.py(182):         self._query = query or sql.Query(self.model)
0.62 query.py(183):         self._result_cache = None
0.62 query.py(184):         self._sticky_filter = False
0.62 query.py(185):         self._for_write = False
0.62 query.py(186):         self._prefetch_related_lookups = ()
0.62 query.py(187):         self._prefetch_done = False
0.62 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.62 query.py(189):         self._iterable_class = ModelIterable
0.62 query.py(190):         self._fields = None
0.62 query.py(191):         self._defer_next_filter = False
0.62 query.py(192):         self._deferred_filter = None
0.62 query.py(1335):         c._sticky_filter = self._sticky_filter
0.62 query.py(1336):         c._for_write = self._for_write
0.62 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.62 query.py(1338):         c._known_related_objects = self._known_related_objects
0.62 query.py(1339):         c._iterable_class = self._iterable_class
0.62 query.py(1340):         c._fields = self._fields
0.62 query.py(1341):         return c
0.62 query.py(1323):         if obj._sticky_filter:
0.62 query.py(1326):         obj.__dict__.update(kwargs)
0.62 query.py(1327):         return obj
0.62 query.py(1243):         clone._db = alias
0.62 query.py(1244):         return clone
0.62 query.py(451):         obj = self.model(**kwargs)
0.62 query.py(452):         self._for_write = True
0.62 query.py(453):         obj.save(force_insert=True, using=self.db)
0.62 query.py(1273):         if self._for_write:
0.62 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.62 query.py(179):         self.model = model
0.62 query.py(180):         self._db = using
0.62 query.py(181):         self._hints = hints or {}
0.62 query.py(182):         self._query = query or sql.Query(self.model)
0.62 query.py(183):         self._result_cache = None
0.62 query.py(184):         self._sticky_filter = False
0.62 query.py(185):         self._for_write = False
0.62 query.py(186):         self._prefetch_related_lookups = ()
0.62 query.py(187):         self._prefetch_done = False
0.62 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.62 query.py(189):         self._iterable_class = ModelIterable
0.62 query.py(190):         self._fields = None
0.62 query.py(191):         self._defer_next_filter = False
0.62 query.py(192):         self._deferred_filter = None
0.62 query.py(1286):         self._for_write = True
0.62 query.py(1287):         if using is None:
0.62 query.py(1289):         query = sql.InsertQuery(self.model, ignore_conflicts=ignore_conflicts)
0.62 query.py(1290):         query.insert_values(fields, objs, raw=raw)
0.62 query.py(1291):         return query.get_compiler(using=using).execute_sql(returning_fields)
0.62 query.py(454):         return obj
 OK
  Applying admin.0003_logentry_add_action_flag_choices...0.62 query.py(179):         self.model = model
0.62 query.py(180):         self._db = using
0.62 query.py(181):         self._hints = hints or {}
0.62 query.py(182):         self._query = query or sql.Query(self.model)
0.62 query.py(183):         self._result_cache = None
0.62 query.py(184):         self._sticky_filter = False
0.62 query.py(185):         self._for_write = False
0.62 query.py(186):         self._prefetch_related_lookups = ()
0.62 query.py(187):         self._prefetch_done = False
0.62 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.62 query.py(189):         self._iterable_class = ModelIterable
0.62 query.py(190):         self._fields = None
0.62 query.py(191):         self._defer_next_filter = False
0.62 query.py(192):         self._deferred_filter = None
0.62 query.py(1242):         clone = self._chain()
0.62 query.py(1322):         obj = self._clone()
0.62 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.62 query.py(196):         if self._deferred_filter:
0.62 query.py(200):         return self._query
0.62 query.py(179):         self.model = model
0.62 query.py(180):         self._db = using
0.62 query.py(181):         self._hints = hints or {}
0.62 query.py(182):         self._query = query or sql.Query(self.model)
0.62 query.py(183):         self._result_cache = None
0.62 query.py(184):         self._sticky_filter = False
0.62 query.py(185):         self._for_write = False
0.62 query.py(186):         self._prefetch_related_lookups = ()
0.62 query.py(187):         self._prefetch_done = False
0.62 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.62 query.py(189):         self._iterable_class = ModelIterable
0.62 query.py(190):         self._fields = None
0.62 query.py(191):         self._defer_next_filter = False
0.62 query.py(192):         self._deferred_filter = None
0.62 query.py(1335):         c._sticky_filter = self._sticky_filter
0.62 query.py(1336):         c._for_write = self._for_write
0.62 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.62 query.py(1338):         c._known_related_objects = self._known_related_objects
0.62 query.py(1339):         c._iterable_class = self._iterable_class
0.62 query.py(1340):         c._fields = self._fields
0.62 query.py(1341):         return c
0.62 query.py(1323):         if obj._sticky_filter:
0.62 query.py(1326):         obj.__dict__.update(kwargs)
0.62 query.py(1327):         return obj
0.62 query.py(1243):         clone._db = alias
0.62 query.py(1244):         return clone
0.62 query.py(451):         obj = self.model(**kwargs)
0.62 query.py(452):         self._for_write = True
0.62 query.py(453):         obj.save(force_insert=True, using=self.db)
0.62 query.py(1273):         if self._for_write:
0.62 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.62 query.py(179):         self.model = model
0.62 query.py(180):         self._db = using
0.62 query.py(181):         self._hints = hints or {}
0.62 query.py(182):         self._query = query or sql.Query(self.model)
0.62 query.py(183):         self._result_cache = None
0.62 query.py(184):         self._sticky_filter = False
0.62 query.py(185):         self._for_write = False
0.62 query.py(186):         self._prefetch_related_lookups = ()
0.62 query.py(187):         self._prefetch_done = False
0.62 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.62 query.py(189):         self._iterable_class = ModelIterable
0.62 query.py(190):         self._fields = None
0.62 query.py(191):         self._defer_next_filter = False
0.62 query.py(192):         self._deferred_filter = None
0.62 query.py(1286):         self._for_write = True
0.62 query.py(1287):         if using is None:
0.62 query.py(1289):         query = sql.InsertQuery(self.model, ignore_conflicts=ignore_conflicts)
0.62 query.py(1290):         query.insert_values(fields, objs, raw=raw)
0.62 query.py(1291):         return query.get_compiler(using=using).execute_sql(returning_fields)
0.62 query.py(454):         return obj
 OK
  Applying sites.0001_initial...0.63 query.py(179):         self.model = model
0.63 query.py(180):         self._db = using
0.63 query.py(181):         self._hints = hints or {}
0.63 query.py(182):         self._query = query or sql.Query(self.model)
0.63 query.py(183):         self._result_cache = None
0.63 query.py(184):         self._sticky_filter = False
0.63 query.py(185):         self._for_write = False
0.63 query.py(186):         self._prefetch_related_lookups = ()
0.63 query.py(187):         self._prefetch_done = False
0.63 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.63 query.py(189):         self._iterable_class = ModelIterable
0.63 query.py(190):         self._fields = None
0.63 query.py(191):         self._defer_next_filter = False
0.63 query.py(192):         self._deferred_filter = None
0.63 query.py(1242):         clone = self._chain()
0.63 query.py(1322):         obj = self._clone()
0.63 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.63 query.py(196):         if self._deferred_filter:
0.63 query.py(200):         return self._query
0.63 query.py(179):         self.model = model
0.63 query.py(180):         self._db = using
0.63 query.py(181):         self._hints = hints or {}
0.63 query.py(182):         self._query = query or sql.Query(self.model)
0.63 query.py(183):         self._result_cache = None
0.63 query.py(184):         self._sticky_filter = False
0.63 query.py(185):         self._for_write = False
0.63 query.py(186):         self._prefetch_related_lookups = ()
0.63 query.py(187):         self._prefetch_done = False
0.63 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.63 query.py(189):         self._iterable_class = ModelIterable
0.63 query.py(190):         self._fields = None
0.63 query.py(191):         self._defer_next_filter = False
0.63 query.py(192):         self._deferred_filter = None
0.63 query.py(1335):         c._sticky_filter = self._sticky_filter
0.63 query.py(1336):         c._for_write = self._for_write
0.63 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.63 query.py(1338):         c._known_related_objects = self._known_related_objects
0.63 query.py(1339):         c._iterable_class = self._iterable_class
0.63 query.py(1340):         c._fields = self._fields
0.63 query.py(1341):         return c
0.63 query.py(1323):         if obj._sticky_filter:
0.63 query.py(1326):         obj.__dict__.update(kwargs)
0.63 query.py(1327):         return obj
0.63 query.py(1243):         clone._db = alias
0.63 query.py(1244):         return clone
0.63 query.py(451):         obj = self.model(**kwargs)
0.63 query.py(452):         self._for_write = True
0.63 query.py(453):         obj.save(force_insert=True, using=self.db)
0.63 query.py(1273):         if self._for_write:
0.63 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.63 query.py(179):         self.model = model
0.63 query.py(180):         self._db = using
0.63 query.py(181):         self._hints = hints or {}
0.63 query.py(182):         self._query = query or sql.Query(self.model)
0.63 query.py(183):         self._result_cache = None
0.63 query.py(184):         self._sticky_filter = False
0.63 query.py(185):         self._for_write = False
0.63 query.py(186):         self._prefetch_related_lookups = ()
0.63 query.py(187):         self._prefetch_done = False
0.63 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.63 query.py(189):         self._iterable_class = ModelIterable
0.63 query.py(190):         self._fields = None
0.63 query.py(191):         self._defer_next_filter = False
0.63 query.py(192):         self._deferred_filter = None
0.63 query.py(1286):         self._for_write = True
0.63 query.py(1287):         if using is None:
0.63 query.py(1289):         query = sql.InsertQuery(self.model, ignore_conflicts=ignore_conflicts)
0.63 query.py(1290):         query.insert_values(fields, objs, raw=raw)
0.63 query.py(1291):         return query.get_compiler(using=using).execute_sql(returning_fields)
0.63 query.py(454):         return obj
 OK
  Applying sites.0002_alter_domain_unique...0.63 query.py(179):         self.model = model
0.63 query.py(180):         self._db = using
0.63 query.py(181):         self._hints = hints or {}
0.63 query.py(182):         self._query = query or sql.Query(self.model)
0.63 query.py(183):         self._result_cache = None
0.63 query.py(184):         self._sticky_filter = False
0.63 query.py(185):         self._for_write = False
0.63 query.py(186):         self._prefetch_related_lookups = ()
0.63 query.py(187):         self._prefetch_done = False
0.63 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.63 query.py(189):         self._iterable_class = ModelIterable
0.63 query.py(190):         self._fields = None
0.63 query.py(191):         self._defer_next_filter = False
0.63 query.py(192):         self._deferred_filter = None
0.63 query.py(1242):         clone = self._chain()
0.63 query.py(1322):         obj = self._clone()
0.63 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.63 query.py(196):         if self._deferred_filter:
0.63 query.py(200):         return self._query
0.63 query.py(179):         self.model = model
0.63 query.py(180):         self._db = using
0.63 query.py(181):         self._hints = hints or {}
0.63 query.py(182):         self._query = query or sql.Query(self.model)
0.63 query.py(183):         self._result_cache = None
0.63 query.py(184):         self._sticky_filter = False
0.63 query.py(185):         self._for_write = False
0.63 query.py(186):         self._prefetch_related_lookups = ()
0.63 query.py(187):         self._prefetch_done = False
0.63 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.63 query.py(189):         self._iterable_class = ModelIterable
0.63 query.py(190):         self._fields = None
0.63 query.py(191):         self._defer_next_filter = False
0.63 query.py(192):         self._deferred_filter = None
0.63 query.py(1335):         c._sticky_filter = self._sticky_filter
0.63 query.py(1336):         c._for_write = self._for_write
0.63 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.63 query.py(1338):         c._known_related_objects = self._known_related_objects
0.63 query.py(1339):         c._iterable_class = self._iterable_class
0.63 query.py(1340):         c._fields = self._fields
0.63 query.py(1341):         return c
0.63 query.py(1323):         if obj._sticky_filter:
0.63 query.py(1326):         obj.__dict__.update(kwargs)
0.63 query.py(1327):         return obj
0.63 query.py(1243):         clone._db = alias
0.63 query.py(1244):         return clone
0.63 query.py(451):         obj = self.model(**kwargs)
0.63 query.py(452):         self._for_write = True
0.63 query.py(453):         obj.save(force_insert=True, using=self.db)
0.63 query.py(1273):         if self._for_write:
0.63 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.63 query.py(179):         self.model = model
0.63 query.py(180):         self._db = using
0.63 query.py(181):         self._hints = hints or {}
0.63 query.py(182):         self._query = query or sql.Query(self.model)
0.63 query.py(183):         self._result_cache = None
0.63 query.py(184):         self._sticky_filter = False
0.63 query.py(185):         self._for_write = False
0.63 query.py(186):         self._prefetch_related_lookups = ()
0.63 query.py(187):         self._prefetch_done = False
0.63 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.63 query.py(189):         self._iterable_class = ModelIterable
0.63 query.py(190):         self._fields = None
0.63 query.py(191):         self._defer_next_filter = False
0.63 query.py(192):         self._deferred_filter = None
0.63 query.py(1286):         self._for_write = True
0.63 query.py(1287):         if using is None:
0.63 query.py(1289):         query = sql.InsertQuery(self.model, ignore_conflicts=ignore_conflicts)
0.63 query.py(1290):         query.insert_values(fields, objs, raw=raw)
0.63 query.py(1291):         return query.get_compiler(using=using).execute_sql(returning_fields)
0.63 query.py(454):         return obj
 OK
0.63 query.py(179):         self.model = model
0.63 query.py(180):         self._db = using
0.63 query.py(181):         self._hints = hints or {}
0.63 query.py(182):         self._query = query or sql.Query(self.model)
0.63 query.py(183):         self._result_cache = None
0.63 query.py(184):         self._sticky_filter = False
0.63 query.py(185):         self._for_write = False
0.63 query.py(186):         self._prefetch_related_lookups = ()
0.63 query.py(187):         self._prefetch_done = False
0.63 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.63 query.py(189):         self._iterable_class = ModelIterable
0.63 query.py(190):         self._fields = None
0.63 query.py(191):         self._defer_next_filter = False
0.63 query.py(192):         self._deferred_filter = None
0.63 query.py(1242):         clone = self._chain()
0.63 query.py(1322):         obj = self._clone()
0.63 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.63 query.py(196):         if self._deferred_filter:
0.63 query.py(200):         return self._query
0.63 query.py(179):         self.model = model
0.63 query.py(180):         self._db = using
0.63 query.py(181):         self._hints = hints or {}
0.63 query.py(182):         self._query = query or sql.Query(self.model)
0.63 query.py(183):         self._result_cache = None
0.63 query.py(184):         self._sticky_filter = False
0.63 query.py(185):         self._for_write = False
0.63 query.py(186):         self._prefetch_related_lookups = ()
0.63 query.py(187):         self._prefetch_done = False
0.63 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.63 query.py(189):         self._iterable_class = ModelIterable
0.63 query.py(190):         self._fields = None
0.63 query.py(191):         self._defer_next_filter = False
0.63 query.py(192):         self._deferred_filter = None
0.63 query.py(1335):         c._sticky_filter = self._sticky_filter
0.63 query.py(1336):         c._for_write = self._for_write
0.63 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.63 query.py(1338):         c._known_related_objects = self._known_related_objects
0.63 query.py(1339):         c._iterable_class = self._iterable_class
0.63 query.py(1340):         c._fields = self._fields
0.63 query.py(1341):         return c
0.63 query.py(1323):         if obj._sticky_filter:
0.63 query.py(1326):         obj.__dict__.update(kwargs)
0.63 query.py(1327):         return obj
0.63 query.py(1243):         clone._db = alias
0.63 query.py(1244):         return clone
0.63 query.py(280):         self._fetch_all()
0.63 query.py(1344):         if self._result_cache is None:
0.63 query.py(1345):             self._result_cache = list(self._iterable_class(self))
0.63 query.py(37):         self.queryset = queryset
0.63 query.py(38):         self.chunked_fetch = chunked_fetch
0.63 query.py(39):         self.chunk_size = chunk_size
0.63 query.py(46):         queryset = self.queryset
0.63 query.py(47):         db = queryset.db
0.63 query.py(1273):         if self._for_write:
0.63 query.py(1275):         return self._db or router.db_for_read(self.model, **self._hints)
0.63 query.py(48):         compiler = queryset.query.get_compiler(using=db)
0.63 query.py(196):         if self._deferred_filter:
0.63 query.py(200):         return self._query
0.63 query.py(51):         results = compiler.execute_sql(chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size)
0.63 query.py(52):         select, klass_info, annotation_col_map = (compiler.select, compiler.klass_info,
0.63 query.py(53):                                                   compiler.annotation_col_map)
0.63 query.py(52):         select, klass_info, annotation_col_map = (compiler.select, compiler.klass_info,
0.63 query.py(54):         model_cls = klass_info['model']
0.63 query.py(55):         select_fields = klass_info['select_fields']
0.63 query.py(56):         model_fields_start, model_fields_end = select_fields[0], select_fields[-1] + 1
0.63 query.py(57):         init_list = [f[0].target.attname
0.63 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.63 query.py(57):         init_list = [f[0].target.attname
0.63 query.py(57):         init_list = [f[0].target.attname
0.63 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.63 query.py(57):         init_list = [f[0].target.attname
0.63 query.py(57):         init_list = [f[0].target.attname
0.63 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.63 query.py(57):         init_list = [f[0].target.attname
0.63 query.py(57):         init_list = [f[0].target.attname
0.63 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.63 query.py(57):         init_list = [f[0].target.attname
0.63 query.py(57):         init_list = [f[0].target.attname
0.63 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.63 query.py(57):         init_list = [f[0].target.attname
0.63 query.py(57):         init_list = [f[0].target.attname
0.63 query.py(59):         related_populators = get_related_populators(klass_info, select, db)
0.63 query.py(2030):     iterators = []
0.63 query.py(2031):     related_klass_infos = klass_info.get('related_klass_infos', [])
0.63 query.py(2032):     for rel_klass_info in related_klass_infos:
0.63 query.py(2035):     return iterators
0.63 query.py(60):         known_related_objects = [
0.63 query.py(66):             ])) for field, related_objs in queryset._known_related_objects.items()
0.63 query.py(60):         known_related_objects = [
0.63 query.py(60):         known_related_objects = [
0.63 query.py(68):         for row in compiler.results_iter(results):
0.63 query.py(69):             obj = model_cls.from_db(db, init_list, row[model_fields_start:model_fields_end])
0.63 query.py(70):             for rel_populator in related_populators:
0.63 query.py(72):             if annotation_col_map:
0.63 query.py(77):             for field, rel_objs, rel_getter in known_related_objects:
0.63 query.py(89):             yield obj
0.63 query.py(68):         for row in compiler.results_iter(results):
0.63 query.py(69):             obj = model_cls.from_db(db, init_list, row[model_fields_start:model_fields_end])
0.63 query.py(70):             for rel_populator in related_populators:
0.63 query.py(72):             if annotation_col_map:
0.63 query.py(77):             for field, rel_objs, rel_getter in known_related_objects:
0.63 query.py(89):             yield obj
0.63 query.py(68):         for row in compiler.results_iter(results):
0.63 query.py(69):             obj = model_cls.from_db(db, init_list, row[model_fields_start:model_fields_end])
0.63 query.py(70):             for rel_populator in related_populators:
0.63 query.py(72):             if annotation_col_map:
0.63 query.py(77):             for field, rel_objs, rel_getter in known_related_objects:
0.63 query.py(89):             yield obj
0.63 query.py(68):         for row in compiler.results_iter(results):
0.63 query.py(69):             obj = model_cls.from_db(db, init_list, row[model_fields_start:model_fields_end])
0.63 query.py(70):             for rel_populator in related_populators:
0.63 query.py(72):             if annotation_col_map:
0.63 query.py(77):             for field, rel_objs, rel_getter in known_related_objects:
0.63 query.py(89):             yield obj
0.63 query.py(68):         for row in compiler.results_iter(results):
0.63 query.py(69):             obj = model_cls.from_db(db, init_list, row[model_fields_start:model_fields_end])
0.63 query.py(70):             for rel_populator in related_populators:
0.63 query.py(72):             if annotation_col_map:
0.63 query.py(77):             for field, rel_objs, rel_getter in known_related_objects:
0.63 query.py(89):             yield obj
0.63 query.py(68):         for row in compiler.results_iter(results):
0.63 query.py(1346):         if self._prefetch_related_lookups and not self._prefetch_done:
0.63 query.py(281):         return iter(self._result_cache)
0.65 query.py(179):         self.model = model
0.65 query.py(180):         self._db = using
0.65 query.py(181):         self._hints = hints or {}
0.65 query.py(182):         self._query = query or sql.Query(self.model)
0.65 query.py(183):         self._result_cache = None
0.65 query.py(184):         self._sticky_filter = False
0.65 query.py(185):         self._for_write = False
0.65 query.py(186):         self._prefetch_related_lookups = ()
0.65 query.py(187):         self._prefetch_done = False
0.65 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.65 query.py(189):         self._iterable_class = ModelIterable
0.65 query.py(190):         self._fields = None
0.65 query.py(191):         self._defer_next_filter = False
0.65 query.py(192):         self._deferred_filter = None
0.65 query.py(1242):         clone = self._chain()
0.65 query.py(1322):         obj = self._clone()
0.65 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.65 query.py(196):         if self._deferred_filter:
0.65 query.py(200):         return self._query
0.65 query.py(179):         self.model = model
0.65 query.py(180):         self._db = using
0.65 query.py(181):         self._hints = hints or {}
0.65 query.py(182):         self._query = query or sql.Query(self.model)
0.65 query.py(183):         self._result_cache = None
0.65 query.py(184):         self._sticky_filter = False
0.65 query.py(185):         self._for_write = False
0.65 query.py(186):         self._prefetch_related_lookups = ()
0.65 query.py(187):         self._prefetch_done = False
0.65 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.65 query.py(189):         self._iterable_class = ModelIterable
0.65 query.py(190):         self._fields = None
0.65 query.py(191):         self._defer_next_filter = False
0.65 query.py(192):         self._deferred_filter = None
0.65 query.py(1335):         c._sticky_filter = self._sticky_filter
0.65 query.py(1336):         c._for_write = self._for_write
0.65 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.65 query.py(1338):         c._known_related_objects = self._known_related_objects
0.65 query.py(1339):         c._iterable_class = self._iterable_class
0.65 query.py(1340):         c._fields = self._fields
0.65 query.py(1341):         return c
0.65 query.py(1323):         if obj._sticky_filter:
0.65 query.py(1326):         obj.__dict__.update(kwargs)
0.65 query.py(1327):         return obj
0.65 query.py(1243):         clone._db = alias
0.65 query.py(1244):         return clone
0.65 query.py(963):         self._not_support_combined_queries('filter')
0.65 query.py(1418):         if self.query.combinator:
0.65 query.py(196):         if self._deferred_filter:
0.65 query.py(200):         return self._query
0.65 query.py(964):         return self._filter_or_exclude(False, args, kwargs)
0.65 query.py(975):         if (args or kwargs) and self.query.is_sliced:
0.65 query.py(196):         if self._deferred_filter:
0.65 query.py(200):         return self._query
0.65 query.py(977):         clone = self._chain()
0.65 query.py(1322):         obj = self._clone()
0.65 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.65 query.py(196):         if self._deferred_filter:
0.65 query.py(200):         return self._query
0.65 query.py(179):         self.model = model
0.65 query.py(180):         self._db = using
0.65 query.py(181):         self._hints = hints or {}
0.65 query.py(182):         self._query = query or sql.Query(self.model)
0.65 query.py(183):         self._result_cache = None
0.65 query.py(184):         self._sticky_filter = False
0.65 query.py(185):         self._for_write = False
0.65 query.py(186):         self._prefetch_related_lookups = ()
0.65 query.py(187):         self._prefetch_done = False
0.65 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.65 query.py(189):         self._iterable_class = ModelIterable
0.65 query.py(190):         self._fields = None
0.65 query.py(191):         self._defer_next_filter = False
0.65 query.py(192):         self._deferred_filter = None
0.65 query.py(1335):         c._sticky_filter = self._sticky_filter
0.65 query.py(1336):         c._for_write = self._for_write
0.65 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.65 query.py(1338):         c._known_related_objects = self._known_related_objects
0.65 query.py(1339):         c._iterable_class = self._iterable_class
0.65 query.py(1340):         c._fields = self._fields
0.65 query.py(1341):         return c
0.65 query.py(1323):         if obj._sticky_filter:
0.65 query.py(1326):         obj.__dict__.update(kwargs)
0.65 query.py(1327):         return obj
0.65 query.py(978):         if self._defer_next_filter:
0.65 query.py(982):             clone._filter_or_exclude_inplace(negate, args, kwargs)
0.65 query.py(986):         if negate:
0.65 query.py(989):             self._query.add_q(Q(*args, **kwargs))
0.65 query.py(983):         return clone
0.65 query.py(280):         self._fetch_all()
0.65 query.py(1344):         if self._result_cache is None:
0.65 query.py(1345):             self._result_cache = list(self._iterable_class(self))
0.65 query.py(37):         self.queryset = queryset
0.65 query.py(38):         self.chunked_fetch = chunked_fetch
0.65 query.py(39):         self.chunk_size = chunk_size
0.65 query.py(46):         queryset = self.queryset
0.65 query.py(47):         db = queryset.db
0.65 query.py(1273):         if self._for_write:
0.65 query.py(1275):         return self._db or router.db_for_read(self.model, **self._hints)
0.65 query.py(48):         compiler = queryset.query.get_compiler(using=db)
0.65 query.py(196):         if self._deferred_filter:
0.65 query.py(200):         return self._query
0.65 query.py(51):         results = compiler.execute_sql(chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size)
0.65 query.py(52):         select, klass_info, annotation_col_map = (compiler.select, compiler.klass_info,
0.65 query.py(53):                                                   compiler.annotation_col_map)
0.65 query.py(52):         select, klass_info, annotation_col_map = (compiler.select, compiler.klass_info,
0.65 query.py(54):         model_cls = klass_info['model']
0.65 query.py(55):         select_fields = klass_info['select_fields']
0.65 query.py(56):         model_fields_start, model_fields_end = select_fields[0], select_fields[-1] + 1
0.65 query.py(57):         init_list = [f[0].target.attname
0.65 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.65 query.py(57):         init_list = [f[0].target.attname
0.65 query.py(57):         init_list = [f[0].target.attname
0.65 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.65 query.py(57):         init_list = [f[0].target.attname
0.65 query.py(57):         init_list = [f[0].target.attname
0.65 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.65 query.py(57):         init_list = [f[0].target.attname
0.65 query.py(57):         init_list = [f[0].target.attname
0.65 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.65 query.py(57):         init_list = [f[0].target.attname
0.65 query.py(57):         init_list = [f[0].target.attname
0.65 query.py(59):         related_populators = get_related_populators(klass_info, select, db)
0.65 query.py(2030):     iterators = []
0.65 query.py(2031):     related_klass_infos = klass_info.get('related_klass_infos', [])
0.65 query.py(2032):     for rel_klass_info in related_klass_infos:
0.65 query.py(2035):     return iterators
0.65 query.py(60):         known_related_objects = [
0.65 query.py(66):             ])) for field, related_objs in queryset._known_related_objects.items()
0.65 query.py(60):         known_related_objects = [
0.65 query.py(60):         known_related_objects = [
0.65 query.py(68):         for row in compiler.results_iter(results):
0.65 query.py(1346):         if self._prefetch_related_lookups and not self._prefetch_done:
0.65 query.py(281):         return iter(self._result_cache)
0.65 query.py(179):         self.model = model
0.65 query.py(180):         self._db = using
0.65 query.py(181):         self._hints = hints or {}
0.65 query.py(182):         self._query = query or sql.Query(self.model)
0.65 query.py(183):         self._result_cache = None
0.65 query.py(184):         self._sticky_filter = False
0.65 query.py(185):         self._for_write = False
0.65 query.py(186):         self._prefetch_related_lookups = ()
0.65 query.py(187):         self._prefetch_done = False
0.65 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.65 query.py(189):         self._iterable_class = ModelIterable
0.65 query.py(190):         self._fields = None
0.65 query.py(191):         self._defer_next_filter = False
0.65 query.py(192):         self._deferred_filter = None
0.65 query.py(1242):         clone = self._chain()
0.65 query.py(1322):         obj = self._clone()
0.65 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.65 query.py(196):         if self._deferred_filter:
0.65 query.py(200):         return self._query
0.65 query.py(179):         self.model = model
0.65 query.py(180):         self._db = using
0.65 query.py(181):         self._hints = hints or {}
0.65 query.py(182):         self._query = query or sql.Query(self.model)
0.65 query.py(183):         self._result_cache = None
0.65 query.py(184):         self._sticky_filter = False
0.65 query.py(185):         self._for_write = False
0.65 query.py(186):         self._prefetch_related_lookups = ()
0.65 query.py(187):         self._prefetch_done = False
0.65 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.65 query.py(189):         self._iterable_class = ModelIterable
0.65 query.py(190):         self._fields = None
0.65 query.py(191):         self._defer_next_filter = False
0.65 query.py(192):         self._deferred_filter = None
0.65 query.py(1335):         c._sticky_filter = self._sticky_filter
0.65 query.py(1336):         c._for_write = self._for_write
0.65 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.65 query.py(1338):         c._known_related_objects = self._known_related_objects
0.65 query.py(1339):         c._iterable_class = self._iterable_class
0.65 query.py(1340):         c._fields = self._fields
0.65 query.py(1341):         return c
0.65 query.py(1323):         if obj._sticky_filter:
0.65 query.py(1326):         obj.__dict__.update(kwargs)
0.65 query.py(1327):         return obj
0.65 query.py(1243):         clone._db = alias
0.65 query.py(1244):         return clone
0.65 query.py(483):         assert batch_size is None or batch_size > 0
0.65 query.py(488):         for parent in self.model._meta.get_parent_list():
0.65 query.py(491):         if not objs:
0.65 query.py(493):         self._for_write = True
0.65 query.py(494):         connection = connections[self.db]
0.65 query.py(1273):         if self._for_write:
0.65 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.65 query.py(495):         opts = self.model._meta
0.65 query.py(496):         fields = opts.concrete_fields
0.65 query.py(497):         objs = list(objs)
0.65 query.py(498):         self._prepare_for_bulk_create(objs)
0.65 query.py(457):         for obj in objs:
0.65 query.py(458):             if obj.pk is None:
0.65 query.py(460):                 obj.pk = obj._meta.pk.get_pk_value_on_save(obj)
0.65 query.py(461):             obj._prepare_related_fields_for_save(operation_name='bulk_create')
0.65 query.py(457):         for obj in objs:
0.65 query.py(499):         with transaction.atomic(using=self.db, savepoint=False):
0.65 query.py(1273):         if self._for_write:
0.65 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.65 query.py(500):             objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)
0.65 query.py(500):             objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)
0.65 query.py(501):             if objs_with_pk:
0.65 query.py(512):             if objs_without_pk:
0.65 query.py(513):                 fields = [f for f in fields if not isinstance(f, AutoField)]
0.65 query.py(513):                 fields = [f for f in fields if not isinstance(f, AutoField)]
0.65 query.py(513):                 fields = [f for f in fields if not isinstance(f, AutoField)]
0.65 query.py(513):                 fields = [f for f in fields if not isinstance(f, AutoField)]
0.65 query.py(513):                 fields = [f for f in fields if not isinstance(f, AutoField)]
0.65 query.py(514):                 returned_columns = self._batched_insert(
0.65 query.py(515):                     objs_without_pk, fields, batch_size, ignore_conflicts=ignore_conflicts,
0.65 query.py(514):                 returned_columns = self._batched_insert(
0.65 query.py(1299):         if ignore_conflicts and not connections[self.db].features.supports_ignore_conflicts:
0.65 query.py(1301):         ops = connections[self.db].ops
0.65 query.py(1273):         if self._for_write:
0.65 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.65 query.py(1302):         max_batch_size = max(ops.bulk_batch_size(fields, objs), 1)
0.65 query.py(1303):         batch_size = min(batch_size, max_batch_size) if batch_size else max_batch_size
0.65 query.py(1304):         inserted_rows = []
0.65 query.py(1305):         bulk_return = connections[self.db].features.can_return_rows_from_bulk_insert
0.65 query.py(1273):         if self._for_write:
0.65 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.65 query.py(1306):         for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:
0.65 query.py(1306):         for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:
0.65 query.py(1306):         for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:
0.65 query.py(1307):             if bulk_return and not ignore_conflicts:
0.65 query.py(1308):                 inserted_rows.extend(self._insert(
0.65 query.py(1309):                     item, fields=fields, using=self.db,
0.65 query.py(1273):         if self._for_write:
0.65 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.65 query.py(1310):                     returning_fields=self.model._meta.db_returning_fields,
0.65 query.py(1311):                     ignore_conflicts=ignore_conflicts,
0.65 query.py(1308):                 inserted_rows.extend(self._insert(
0.65 query.py(1286):         self._for_write = True
0.65 query.py(1287):         if using is None:
0.65 query.py(1289):         query = sql.InsertQuery(self.model, ignore_conflicts=ignore_conflicts)
0.65 query.py(1290):         query.insert_values(fields, objs, raw=raw)
0.65 query.py(1291):         return query.get_compiler(using=using).execute_sql(returning_fields)
0.65 query.py(1306):         for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:
0.65 query.py(1315):         return inserted_rows
0.65 query.py(517):                 if connection.features.can_return_rows_from_bulk_insert and not ignore_conflicts:
0.65 query.py(518):                     assert len(returned_columns) == len(objs_without_pk)
0.65 query.py(519):                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):
0.65 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.65 query.py(521):                         setattr(obj_without_pk, field.attname, result)
0.65 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.65 query.py(522):                     obj_without_pk._state.adding = False
0.65 query.py(523):                     obj_without_pk._state.db = self.db
0.65 query.py(1273):         if self._for_write:
0.65 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.65 query.py(519):                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):
0.65 query.py(525):         return objs
0.65 query.py(179):         self.model = model
0.65 query.py(180):         self._db = using
0.65 query.py(181):         self._hints = hints or {}
0.65 query.py(182):         self._query = query or sql.Query(self.model)
0.65 query.py(183):         self._result_cache = None
0.65 query.py(184):         self._sticky_filter = False
0.65 query.py(185):         self._for_write = False
0.65 query.py(186):         self._prefetch_related_lookups = ()
0.65 query.py(187):         self._prefetch_done = False
0.65 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.65 query.py(189):         self._iterable_class = ModelIterable
0.65 query.py(190):         self._fields = None
0.65 query.py(191):         self._defer_next_filter = False
0.65 query.py(192):         self._deferred_filter = None
0.65 query.py(1242):         clone = self._chain()
0.65 query.py(1322):         obj = self._clone()
0.65 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.65 query.py(196):         if self._deferred_filter:
0.65 query.py(200):         return self._query
0.65 query.py(179):         self.model = model
0.65 query.py(180):         self._db = using
0.65 query.py(181):         self._hints = hints or {}
0.65 query.py(182):         self._query = query or sql.Query(self.model)
0.65 query.py(183):         self._result_cache = None
0.65 query.py(184):         self._sticky_filter = False
0.65 query.py(185):         self._for_write = False
0.65 query.py(186):         self._prefetch_related_lookups = ()
0.65 query.py(187):         self._prefetch_done = False
0.65 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.65 query.py(189):         self._iterable_class = ModelIterable
0.65 query.py(190):         self._fields = None
0.65 query.py(191):         self._defer_next_filter = False
0.65 query.py(192):         self._deferred_filter = None
0.65 query.py(1335):         c._sticky_filter = self._sticky_filter
0.65 query.py(1336):         c._for_write = self._for_write
0.65 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.65 query.py(1338):         c._known_related_objects = self._known_related_objects
0.65 query.py(1339):         c._iterable_class = self._iterable_class
0.65 query.py(1340):         c._fields = self._fields
0.65 query.py(1341):         return c
0.65 query.py(1323):         if obj._sticky_filter:
0.65 query.py(1326):         obj.__dict__.update(kwargs)
0.65 query.py(1327):         return obj
0.65 query.py(1243):         clone._db = alias
0.65 query.py(1244):         return clone
0.65 query.py(963):         self._not_support_combined_queries('filter')
0.65 query.py(1418):         if self.query.combinator:
0.65 query.py(196):         if self._deferred_filter:
0.65 query.py(200):         return self._query
0.65 query.py(964):         return self._filter_or_exclude(False, args, kwargs)
0.65 query.py(975):         if (args or kwargs) and self.query.is_sliced:
0.65 query.py(196):         if self._deferred_filter:
0.65 query.py(200):         return self._query
0.65 query.py(977):         clone = self._chain()
0.65 query.py(1322):         obj = self._clone()
0.65 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.65 query.py(196):         if self._deferred_filter:
0.65 query.py(200):         return self._query
0.65 query.py(179):         self.model = model
0.65 query.py(180):         self._db = using
0.65 query.py(181):         self._hints = hints or {}
0.65 query.py(182):         self._query = query or sql.Query(self.model)
0.65 query.py(183):         self._result_cache = None
0.65 query.py(184):         self._sticky_filter = False
0.65 query.py(185):         self._for_write = False
0.65 query.py(186):         self._prefetch_related_lookups = ()
0.65 query.py(187):         self._prefetch_done = False
0.65 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.65 query.py(189):         self._iterable_class = ModelIterable
0.65 query.py(190):         self._fields = None
0.65 query.py(191):         self._defer_next_filter = False
0.65 query.py(192):         self._deferred_filter = None
0.65 query.py(1335):         c._sticky_filter = self._sticky_filter
0.65 query.py(1336):         c._for_write = self._for_write
0.65 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.65 query.py(1338):         c._known_related_objects = self._known_related_objects
0.65 query.py(1339):         c._iterable_class = self._iterable_class
0.65 query.py(1340):         c._fields = self._fields
0.65 query.py(1341):         return c
0.65 query.py(1323):         if obj._sticky_filter:
0.65 query.py(1326):         obj.__dict__.update(kwargs)
0.65 query.py(1327):         return obj
0.65 query.py(978):         if self._defer_next_filter:
0.65 query.py(982):             clone._filter_or_exclude_inplace(negate, args, kwargs)
0.65 query.py(986):         if negate:
0.65 query.py(989):             self._query.add_q(Q(*args, **kwargs))
0.65 query.py(983):         return clone
0.65 query.py(280):         self._fetch_all()
0.65 query.py(1344):         if self._result_cache is None:
0.65 query.py(1345):             self._result_cache = list(self._iterable_class(self))
0.65 query.py(37):         self.queryset = queryset
0.65 query.py(38):         self.chunked_fetch = chunked_fetch
0.65 query.py(39):         self.chunk_size = chunk_size
0.65 query.py(46):         queryset = self.queryset
0.65 query.py(47):         db = queryset.db
0.65 query.py(1273):         if self._for_write:
0.65 query.py(1275):         return self._db or router.db_for_read(self.model, **self._hints)
0.65 query.py(48):         compiler = queryset.query.get_compiler(using=db)
0.65 query.py(196):         if self._deferred_filter:
0.65 query.py(200):         return self._query
0.65 query.py(51):         results = compiler.execute_sql(chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size)
0.65 query.py(52):         select, klass_info, annotation_col_map = (compiler.select, compiler.klass_info,
0.65 query.py(53):                                                   compiler.annotation_col_map)
0.65 query.py(52):         select, klass_info, annotation_col_map = (compiler.select, compiler.klass_info,
0.65 query.py(54):         model_cls = klass_info['model']
0.65 query.py(55):         select_fields = klass_info['select_fields']
0.65 query.py(56):         model_fields_start, model_fields_end = select_fields[0], select_fields[-1] + 1
0.65 query.py(57):         init_list = [f[0].target.attname
0.65 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.65 query.py(57):         init_list = [f[0].target.attname
0.65 query.py(57):         init_list = [f[0].target.attname
0.65 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.65 query.py(57):         init_list = [f[0].target.attname
0.65 query.py(57):         init_list = [f[0].target.attname
0.65 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.65 query.py(57):         init_list = [f[0].target.attname
0.65 query.py(57):         init_list = [f[0].target.attname
0.65 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.65 query.py(57):         init_list = [f[0].target.attname
0.65 query.py(57):         init_list = [f[0].target.attname
0.65 query.py(59):         related_populators = get_related_populators(klass_info, select, db)
0.65 query.py(2030):     iterators = []
0.65 query.py(2031):     related_klass_infos = klass_info.get('related_klass_infos', [])
0.65 query.py(2032):     for rel_klass_info in related_klass_infos:
0.65 query.py(2035):     return iterators
0.65 query.py(60):         known_related_objects = [
0.65 query.py(66):             ])) for field, related_objs in queryset._known_related_objects.items()
0.65 query.py(60):         known_related_objects = [
0.65 query.py(60):         known_related_objects = [
0.65 query.py(68):         for row in compiler.results_iter(results):
0.65 query.py(69):             obj = model_cls.from_db(db, init_list, row[model_fields_start:model_fields_end])
0.65 query.py(70):             for rel_populator in related_populators:
0.65 query.py(72):             if annotation_col_map:
0.65 query.py(77):             for field, rel_objs, rel_getter in known_related_objects:
0.65 query.py(89):             yield obj
0.65 query.py(68):         for row in compiler.results_iter(results):
0.65 query.py(1346):         if self._prefetch_related_lookups and not self._prefetch_done:
0.65 query.py(281):         return iter(self._result_cache)
0.65 query.py(179):         self.model = model
0.65 query.py(180):         self._db = using
0.65 query.py(181):         self._hints = hints or {}
0.65 query.py(182):         self._query = query or sql.Query(self.model)
0.65 query.py(183):         self._result_cache = None
0.65 query.py(184):         self._sticky_filter = False
0.65 query.py(185):         self._for_write = False
0.65 query.py(186):         self._prefetch_related_lookups = ()
0.65 query.py(187):         self._prefetch_done = False
0.65 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.65 query.py(189):         self._iterable_class = ModelIterable
0.65 query.py(190):         self._fields = None
0.65 query.py(191):         self._defer_next_filter = False
0.65 query.py(192):         self._deferred_filter = None
0.65 query.py(1242):         clone = self._chain()
0.65 query.py(1322):         obj = self._clone()
0.65 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.65 query.py(196):         if self._deferred_filter:
0.65 query.py(200):         return self._query
0.65 query.py(179):         self.model = model
0.65 query.py(180):         self._db = using
0.65 query.py(181):         self._hints = hints or {}
0.65 query.py(182):         self._query = query or sql.Query(self.model)
0.65 query.py(183):         self._result_cache = None
0.65 query.py(184):         self._sticky_filter = False
0.65 query.py(185):         self._for_write = False
0.65 query.py(186):         self._prefetch_related_lookups = ()
0.65 query.py(187):         self._prefetch_done = False
0.65 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.65 query.py(189):         self._iterable_class = ModelIterable
0.65 query.py(190):         self._fields = None
0.65 query.py(191):         self._defer_next_filter = False
0.65 query.py(192):         self._deferred_filter = None
0.65 query.py(1335):         c._sticky_filter = self._sticky_filter
0.65 query.py(1336):         c._for_write = self._for_write
0.65 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.65 query.py(1338):         c._known_related_objects = self._known_related_objects
0.65 query.py(1339):         c._iterable_class = self._iterable_class
0.65 query.py(1340):         c._fields = self._fields
0.65 query.py(1341):         return c
0.65 query.py(1323):         if obj._sticky_filter:
0.65 query.py(1326):         obj.__dict__.update(kwargs)
0.65 query.py(1327):         return obj
0.65 query.py(1243):         clone._db = alias
0.65 query.py(1244):         return clone
0.65 query.py(483):         assert batch_size is None or batch_size > 0
0.65 query.py(488):         for parent in self.model._meta.get_parent_list():
0.65 query.py(491):         if not objs:
0.65 query.py(492):             return objs
0.65 query.py(179):         self.model = model
0.65 query.py(180):         self._db = using
0.65 query.py(181):         self._hints = hints or {}
0.65 query.py(182):         self._query = query or sql.Query(self.model)
0.65 query.py(183):         self._result_cache = None
0.65 query.py(184):         self._sticky_filter = False
0.65 query.py(185):         self._for_write = False
0.65 query.py(186):         self._prefetch_related_lookups = ()
0.65 query.py(187):         self._prefetch_done = False
0.65 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.65 query.py(189):         self._iterable_class = ModelIterable
0.65 query.py(190):         self._fields = None
0.65 query.py(191):         self._defer_next_filter = False
0.65 query.py(192):         self._deferred_filter = None
0.65 query.py(419):         if self.query.combinator and (args or kwargs):
0.65 query.py(196):         if self._deferred_filter:
0.65 query.py(200):         return self._query
0.65 query.py(424):         clone = self._chain() if self.query.combinator else self.filter(*args, **kwargs)
0.65 query.py(196):         if self._deferred_filter:
0.65 query.py(200):         return self._query
0.65 query.py(963):         self._not_support_combined_queries('filter')
0.65 query.py(1418):         if self.query.combinator:
0.65 query.py(196):         if self._deferred_filter:
0.65 query.py(200):         return self._query
0.65 query.py(964):         return self._filter_or_exclude(False, args, kwargs)
0.65 query.py(975):         if (args or kwargs) and self.query.is_sliced:
0.65 query.py(196):         if self._deferred_filter:
0.65 query.py(200):         return self._query
0.65 query.py(977):         clone = self._chain()
0.65 query.py(1322):         obj = self._clone()
0.65 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.65 query.py(196):         if self._deferred_filter:
0.65 query.py(200):         return self._query
0.65 query.py(179):         self.model = model
0.65 query.py(180):         self._db = using
0.65 query.py(181):         self._hints = hints or {}
0.65 query.py(182):         self._query = query or sql.Query(self.model)
0.65 query.py(183):         self._result_cache = None
0.65 query.py(184):         self._sticky_filter = False
0.65 query.py(185):         self._for_write = False
0.65 query.py(186):         self._prefetch_related_lookups = ()
0.65 query.py(187):         self._prefetch_done = False
0.65 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.65 query.py(189):         self._iterable_class = ModelIterable
0.65 query.py(190):         self._fields = None
0.65 query.py(191):         self._defer_next_filter = False
0.65 query.py(192):         self._deferred_filter = None
0.65 query.py(1335):         c._sticky_filter = self._sticky_filter
0.65 query.py(1336):         c._for_write = self._for_write
0.65 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.65 query.py(1338):         c._known_related_objects = self._known_related_objects
0.65 query.py(1339):         c._iterable_class = self._iterable_class
0.65 query.py(1340):         c._fields = self._fields
0.65 query.py(1341):         return c
0.65 query.py(1323):         if obj._sticky_filter:
0.65 query.py(1326):         obj.__dict__.update(kwargs)
0.65 query.py(1327):         return obj
0.65 query.py(978):         if self._defer_next_filter:
0.65 query.py(982):             clone._filter_or_exclude_inplace(negate, args, kwargs)
0.65 query.py(986):         if negate:
0.65 query.py(989):             self._query.add_q(Q(*args, **kwargs))
0.65 query.py(983):         return clone
0.65 query.py(425):         if self.query.can_filter() and not self.query.distinct_fields:
0.65 query.py(196):         if self._deferred_filter:
0.65 query.py(200):         return self._query
0.65 query.py(196):         if self._deferred_filter:
0.65 query.py(200):         return self._query
0.65 query.py(426):             clone = clone.order_by()
0.65 query.py(1166):         if self.query.is_sliced:
0.65 query.py(196):         if self._deferred_filter:
0.65 query.py(200):         return self._query
0.65 query.py(1168):         obj = self._chain()
0.65 query.py(1322):         obj = self._clone()
0.65 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.65 query.py(196):         if self._deferred_filter:
0.65 query.py(200):         return self._query
0.65 query.py(179):         self.model = model
0.65 query.py(180):         self._db = using
0.65 query.py(181):         self._hints = hints or {}
0.65 query.py(182):         self._query = query or sql.Query(self.model)
0.65 query.py(183):         self._result_cache = None
0.65 query.py(184):         self._sticky_filter = False
0.65 query.py(185):         self._for_write = False
0.65 query.py(186):         self._prefetch_related_lookups = ()
0.65 query.py(187):         self._prefetch_done = False
0.65 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.65 query.py(189):         self._iterable_class = ModelIterable
0.65 query.py(190):         self._fields = None
0.65 query.py(191):         self._defer_next_filter = False
0.65 query.py(192):         self._deferred_filter = None
0.65 query.py(1335):         c._sticky_filter = self._sticky_filter
0.65 query.py(1336):         c._for_write = self._for_write
0.65 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.65 query.py(1338):         c._known_related_objects = self._known_related_objects
0.65 query.py(1339):         c._iterable_class = self._iterable_class
0.65 query.py(1340):         c._fields = self._fields
0.65 query.py(1341):         return c
0.65 query.py(1323):         if obj._sticky_filter:
0.65 query.py(1326):         obj.__dict__.update(kwargs)
0.65 query.py(1327):         return obj
0.65 query.py(1169):         obj.query.clear_ordering(force_empty=False)
0.65 query.py(196):         if self._deferred_filter:
0.65 query.py(200):         return self._query
0.65 query.py(1170):         obj.query.add_ordering(*field_names)
0.65 query.py(196):         if self._deferred_filter:
0.65 query.py(200):         return self._query
0.65 query.py(1171):         return obj
0.65 query.py(427):         limit = None
0.65 query.py(428):         if not clone.query.select_for_update or connections[clone.db].features.supports_select_for_update_with_limit:
0.65 query.py(196):         if self._deferred_filter:
0.65 query.py(200):         return self._query
0.65 query.py(429):             limit = MAX_GET_RESULTS
0.65 query.py(430):             clone.query.set_limits(high=limit)
0.65 query.py(196):         if self._deferred_filter:
0.65 query.py(200):         return self._query
0.65 query.py(431):         num = len(clone)
0.65 query.py(262):         self._fetch_all()
0.65 query.py(1344):         if self._result_cache is None:
0.65 query.py(1345):             self._result_cache = list(self._iterable_class(self))
0.65 query.py(37):         self.queryset = queryset
0.65 query.py(38):         self.chunked_fetch = chunked_fetch
0.65 query.py(39):         self.chunk_size = chunk_size
0.65 query.py(46):         queryset = self.queryset
0.65 query.py(47):         db = queryset.db
0.65 query.py(1273):         if self._for_write:
0.65 query.py(1275):         return self._db or router.db_for_read(self.model, **self._hints)
0.65 query.py(48):         compiler = queryset.query.get_compiler(using=db)
0.65 query.py(196):         if self._deferred_filter:
0.65 query.py(200):         return self._query
0.65 query.py(51):         results = compiler.execute_sql(chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size)
0.65 query.py(52):         select, klass_info, annotation_col_map = (compiler.select, compiler.klass_info,
0.65 query.py(53):                                                   compiler.annotation_col_map)
0.65 query.py(52):         select, klass_info, annotation_col_map = (compiler.select, compiler.klass_info,
0.65 query.py(54):         model_cls = klass_info['model']
0.65 query.py(55):         select_fields = klass_info['select_fields']
0.65 query.py(56):         model_fields_start, model_fields_end = select_fields[0], select_fields[-1] + 1
0.65 query.py(57):         init_list = [f[0].target.attname
0.65 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.65 query.py(57):         init_list = [f[0].target.attname
0.65 query.py(57):         init_list = [f[0].target.attname
0.65 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.65 query.py(57):         init_list = [f[0].target.attname
0.65 query.py(57):         init_list = [f[0].target.attname
0.65 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.65 query.py(57):         init_list = [f[0].target.attname
0.65 query.py(57):         init_list = [f[0].target.attname
0.65 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.65 query.py(57):         init_list = [f[0].target.attname
0.65 query.py(57):         init_list = [f[0].target.attname
0.65 query.py(59):         related_populators = get_related_populators(klass_info, select, db)
0.65 query.py(2030):     iterators = []
0.65 query.py(2031):     related_klass_infos = klass_info.get('related_klass_infos', [])
0.66 query.py(2032):     for rel_klass_info in related_klass_infos:
0.66 query.py(2035):     return iterators
0.66 query.py(60):         known_related_objects = [
0.66 query.py(66):             ])) for field, related_objs in queryset._known_related_objects.items()
0.66 query.py(60):         known_related_objects = [
0.66 query.py(60):         known_related_objects = [
0.66 query.py(68):         for row in compiler.results_iter(results):
0.66 query.py(69):             obj = model_cls.from_db(db, init_list, row[model_fields_start:model_fields_end])
0.66 query.py(70):             for rel_populator in related_populators:
0.66 query.py(72):             if annotation_col_map:
0.66 query.py(77):             for field, rel_objs, rel_getter in known_related_objects:
0.66 query.py(89):             yield obj
0.66 query.py(68):         for row in compiler.results_iter(results):
0.66 query.py(1346):         if self._prefetch_related_lookups and not self._prefetch_done:
0.66 query.py(263):         return len(self._result_cache)
0.66 query.py(432):         if num == 1:
0.66 query.py(433):             return clone._result_cache[0]
0.66 query.py(179):         self.model = model
0.66 query.py(180):         self._db = using
0.66 query.py(181):         self._hints = hints or {}
0.66 query.py(182):         self._query = query or sql.Query(self.model)
0.66 query.py(183):         self._result_cache = None
0.66 query.py(184):         self._sticky_filter = False
0.66 query.py(185):         self._for_write = False
0.66 query.py(186):         self._prefetch_related_lookups = ()
0.66 query.py(187):         self._prefetch_done = False
0.66 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.66 query.py(189):         self._iterable_class = ModelIterable
0.66 query.py(190):         self._fields = None
0.66 query.py(191):         self._defer_next_filter = False
0.66 query.py(192):         self._deferred_filter = None
0.66 query.py(1242):         clone = self._chain()
0.66 query.py(1322):         obj = self._clone()
0.66 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(179):         self.model = model
0.66 query.py(180):         self._db = using
0.66 query.py(181):         self._hints = hints or {}
0.66 query.py(182):         self._query = query or sql.Query(self.model)
0.66 query.py(183):         self._result_cache = None
0.66 query.py(184):         self._sticky_filter = False
0.66 query.py(185):         self._for_write = False
0.66 query.py(186):         self._prefetch_related_lookups = ()
0.66 query.py(187):         self._prefetch_done = False
0.66 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.66 query.py(189):         self._iterable_class = ModelIterable
0.66 query.py(190):         self._fields = None
0.66 query.py(191):         self._defer_next_filter = False
0.66 query.py(192):         self._deferred_filter = None
0.66 query.py(1335):         c._sticky_filter = self._sticky_filter
0.66 query.py(1336):         c._for_write = self._for_write
0.66 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.66 query.py(1338):         c._known_related_objects = self._known_related_objects
0.66 query.py(1339):         c._iterable_class = self._iterable_class
0.66 query.py(1340):         c._fields = self._fields
0.66 query.py(1341):         return c
0.66 query.py(1323):         if obj._sticky_filter:
0.66 query.py(1326):         obj.__dict__.update(kwargs)
0.66 query.py(1327):         return obj
0.66 query.py(1243):         clone._db = alias
0.66 query.py(1244):         return clone
0.66 query.py(963):         self._not_support_combined_queries('filter')
0.66 query.py(1418):         if self.query.combinator:
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(964):         return self._filter_or_exclude(False, args, kwargs)
0.66 query.py(975):         if (args or kwargs) and self.query.is_sliced:
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(977):         clone = self._chain()
0.66 query.py(1322):         obj = self._clone()
0.66 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(179):         self.model = model
0.66 query.py(180):         self._db = using
0.66 query.py(181):         self._hints = hints or {}
0.66 query.py(182):         self._query = query or sql.Query(self.model)
0.66 query.py(183):         self._result_cache = None
0.66 query.py(184):         self._sticky_filter = False
0.66 query.py(185):         self._for_write = False
0.66 query.py(186):         self._prefetch_related_lookups = ()
0.66 query.py(187):         self._prefetch_done = False
0.66 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.66 query.py(189):         self._iterable_class = ModelIterable
0.66 query.py(190):         self._fields = None
0.66 query.py(191):         self._defer_next_filter = False
0.66 query.py(192):         self._deferred_filter = None
0.66 query.py(1335):         c._sticky_filter = self._sticky_filter
0.66 query.py(1336):         c._for_write = self._for_write
0.66 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.66 query.py(1338):         c._known_related_objects = self._known_related_objects
0.66 query.py(1339):         c._iterable_class = self._iterable_class
0.66 query.py(1340):         c._fields = self._fields
0.66 query.py(1341):         return c
0.66 query.py(1323):         if obj._sticky_filter:
0.66 query.py(1326):         obj.__dict__.update(kwargs)
0.66 query.py(1327):         return obj
0.66 query.py(978):         if self._defer_next_filter:
0.66 query.py(982):             clone._filter_or_exclude_inplace(negate, args, kwargs)
0.66 query.py(986):         if negate:
0.66 query.py(989):             self._query.add_q(Q(*args, **kwargs))
0.66 query.py(983):         return clone
0.66 query.py(868):         if flat and named:
0.66 query.py(870):         if flat and len(fields) > 1:
0.66 query.py(873):         field_names = {f for f in fields if not hasattr(f, 'resolve_expression')}
0.66 query.py(873):         field_names = {f for f in fields if not hasattr(f, 'resolve_expression')}
0.66 query.py(873):         field_names = {f for f in fields if not hasattr(f, 'resolve_expression')}
0.66 query.py(873):         field_names = {f for f in fields if not hasattr(f, 'resolve_expression')}
0.66 query.py(874):         _fields = []
0.66 query.py(875):         expressions = {}
0.66 query.py(876):         counter = 1
0.66 query.py(877):         for field in fields:
0.66 query.py(878):             if hasattr(field, 'resolve_expression'):
0.66 query.py(888):                 _fields.append(field)
0.66 query.py(877):         for field in fields:
0.66 query.py(878):             if hasattr(field, 'resolve_expression'):
0.66 query.py(888):                 _fields.append(field)
0.66 query.py(877):         for field in fields:
0.66 query.py(890):         clone = self._values(*_fields, **expressions)
0.66 query.py(854):         clone = self._chain()
0.66 query.py(1322):         obj = self._clone()
0.66 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(179):         self.model = model
0.66 query.py(180):         self._db = using
0.66 query.py(181):         self._hints = hints or {}
0.66 query.py(182):         self._query = query or sql.Query(self.model)
0.66 query.py(183):         self._result_cache = None
0.66 query.py(184):         self._sticky_filter = False
0.66 query.py(185):         self._for_write = False
0.66 query.py(186):         self._prefetch_related_lookups = ()
0.66 query.py(187):         self._prefetch_done = False
0.66 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.66 query.py(189):         self._iterable_class = ModelIterable
0.66 query.py(190):         self._fields = None
0.66 query.py(191):         self._defer_next_filter = False
0.66 query.py(192):         self._deferred_filter = None
0.66 query.py(1335):         c._sticky_filter = self._sticky_filter
0.66 query.py(1336):         c._for_write = self._for_write
0.66 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.66 query.py(1338):         c._known_related_objects = self._known_related_objects
0.66 query.py(1339):         c._iterable_class = self._iterable_class
0.66 query.py(1340):         c._fields = self._fields
0.66 query.py(1341):         return c
0.66 query.py(1323):         if obj._sticky_filter:
0.66 query.py(1326):         obj.__dict__.update(kwargs)
0.66 query.py(1327):         return obj
0.66 query.py(855):         if expressions:
0.66 query.py(857):         clone._fields = fields
0.66 query.py(858):         clone.query.set_values(fields)
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(859):         return clone
0.66 query.py(892):             NamedValuesListIterable if named
0.66 query.py(893):             else FlatValuesListIterable if flat
0.66 query.py(894):             else ValuesListIterable
0.66 query.py(891):         clone._iterable_class = (
0.66 query.py(896):         return clone
0.66 query.py(280):         self._fetch_all()
0.66 query.py(1344):         if self._result_cache is None:
0.66 query.py(1345):             self._result_cache = list(self._iterable_class(self))
0.66 query.py(37):         self.queryset = queryset
0.66 query.py(38):         self.chunked_fetch = chunked_fetch
0.66 query.py(39):         self.chunk_size = chunk_size
0.66 query.py(120):         queryset = self.queryset
0.66 query.py(121):         query = queryset.query
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(122):         compiler = query.get_compiler(queryset.db)
0.66 query.py(1273):         if self._for_write:
0.66 query.py(1275):         return self._db or router.db_for_read(self.model, **self._hints)
0.66 query.py(124):         if queryset._fields:
0.66 query.py(127):                 *query.extra_select,
0.66 query.py(128):                 *query.values_select,
0.66 query.py(129):                 *query.annotation_select,
0.66 query.py(126):             names = [
0.66 query.py(131):             fields = [*queryset._fields, *(f for f in query.annotation_select if f not in queryset._fields)]
0.66 query.py(131):             fields = [*queryset._fields, *(f for f in query.annotation_select if f not in queryset._fields)]
0.66 query.py(132):             if fields != names:
0.66 query.py(140):         return compiler.results_iter(tuple_expected=True, chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size)
0.66 query.py(1346):         if self._prefetch_related_lookups and not self._prefetch_done:
0.66 query.py(281):         return iter(self._result_cache)
0.66 query.py(179):         self.model = model
0.66 query.py(180):         self._db = using
0.66 query.py(181):         self._hints = hints or {}
0.66 query.py(182):         self._query = query or sql.Query(self.model)
0.66 query.py(183):         self._result_cache = None
0.66 query.py(184):         self._sticky_filter = False
0.66 query.py(185):         self._for_write = False
0.66 query.py(186):         self._prefetch_related_lookups = ()
0.66 query.py(187):         self._prefetch_done = False
0.66 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.66 query.py(189):         self._iterable_class = ModelIterable
0.66 query.py(190):         self._fields = None
0.66 query.py(191):         self._defer_next_filter = False
0.66 query.py(192):         self._deferred_filter = None
0.66 query.py(1242):         clone = self._chain()
0.66 query.py(1322):         obj = self._clone()
0.66 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(179):         self.model = model
0.66 query.py(180):         self._db = using
0.66 query.py(181):         self._hints = hints or {}
0.66 query.py(182):         self._query = query or sql.Query(self.model)
0.66 query.py(183):         self._result_cache = None
0.66 query.py(184):         self._sticky_filter = False
0.66 query.py(185):         self._for_write = False
0.66 query.py(186):         self._prefetch_related_lookups = ()
0.66 query.py(187):         self._prefetch_done = False
0.66 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.66 query.py(189):         self._iterable_class = ModelIterable
0.66 query.py(190):         self._fields = None
0.66 query.py(191):         self._defer_next_filter = False
0.66 query.py(192):         self._deferred_filter = None
0.66 query.py(1335):         c._sticky_filter = self._sticky_filter
0.66 query.py(1336):         c._for_write = self._for_write
0.66 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.66 query.py(1338):         c._known_related_objects = self._known_related_objects
0.66 query.py(1339):         c._iterable_class = self._iterable_class
0.66 query.py(1340):         c._fields = self._fields
0.66 query.py(1341):         return c
0.66 query.py(1323):         if obj._sticky_filter:
0.66 query.py(1326):         obj.__dict__.update(kwargs)
0.66 query.py(1327):         return obj
0.66 query.py(1243):         clone._db = alias
0.66 query.py(1244):         return clone
0.66 query.py(483):         assert batch_size is None or batch_size > 0
0.66 query.py(488):         for parent in self.model._meta.get_parent_list():
0.66 query.py(491):         if not objs:
0.66 query.py(493):         self._for_write = True
0.66 query.py(494):         connection = connections[self.db]
0.66 query.py(1273):         if self._for_write:
0.66 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.66 query.py(495):         opts = self.model._meta
0.66 query.py(496):         fields = opts.concrete_fields
0.66 query.py(497):         objs = list(objs)
0.66 query.py(498):         self._prepare_for_bulk_create(objs)
0.66 query.py(457):         for obj in objs:
0.66 query.py(458):             if obj.pk is None:
0.66 query.py(460):                 obj.pk = obj._meta.pk.get_pk_value_on_save(obj)
0.66 query.py(461):             obj._prepare_related_fields_for_save(operation_name='bulk_create')
0.66 query.py(457):         for obj in objs:
0.66 query.py(458):             if obj.pk is None:
0.66 query.py(460):                 obj.pk = obj._meta.pk.get_pk_value_on_save(obj)
0.66 query.py(461):             obj._prepare_related_fields_for_save(operation_name='bulk_create')
0.66 query.py(457):         for obj in objs:
0.66 query.py(458):             if obj.pk is None:
0.66 query.py(460):                 obj.pk = obj._meta.pk.get_pk_value_on_save(obj)
0.66 query.py(461):             obj._prepare_related_fields_for_save(operation_name='bulk_create')
0.66 query.py(457):         for obj in objs:
0.66 query.py(458):             if obj.pk is None:
0.66 query.py(460):                 obj.pk = obj._meta.pk.get_pk_value_on_save(obj)
0.66 query.py(461):             obj._prepare_related_fields_for_save(operation_name='bulk_create')
0.66 query.py(457):         for obj in objs:
0.66 query.py(499):         with transaction.atomic(using=self.db, savepoint=False):
0.66 query.py(1273):         if self._for_write:
0.66 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.66 query.py(500):             objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)
0.66 query.py(500):             objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)
0.66 query.py(500):             objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)
0.66 query.py(500):             objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)
0.66 query.py(500):             objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)
0.66 query.py(501):             if objs_with_pk:
0.66 query.py(512):             if objs_without_pk:
0.66 query.py(513):                 fields = [f for f in fields if not isinstance(f, AutoField)]
0.66 query.py(513):                 fields = [f for f in fields if not isinstance(f, AutoField)]
0.66 query.py(513):                 fields = [f for f in fields if not isinstance(f, AutoField)]
0.66 query.py(513):                 fields = [f for f in fields if not isinstance(f, AutoField)]
0.66 query.py(513):                 fields = [f for f in fields if not isinstance(f, AutoField)]
0.66 query.py(513):                 fields = [f for f in fields if not isinstance(f, AutoField)]
0.66 query.py(514):                 returned_columns = self._batched_insert(
0.66 query.py(515):                     objs_without_pk, fields, batch_size, ignore_conflicts=ignore_conflicts,
0.66 query.py(514):                 returned_columns = self._batched_insert(
0.66 query.py(1299):         if ignore_conflicts and not connections[self.db].features.supports_ignore_conflicts:
0.66 query.py(1301):         ops = connections[self.db].ops
0.66 query.py(1273):         if self._for_write:
0.66 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.66 query.py(1302):         max_batch_size = max(ops.bulk_batch_size(fields, objs), 1)
0.66 query.py(1303):         batch_size = min(batch_size, max_batch_size) if batch_size else max_batch_size
0.66 query.py(1304):         inserted_rows = []
0.66 query.py(1305):         bulk_return = connections[self.db].features.can_return_rows_from_bulk_insert
0.66 query.py(1273):         if self._for_write:
0.66 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.66 query.py(1306):         for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:
0.66 query.py(1306):         for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:
0.66 query.py(1306):         for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:
0.66 query.py(1307):             if bulk_return and not ignore_conflicts:
0.66 query.py(1308):                 inserted_rows.extend(self._insert(
0.66 query.py(1309):                     item, fields=fields, using=self.db,
0.66 query.py(1273):         if self._for_write:
0.66 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.66 query.py(1310):                     returning_fields=self.model._meta.db_returning_fields,
0.66 query.py(1311):                     ignore_conflicts=ignore_conflicts,
0.66 query.py(1308):                 inserted_rows.extend(self._insert(
0.66 query.py(1286):         self._for_write = True
0.66 query.py(1287):         if using is None:
0.66 query.py(1289):         query = sql.InsertQuery(self.model, ignore_conflicts=ignore_conflicts)
0.66 query.py(1290):         query.insert_values(fields, objs, raw=raw)
0.66 query.py(1291):         return query.get_compiler(using=using).execute_sql(returning_fields)
0.66 query.py(1306):         for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:
0.66 query.py(1315):         return inserted_rows
0.66 query.py(517):                 if connection.features.can_return_rows_from_bulk_insert and not ignore_conflicts:
0.66 query.py(518):                     assert len(returned_columns) == len(objs_without_pk)
0.66 query.py(519):                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):
0.66 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.66 query.py(521):                         setattr(obj_without_pk, field.attname, result)
0.66 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.66 query.py(522):                     obj_without_pk._state.adding = False
0.66 query.py(523):                     obj_without_pk._state.db = self.db
0.66 query.py(1273):         if self._for_write:
0.66 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.66 query.py(519):                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):
0.66 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.66 query.py(521):                         setattr(obj_without_pk, field.attname, result)
0.66 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.66 query.py(522):                     obj_without_pk._state.adding = False
0.66 query.py(523):                     obj_without_pk._state.db = self.db
0.66 query.py(1273):         if self._for_write:
0.66 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.66 query.py(519):                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):
0.66 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.66 query.py(521):                         setattr(obj_without_pk, field.attname, result)
0.66 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.66 query.py(522):                     obj_without_pk._state.adding = False
0.66 query.py(523):                     obj_without_pk._state.db = self.db
0.66 query.py(1273):         if self._for_write:
0.66 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.66 query.py(519):                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):
0.66 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.66 query.py(521):                         setattr(obj_without_pk, field.attname, result)
0.66 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.66 query.py(522):                     obj_without_pk._state.adding = False
0.66 query.py(523):                     obj_without_pk._state.db = self.db
0.66 query.py(1273):         if self._for_write:
0.66 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.66 query.py(519):                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):
0.66 query.py(525):         return objs
0.66 query.py(179):         self.model = model
0.66 query.py(180):         self._db = using
0.66 query.py(181):         self._hints = hints or {}
0.66 query.py(182):         self._query = query or sql.Query(self.model)
0.66 query.py(183):         self._result_cache = None
0.66 query.py(184):         self._sticky_filter = False
0.66 query.py(185):         self._for_write = False
0.66 query.py(186):         self._prefetch_related_lookups = ()
0.66 query.py(187):         self._prefetch_done = False
0.66 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.66 query.py(189):         self._iterable_class = ModelIterable
0.66 query.py(190):         self._fields = None
0.66 query.py(191):         self._defer_next_filter = False
0.66 query.py(192):         self._deferred_filter = None
0.66 query.py(1242):         clone = self._chain()
0.66 query.py(1322):         obj = self._clone()
0.66 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(179):         self.model = model
0.66 query.py(180):         self._db = using
0.66 query.py(181):         self._hints = hints or {}
0.66 query.py(182):         self._query = query or sql.Query(self.model)
0.66 query.py(183):         self._result_cache = None
0.66 query.py(184):         self._sticky_filter = False
0.66 query.py(185):         self._for_write = False
0.66 query.py(186):         self._prefetch_related_lookups = ()
0.66 query.py(187):         self._prefetch_done = False
0.66 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.66 query.py(189):         self._iterable_class = ModelIterable
0.66 query.py(190):         self._fields = None
0.66 query.py(191):         self._defer_next_filter = False
0.66 query.py(192):         self._deferred_filter = None
0.66 query.py(1335):         c._sticky_filter = self._sticky_filter
0.66 query.py(1336):         c._for_write = self._for_write
0.66 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.66 query.py(1338):         c._known_related_objects = self._known_related_objects
0.66 query.py(1339):         c._iterable_class = self._iterable_class
0.66 query.py(1340):         c._fields = self._fields
0.66 query.py(1341):         return c
0.66 query.py(1323):         if obj._sticky_filter:
0.66 query.py(1326):         obj.__dict__.update(kwargs)
0.66 query.py(1327):         return obj
0.66 query.py(1243):         clone._db = alias
0.66 query.py(1244):         return clone
0.66 query.py(963):         self._not_support_combined_queries('filter')
0.66 query.py(1418):         if self.query.combinator:
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(964):         return self._filter_or_exclude(False, args, kwargs)
0.66 query.py(975):         if (args or kwargs) and self.query.is_sliced:
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(977):         clone = self._chain()
0.66 query.py(1322):         obj = self._clone()
0.66 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(179):         self.model = model
0.66 query.py(180):         self._db = using
0.66 query.py(181):         self._hints = hints or {}
0.66 query.py(182):         self._query = query or sql.Query(self.model)
0.66 query.py(183):         self._result_cache = None
0.66 query.py(184):         self._sticky_filter = False
0.66 query.py(185):         self._for_write = False
0.66 query.py(186):         self._prefetch_related_lookups = ()
0.66 query.py(187):         self._prefetch_done = False
0.66 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.66 query.py(189):         self._iterable_class = ModelIterable
0.66 query.py(190):         self._fields = None
0.66 query.py(191):         self._defer_next_filter = False
0.66 query.py(192):         self._deferred_filter = None
0.66 query.py(1335):         c._sticky_filter = self._sticky_filter
0.66 query.py(1336):         c._for_write = self._for_write
0.66 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.66 query.py(1338):         c._known_related_objects = self._known_related_objects
0.66 query.py(1339):         c._iterable_class = self._iterable_class
0.66 query.py(1340):         c._fields = self._fields
0.66 query.py(1341):         return c
0.66 query.py(1323):         if obj._sticky_filter:
0.66 query.py(1326):         obj.__dict__.update(kwargs)
0.66 query.py(1327):         return obj
0.66 query.py(978):         if self._defer_next_filter:
0.66 query.py(982):             clone._filter_or_exclude_inplace(negate, args, kwargs)
0.66 query.py(986):         if negate:
0.66 query.py(989):             self._query.add_q(Q(*args, **kwargs))
0.66 query.py(983):         return clone
0.66 query.py(280):         self._fetch_all()
0.66 query.py(1344):         if self._result_cache is None:
0.66 query.py(1345):             self._result_cache = list(self._iterable_class(self))
0.66 query.py(37):         self.queryset = queryset
0.66 query.py(38):         self.chunked_fetch = chunked_fetch
0.66 query.py(39):         self.chunk_size = chunk_size
0.66 query.py(46):         queryset = self.queryset
0.66 query.py(47):         db = queryset.db
0.66 query.py(1273):         if self._for_write:
0.66 query.py(1275):         return self._db or router.db_for_read(self.model, **self._hints)
0.66 query.py(48):         compiler = queryset.query.get_compiler(using=db)
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(51):         results = compiler.execute_sql(chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size)
0.66 query.py(52):         select, klass_info, annotation_col_map = (compiler.select, compiler.klass_info,
0.66 query.py(53):                                                   compiler.annotation_col_map)
0.66 query.py(52):         select, klass_info, annotation_col_map = (compiler.select, compiler.klass_info,
0.66 query.py(54):         model_cls = klass_info['model']
0.66 query.py(55):         select_fields = klass_info['select_fields']
0.66 query.py(56):         model_fields_start, model_fields_end = select_fields[0], select_fields[-1] + 1
0.66 query.py(57):         init_list = [f[0].target.attname
0.66 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.66 query.py(57):         init_list = [f[0].target.attname
0.66 query.py(57):         init_list = [f[0].target.attname
0.66 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.66 query.py(57):         init_list = [f[0].target.attname
0.66 query.py(57):         init_list = [f[0].target.attname
0.66 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.66 query.py(57):         init_list = [f[0].target.attname
0.66 query.py(57):         init_list = [f[0].target.attname
0.66 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.66 query.py(57):         init_list = [f[0].target.attname
0.66 query.py(57):         init_list = [f[0].target.attname
0.66 query.py(59):         related_populators = get_related_populators(klass_info, select, db)
0.66 query.py(2030):     iterators = []
0.66 query.py(2031):     related_klass_infos = klass_info.get('related_klass_infos', [])
0.66 query.py(2032):     for rel_klass_info in related_klass_infos:
0.66 query.py(2035):     return iterators
0.66 query.py(60):         known_related_objects = [
0.66 query.py(66):             ])) for field, related_objs in queryset._known_related_objects.items()
0.66 query.py(60):         known_related_objects = [
0.66 query.py(60):         known_related_objects = [
0.66 query.py(68):         for row in compiler.results_iter(results):
0.66 query.py(1346):         if self._prefetch_related_lookups and not self._prefetch_done:
0.66 query.py(281):         return iter(self._result_cache)
0.66 query.py(179):         self.model = model
0.66 query.py(180):         self._db = using
0.66 query.py(181):         self._hints = hints or {}
0.66 query.py(182):         self._query = query or sql.Query(self.model)
0.66 query.py(183):         self._result_cache = None
0.66 query.py(184):         self._sticky_filter = False
0.66 query.py(185):         self._for_write = False
0.66 query.py(186):         self._prefetch_related_lookups = ()
0.66 query.py(187):         self._prefetch_done = False
0.66 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.66 query.py(189):         self._iterable_class = ModelIterable
0.66 query.py(190):         self._fields = None
0.66 query.py(191):         self._defer_next_filter = False
0.66 query.py(192):         self._deferred_filter = None
0.66 query.py(1242):         clone = self._chain()
0.66 query.py(1322):         obj = self._clone()
0.66 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(179):         self.model = model
0.66 query.py(180):         self._db = using
0.66 query.py(181):         self._hints = hints or {}
0.66 query.py(182):         self._query = query or sql.Query(self.model)
0.66 query.py(183):         self._result_cache = None
0.66 query.py(184):         self._sticky_filter = False
0.66 query.py(185):         self._for_write = False
0.66 query.py(186):         self._prefetch_related_lookups = ()
0.66 query.py(187):         self._prefetch_done = False
0.66 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.66 query.py(189):         self._iterable_class = ModelIterable
0.66 query.py(190):         self._fields = None
0.66 query.py(191):         self._defer_next_filter = False
0.66 query.py(192):         self._deferred_filter = None
0.66 query.py(1335):         c._sticky_filter = self._sticky_filter
0.66 query.py(1336):         c._for_write = self._for_write
0.66 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.66 query.py(1338):         c._known_related_objects = self._known_related_objects
0.66 query.py(1339):         c._iterable_class = self._iterable_class
0.66 query.py(1340):         c._fields = self._fields
0.66 query.py(1341):         return c
0.66 query.py(1323):         if obj._sticky_filter:
0.66 query.py(1326):         obj.__dict__.update(kwargs)
0.66 query.py(1327):         return obj
0.66 query.py(1243):         clone._db = alias
0.66 query.py(1244):         return clone
0.66 query.py(483):         assert batch_size is None or batch_size > 0
0.66 query.py(488):         for parent in self.model._meta.get_parent_list():
0.66 query.py(491):         if not objs:
0.66 query.py(493):         self._for_write = True
0.66 query.py(494):         connection = connections[self.db]
0.66 query.py(1273):         if self._for_write:
0.66 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.66 query.py(495):         opts = self.model._meta
0.66 query.py(496):         fields = opts.concrete_fields
0.66 query.py(497):         objs = list(objs)
0.66 query.py(498):         self._prepare_for_bulk_create(objs)
0.66 query.py(457):         for obj in objs:
0.66 query.py(458):             if obj.pk is None:
0.66 query.py(460):                 obj.pk = obj._meta.pk.get_pk_value_on_save(obj)
0.66 query.py(461):             obj._prepare_related_fields_for_save(operation_name='bulk_create')
0.66 query.py(457):         for obj in objs:
0.66 query.py(458):             if obj.pk is None:
0.66 query.py(460):                 obj.pk = obj._meta.pk.get_pk_value_on_save(obj)
0.66 query.py(461):             obj._prepare_related_fields_for_save(operation_name='bulk_create')
0.66 query.py(457):         for obj in objs:
0.66 query.py(458):             if obj.pk is None:
0.66 query.py(460):                 obj.pk = obj._meta.pk.get_pk_value_on_save(obj)
0.66 query.py(461):             obj._prepare_related_fields_for_save(operation_name='bulk_create')
0.66 query.py(457):         for obj in objs:
0.66 query.py(499):         with transaction.atomic(using=self.db, savepoint=False):
0.66 query.py(1273):         if self._for_write:
0.66 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.66 query.py(500):             objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)
0.66 query.py(500):             objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)
0.66 query.py(500):             objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)
0.66 query.py(500):             objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)
0.66 query.py(501):             if objs_with_pk:
0.66 query.py(512):             if objs_without_pk:
0.66 query.py(513):                 fields = [f for f in fields if not isinstance(f, AutoField)]
0.66 query.py(513):                 fields = [f for f in fields if not isinstance(f, AutoField)]
0.66 query.py(513):                 fields = [f for f in fields if not isinstance(f, AutoField)]
0.66 query.py(513):                 fields = [f for f in fields if not isinstance(f, AutoField)]
0.66 query.py(513):                 fields = [f for f in fields if not isinstance(f, AutoField)]
0.66 query.py(514):                 returned_columns = self._batched_insert(
0.66 query.py(515):                     objs_without_pk, fields, batch_size, ignore_conflicts=ignore_conflicts,
0.66 query.py(514):                 returned_columns = self._batched_insert(
0.66 query.py(1299):         if ignore_conflicts and not connections[self.db].features.supports_ignore_conflicts:
0.66 query.py(1301):         ops = connections[self.db].ops
0.66 query.py(1273):         if self._for_write:
0.66 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.66 query.py(1302):         max_batch_size = max(ops.bulk_batch_size(fields, objs), 1)
0.66 query.py(1303):         batch_size = min(batch_size, max_batch_size) if batch_size else max_batch_size
0.66 query.py(1304):         inserted_rows = []
0.66 query.py(1305):         bulk_return = connections[self.db].features.can_return_rows_from_bulk_insert
0.66 query.py(1273):         if self._for_write:
0.66 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.66 query.py(1306):         for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:
0.66 query.py(1306):         for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:
0.66 query.py(1306):         for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:
0.66 query.py(1307):             if bulk_return and not ignore_conflicts:
0.66 query.py(1308):                 inserted_rows.extend(self._insert(
0.66 query.py(1309):                     item, fields=fields, using=self.db,
0.66 query.py(1273):         if self._for_write:
0.66 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.66 query.py(1310):                     returning_fields=self.model._meta.db_returning_fields,
0.66 query.py(1311):                     ignore_conflicts=ignore_conflicts,
0.66 query.py(1308):                 inserted_rows.extend(self._insert(
0.66 query.py(1286):         self._for_write = True
0.66 query.py(1287):         if using is None:
0.66 query.py(1289):         query = sql.InsertQuery(self.model, ignore_conflicts=ignore_conflicts)
0.66 query.py(1290):         query.insert_values(fields, objs, raw=raw)
0.66 query.py(1291):         return query.get_compiler(using=using).execute_sql(returning_fields)
0.66 query.py(1306):         for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:
0.66 query.py(1315):         return inserted_rows
0.66 query.py(517):                 if connection.features.can_return_rows_from_bulk_insert and not ignore_conflicts:
0.66 query.py(518):                     assert len(returned_columns) == len(objs_without_pk)
0.66 query.py(519):                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):
0.66 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.66 query.py(521):                         setattr(obj_without_pk, field.attname, result)
0.66 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.66 query.py(522):                     obj_without_pk._state.adding = False
0.66 query.py(523):                     obj_without_pk._state.db = self.db
0.66 query.py(1273):         if self._for_write:
0.66 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.66 query.py(519):                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):
0.66 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.66 query.py(521):                         setattr(obj_without_pk, field.attname, result)
0.66 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.66 query.py(522):                     obj_without_pk._state.adding = False
0.66 query.py(523):                     obj_without_pk._state.db = self.db
0.66 query.py(1273):         if self._for_write:
0.66 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.66 query.py(519):                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):
0.66 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.66 query.py(521):                         setattr(obj_without_pk, field.attname, result)
0.66 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.66 query.py(522):                     obj_without_pk._state.adding = False
0.66 query.py(523):                     obj_without_pk._state.db = self.db
0.66 query.py(1273):         if self._for_write:
0.66 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.66 query.py(519):                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):
0.66 query.py(525):         return objs
0.66 query.py(179):         self.model = model
0.66 query.py(180):         self._db = using
0.66 query.py(181):         self._hints = hints or {}
0.66 query.py(182):         self._query = query or sql.Query(self.model)
0.66 query.py(183):         self._result_cache = None
0.66 query.py(184):         self._sticky_filter = False
0.66 query.py(185):         self._for_write = False
0.66 query.py(186):         self._prefetch_related_lookups = ()
0.66 query.py(187):         self._prefetch_done = False
0.66 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.66 query.py(189):         self._iterable_class = ModelIterable
0.66 query.py(190):         self._fields = None
0.66 query.py(191):         self._defer_next_filter = False
0.66 query.py(192):         self._deferred_filter = None
0.66 query.py(1242):         clone = self._chain()
0.66 query.py(1322):         obj = self._clone()
0.66 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(179):         self.model = model
0.66 query.py(180):         self._db = using
0.66 query.py(181):         self._hints = hints or {}
0.66 query.py(182):         self._query = query or sql.Query(self.model)
0.66 query.py(183):         self._result_cache = None
0.66 query.py(184):         self._sticky_filter = False
0.66 query.py(185):         self._for_write = False
0.66 query.py(186):         self._prefetch_related_lookups = ()
0.66 query.py(187):         self._prefetch_done = False
0.66 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.66 query.py(189):         self._iterable_class = ModelIterable
0.66 query.py(190):         self._fields = None
0.66 query.py(191):         self._defer_next_filter = False
0.66 query.py(192):         self._deferred_filter = None
0.66 query.py(1335):         c._sticky_filter = self._sticky_filter
0.66 query.py(1336):         c._for_write = self._for_write
0.66 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.66 query.py(1338):         c._known_related_objects = self._known_related_objects
0.66 query.py(1339):         c._iterable_class = self._iterable_class
0.66 query.py(1340):         c._fields = self._fields
0.66 query.py(1341):         return c
0.66 query.py(1323):         if obj._sticky_filter:
0.66 query.py(1326):         obj.__dict__.update(kwargs)
0.66 query.py(1327):         return obj
0.66 query.py(1243):         clone._db = alias
0.66 query.py(1244):         return clone
0.66 query.py(963):         self._not_support_combined_queries('filter')
0.66 query.py(1418):         if self.query.combinator:
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(964):         return self._filter_or_exclude(False, args, kwargs)
0.66 query.py(975):         if (args or kwargs) and self.query.is_sliced:
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(977):         clone = self._chain()
0.66 query.py(1322):         obj = self._clone()
0.66 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(179):         self.model = model
0.66 query.py(180):         self._db = using
0.66 query.py(181):         self._hints = hints or {}
0.66 query.py(182):         self._query = query or sql.Query(self.model)
0.66 query.py(183):         self._result_cache = None
0.66 query.py(184):         self._sticky_filter = False
0.66 query.py(185):         self._for_write = False
0.66 query.py(186):         self._prefetch_related_lookups = ()
0.66 query.py(187):         self._prefetch_done = False
0.66 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.66 query.py(189):         self._iterable_class = ModelIterable
0.66 query.py(190):         self._fields = None
0.66 query.py(191):         self._defer_next_filter = False
0.66 query.py(192):         self._deferred_filter = None
0.66 query.py(1335):         c._sticky_filter = self._sticky_filter
0.66 query.py(1336):         c._for_write = self._for_write
0.66 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.66 query.py(1338):         c._known_related_objects = self._known_related_objects
0.66 query.py(1339):         c._iterable_class = self._iterable_class
0.66 query.py(1340):         c._fields = self._fields
0.66 query.py(1341):         return c
0.66 query.py(1323):         if obj._sticky_filter:
0.66 query.py(1326):         obj.__dict__.update(kwargs)
0.66 query.py(1327):         return obj
0.66 query.py(978):         if self._defer_next_filter:
0.66 query.py(982):             clone._filter_or_exclude_inplace(negate, args, kwargs)
0.66 query.py(986):         if negate:
0.66 query.py(989):             self._query.add_q(Q(*args, **kwargs))
0.66 query.py(983):         return clone
0.66 query.py(280):         self._fetch_all()
0.66 query.py(1344):         if self._result_cache is None:
0.66 query.py(1345):             self._result_cache = list(self._iterable_class(self))
0.66 query.py(37):         self.queryset = queryset
0.66 query.py(38):         self.chunked_fetch = chunked_fetch
0.66 query.py(39):         self.chunk_size = chunk_size
0.66 query.py(46):         queryset = self.queryset
0.66 query.py(47):         db = queryset.db
0.66 query.py(1273):         if self._for_write:
0.66 query.py(1275):         return self._db or router.db_for_read(self.model, **self._hints)
0.66 query.py(48):         compiler = queryset.query.get_compiler(using=db)
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(51):         results = compiler.execute_sql(chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size)
0.66 query.py(52):         select, klass_info, annotation_col_map = (compiler.select, compiler.klass_info,
0.66 query.py(53):                                                   compiler.annotation_col_map)
0.66 query.py(52):         select, klass_info, annotation_col_map = (compiler.select, compiler.klass_info,
0.66 query.py(54):         model_cls = klass_info['model']
0.66 query.py(55):         select_fields = klass_info['select_fields']
0.66 query.py(56):         model_fields_start, model_fields_end = select_fields[0], select_fields[-1] + 1
0.66 query.py(57):         init_list = [f[0].target.attname
0.66 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.66 query.py(57):         init_list = [f[0].target.attname
0.66 query.py(57):         init_list = [f[0].target.attname
0.66 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.66 query.py(57):         init_list = [f[0].target.attname
0.66 query.py(57):         init_list = [f[0].target.attname
0.66 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.66 query.py(57):         init_list = [f[0].target.attname
0.66 query.py(57):         init_list = [f[0].target.attname
0.66 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.66 query.py(57):         init_list = [f[0].target.attname
0.66 query.py(57):         init_list = [f[0].target.attname
0.66 query.py(59):         related_populators = get_related_populators(klass_info, select, db)
0.66 query.py(2030):     iterators = []
0.66 query.py(2031):     related_klass_infos = klass_info.get('related_klass_infos', [])
0.66 query.py(2032):     for rel_klass_info in related_klass_infos:
0.66 query.py(2035):     return iterators
0.66 query.py(60):         known_related_objects = [
0.66 query.py(66):             ])) for field, related_objs in queryset._known_related_objects.items()
0.66 query.py(60):         known_related_objects = [
0.66 query.py(60):         known_related_objects = [
0.66 query.py(68):         for row in compiler.results_iter(results):
0.66 query.py(69):             obj = model_cls.from_db(db, init_list, row[model_fields_start:model_fields_end])
0.66 query.py(70):             for rel_populator in related_populators:
0.66 query.py(72):             if annotation_col_map:
0.66 query.py(77):             for field, rel_objs, rel_getter in known_related_objects:
0.66 query.py(89):             yield obj
0.66 query.py(68):         for row in compiler.results_iter(results):
0.66 query.py(69):             obj = model_cls.from_db(db, init_list, row[model_fields_start:model_fields_end])
0.66 query.py(70):             for rel_populator in related_populators:
0.66 query.py(72):             if annotation_col_map:
0.66 query.py(77):             for field, rel_objs, rel_getter in known_related_objects:
0.66 query.py(89):             yield obj
0.66 query.py(68):         for row in compiler.results_iter(results):
0.66 query.py(69):             obj = model_cls.from_db(db, init_list, row[model_fields_start:model_fields_end])
0.66 query.py(70):             for rel_populator in related_populators:
0.66 query.py(72):             if annotation_col_map:
0.66 query.py(77):             for field, rel_objs, rel_getter in known_related_objects:
0.66 query.py(89):             yield obj
0.66 query.py(68):         for row in compiler.results_iter(results):
0.66 query.py(1346):         if self._prefetch_related_lookups and not self._prefetch_done:
0.66 query.py(281):         return iter(self._result_cache)
0.66 query.py(179):         self.model = model
0.66 query.py(180):         self._db = using
0.66 query.py(181):         self._hints = hints or {}
0.66 query.py(182):         self._query = query or sql.Query(self.model)
0.66 query.py(183):         self._result_cache = None
0.66 query.py(184):         self._sticky_filter = False
0.66 query.py(185):         self._for_write = False
0.66 query.py(186):         self._prefetch_related_lookups = ()
0.66 query.py(187):         self._prefetch_done = False
0.66 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.66 query.py(189):         self._iterable_class = ModelIterable
0.66 query.py(190):         self._fields = None
0.66 query.py(191):         self._defer_next_filter = False
0.66 query.py(192):         self._deferred_filter = None
0.66 query.py(1242):         clone = self._chain()
0.66 query.py(1322):         obj = self._clone()
0.66 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(179):         self.model = model
0.66 query.py(180):         self._db = using
0.66 query.py(181):         self._hints = hints or {}
0.66 query.py(182):         self._query = query or sql.Query(self.model)
0.66 query.py(183):         self._result_cache = None
0.66 query.py(184):         self._sticky_filter = False
0.66 query.py(185):         self._for_write = False
0.66 query.py(186):         self._prefetch_related_lookups = ()
0.66 query.py(187):         self._prefetch_done = False
0.66 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.66 query.py(189):         self._iterable_class = ModelIterable
0.66 query.py(190):         self._fields = None
0.66 query.py(191):         self._defer_next_filter = False
0.66 query.py(192):         self._deferred_filter = None
0.66 query.py(1335):         c._sticky_filter = self._sticky_filter
0.66 query.py(1336):         c._for_write = self._for_write
0.66 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.66 query.py(1338):         c._known_related_objects = self._known_related_objects
0.66 query.py(1339):         c._iterable_class = self._iterable_class
0.66 query.py(1340):         c._fields = self._fields
0.66 query.py(1341):         return c
0.66 query.py(1323):         if obj._sticky_filter:
0.66 query.py(1326):         obj.__dict__.update(kwargs)
0.66 query.py(1327):         return obj
0.66 query.py(1243):         clone._db = alias
0.66 query.py(1244):         return clone
0.66 query.py(483):         assert batch_size is None or batch_size > 0
0.66 query.py(488):         for parent in self.model._meta.get_parent_list():
0.66 query.py(491):         if not objs:
0.66 query.py(492):             return objs
0.66 query.py(179):         self.model = model
0.66 query.py(180):         self._db = using
0.66 query.py(181):         self._hints = hints or {}
0.66 query.py(182):         self._query = query or sql.Query(self.model)
0.66 query.py(183):         self._result_cache = None
0.66 query.py(184):         self._sticky_filter = False
0.66 query.py(185):         self._for_write = False
0.66 query.py(186):         self._prefetch_related_lookups = ()
0.66 query.py(187):         self._prefetch_done = False
0.66 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.66 query.py(189):         self._iterable_class = ModelIterable
0.66 query.py(190):         self._fields = None
0.66 query.py(191):         self._defer_next_filter = False
0.66 query.py(192):         self._deferred_filter = None
0.66 query.py(419):         if self.query.combinator and (args or kwargs):
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(424):         clone = self._chain() if self.query.combinator else self.filter(*args, **kwargs)
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(963):         self._not_support_combined_queries('filter')
0.66 query.py(1418):         if self.query.combinator:
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(964):         return self._filter_or_exclude(False, args, kwargs)
0.66 query.py(975):         if (args or kwargs) and self.query.is_sliced:
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(977):         clone = self._chain()
0.66 query.py(1322):         obj = self._clone()
0.66 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(179):         self.model = model
0.66 query.py(180):         self._db = using
0.66 query.py(181):         self._hints = hints or {}
0.66 query.py(182):         self._query = query or sql.Query(self.model)
0.66 query.py(183):         self._result_cache = None
0.66 query.py(184):         self._sticky_filter = False
0.66 query.py(185):         self._for_write = False
0.66 query.py(186):         self._prefetch_related_lookups = ()
0.66 query.py(187):         self._prefetch_done = False
0.66 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.66 query.py(189):         self._iterable_class = ModelIterable
0.66 query.py(190):         self._fields = None
0.66 query.py(191):         self._defer_next_filter = False
0.66 query.py(192):         self._deferred_filter = None
0.66 query.py(1335):         c._sticky_filter = self._sticky_filter
0.66 query.py(1336):         c._for_write = self._for_write
0.66 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.66 query.py(1338):         c._known_related_objects = self._known_related_objects
0.66 query.py(1339):         c._iterable_class = self._iterable_class
0.66 query.py(1340):         c._fields = self._fields
0.66 query.py(1341):         return c
0.66 query.py(1323):         if obj._sticky_filter:
0.66 query.py(1326):         obj.__dict__.update(kwargs)
0.66 query.py(1327):         return obj
0.66 query.py(978):         if self._defer_next_filter:
0.66 query.py(982):             clone._filter_or_exclude_inplace(negate, args, kwargs)
0.66 query.py(986):         if negate:
0.66 query.py(989):             self._query.add_q(Q(*args, **kwargs))
0.66 query.py(983):         return clone
0.66 query.py(425):         if self.query.can_filter() and not self.query.distinct_fields:
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(426):             clone = clone.order_by()
0.66 query.py(1166):         if self.query.is_sliced:
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(1168):         obj = self._chain()
0.66 query.py(1322):         obj = self._clone()
0.66 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(179):         self.model = model
0.66 query.py(180):         self._db = using
0.66 query.py(181):         self._hints = hints or {}
0.66 query.py(182):         self._query = query or sql.Query(self.model)
0.66 query.py(183):         self._result_cache = None
0.66 query.py(184):         self._sticky_filter = False
0.66 query.py(185):         self._for_write = False
0.66 query.py(186):         self._prefetch_related_lookups = ()
0.66 query.py(187):         self._prefetch_done = False
0.66 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.66 query.py(189):         self._iterable_class = ModelIterable
0.66 query.py(190):         self._fields = None
0.66 query.py(191):         self._defer_next_filter = False
0.66 query.py(192):         self._deferred_filter = None
0.66 query.py(1335):         c._sticky_filter = self._sticky_filter
0.66 query.py(1336):         c._for_write = self._for_write
0.66 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.66 query.py(1338):         c._known_related_objects = self._known_related_objects
0.66 query.py(1339):         c._iterable_class = self._iterable_class
0.66 query.py(1340):         c._fields = self._fields
0.66 query.py(1341):         return c
0.66 query.py(1323):         if obj._sticky_filter:
0.66 query.py(1326):         obj.__dict__.update(kwargs)
0.66 query.py(1327):         return obj
0.66 query.py(1169):         obj.query.clear_ordering(force_empty=False)
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(1170):         obj.query.add_ordering(*field_names)
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(1171):         return obj
0.66 query.py(427):         limit = None
0.66 query.py(428):         if not clone.query.select_for_update or connections[clone.db].features.supports_select_for_update_with_limit:
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(429):             limit = MAX_GET_RESULTS
0.66 query.py(430):             clone.query.set_limits(high=limit)
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(431):         num = len(clone)
0.66 query.py(262):         self._fetch_all()
0.66 query.py(1344):         if self._result_cache is None:
0.66 query.py(1345):             self._result_cache = list(self._iterable_class(self))
0.66 query.py(37):         self.queryset = queryset
0.66 query.py(38):         self.chunked_fetch = chunked_fetch
0.66 query.py(39):         self.chunk_size = chunk_size
0.66 query.py(46):         queryset = self.queryset
0.66 query.py(47):         db = queryset.db
0.66 query.py(1273):         if self._for_write:
0.66 query.py(1275):         return self._db or router.db_for_read(self.model, **self._hints)
0.66 query.py(48):         compiler = queryset.query.get_compiler(using=db)
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(51):         results = compiler.execute_sql(chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size)
0.66 query.py(52):         select, klass_info, annotation_col_map = (compiler.select, compiler.klass_info,
0.66 query.py(53):                                                   compiler.annotation_col_map)
0.66 query.py(52):         select, klass_info, annotation_col_map = (compiler.select, compiler.klass_info,
0.66 query.py(54):         model_cls = klass_info['model']
0.66 query.py(55):         select_fields = klass_info['select_fields']
0.66 query.py(56):         model_fields_start, model_fields_end = select_fields[0], select_fields[-1] + 1
0.66 query.py(57):         init_list = [f[0].target.attname
0.66 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.66 query.py(57):         init_list = [f[0].target.attname
0.66 query.py(57):         init_list = [f[0].target.attname
0.66 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.66 query.py(57):         init_list = [f[0].target.attname
0.66 query.py(57):         init_list = [f[0].target.attname
0.66 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.66 query.py(57):         init_list = [f[0].target.attname
0.66 query.py(57):         init_list = [f[0].target.attname
0.66 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.66 query.py(57):         init_list = [f[0].target.attname
0.66 query.py(57):         init_list = [f[0].target.attname
0.66 query.py(59):         related_populators = get_related_populators(klass_info, select, db)
0.66 query.py(2030):     iterators = []
0.66 query.py(2031):     related_klass_infos = klass_info.get('related_klass_infos', [])
0.66 query.py(2032):     for rel_klass_info in related_klass_infos:
0.66 query.py(2035):     return iterators
0.66 query.py(60):         known_related_objects = [
0.66 query.py(66):             ])) for field, related_objs in queryset._known_related_objects.items()
0.66 query.py(60):         known_related_objects = [
0.66 query.py(60):         known_related_objects = [
0.66 query.py(68):         for row in compiler.results_iter(results):
0.66 query.py(69):             obj = model_cls.from_db(db, init_list, row[model_fields_start:model_fields_end])
0.66 query.py(70):             for rel_populator in related_populators:
0.66 query.py(72):             if annotation_col_map:
0.66 query.py(77):             for field, rel_objs, rel_getter in known_related_objects:
0.66 query.py(89):             yield obj
0.66 query.py(68):         for row in compiler.results_iter(results):
0.66 query.py(1346):         if self._prefetch_related_lookups and not self._prefetch_done:
0.66 query.py(263):         return len(self._result_cache)
0.66 query.py(432):         if num == 1:
0.66 query.py(433):             return clone._result_cache[0]
0.66 query.py(179):         self.model = model
0.66 query.py(180):         self._db = using
0.66 query.py(181):         self._hints = hints or {}
0.66 query.py(182):         self._query = query or sql.Query(self.model)
0.66 query.py(183):         self._result_cache = None
0.66 query.py(184):         self._sticky_filter = False
0.66 query.py(185):         self._for_write = False
0.66 query.py(186):         self._prefetch_related_lookups = ()
0.66 query.py(187):         self._prefetch_done = False
0.66 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.66 query.py(189):         self._iterable_class = ModelIterable
0.66 query.py(190):         self._fields = None
0.66 query.py(191):         self._defer_next_filter = False
0.66 query.py(192):         self._deferred_filter = None
0.66 query.py(419):         if self.query.combinator and (args or kwargs):
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(424):         clone = self._chain() if self.query.combinator else self.filter(*args, **kwargs)
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(963):         self._not_support_combined_queries('filter')
0.66 query.py(1418):         if self.query.combinator:
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(964):         return self._filter_or_exclude(False, args, kwargs)
0.66 query.py(975):         if (args or kwargs) and self.query.is_sliced:
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(977):         clone = self._chain()
0.66 query.py(1322):         obj = self._clone()
0.66 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(179):         self.model = model
0.66 query.py(180):         self._db = using
0.66 query.py(181):         self._hints = hints or {}
0.66 query.py(182):         self._query = query or sql.Query(self.model)
0.66 query.py(183):         self._result_cache = None
0.66 query.py(184):         self._sticky_filter = False
0.66 query.py(185):         self._for_write = False
0.66 query.py(186):         self._prefetch_related_lookups = ()
0.66 query.py(187):         self._prefetch_done = False
0.66 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.66 query.py(189):         self._iterable_class = ModelIterable
0.66 query.py(190):         self._fields = None
0.66 query.py(191):         self._defer_next_filter = False
0.66 query.py(192):         self._deferred_filter = None
0.66 query.py(1335):         c._sticky_filter = self._sticky_filter
0.66 query.py(1336):         c._for_write = self._for_write
0.66 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.66 query.py(1338):         c._known_related_objects = self._known_related_objects
0.66 query.py(1339):         c._iterable_class = self._iterable_class
0.66 query.py(1340):         c._fields = self._fields
0.66 query.py(1341):         return c
0.66 query.py(1323):         if obj._sticky_filter:
0.66 query.py(1326):         obj.__dict__.update(kwargs)
0.66 query.py(1327):         return obj
0.66 query.py(978):         if self._defer_next_filter:
0.66 query.py(982):             clone._filter_or_exclude_inplace(negate, args, kwargs)
0.66 query.py(986):         if negate:
0.66 query.py(989):             self._query.add_q(Q(*args, **kwargs))
0.66 query.py(983):         return clone
0.66 query.py(425):         if self.query.can_filter() and not self.query.distinct_fields:
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(426):             clone = clone.order_by()
0.66 query.py(1166):         if self.query.is_sliced:
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(1168):         obj = self._chain()
0.66 query.py(1322):         obj = self._clone()
0.66 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(179):         self.model = model
0.66 query.py(180):         self._db = using
0.66 query.py(181):         self._hints = hints or {}
0.66 query.py(182):         self._query = query or sql.Query(self.model)
0.66 query.py(183):         self._result_cache = None
0.66 query.py(184):         self._sticky_filter = False
0.66 query.py(185):         self._for_write = False
0.66 query.py(186):         self._prefetch_related_lookups = ()
0.66 query.py(187):         self._prefetch_done = False
0.66 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.66 query.py(189):         self._iterable_class = ModelIterable
0.66 query.py(190):         self._fields = None
0.66 query.py(191):         self._defer_next_filter = False
0.66 query.py(192):         self._deferred_filter = None
0.66 query.py(1335):         c._sticky_filter = self._sticky_filter
0.66 query.py(1336):         c._for_write = self._for_write
0.66 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.66 query.py(1338):         c._known_related_objects = self._known_related_objects
0.66 query.py(1339):         c._iterable_class = self._iterable_class
0.66 query.py(1340):         c._fields = self._fields
0.66 query.py(1341):         return c
0.66 query.py(1323):         if obj._sticky_filter:
0.66 query.py(1326):         obj.__dict__.update(kwargs)
0.66 query.py(1327):         return obj
0.66 query.py(1169):         obj.query.clear_ordering(force_empty=False)
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(1170):         obj.query.add_ordering(*field_names)
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(1171):         return obj
0.66 query.py(427):         limit = None
0.66 query.py(428):         if not clone.query.select_for_update or connections[clone.db].features.supports_select_for_update_with_limit:
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(429):             limit = MAX_GET_RESULTS
0.66 query.py(430):             clone.query.set_limits(high=limit)
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(431):         num = len(clone)
0.66 query.py(262):         self._fetch_all()
0.66 query.py(1344):         if self._result_cache is None:
0.66 query.py(1345):             self._result_cache = list(self._iterable_class(self))
0.66 query.py(37):         self.queryset = queryset
0.66 query.py(38):         self.chunked_fetch = chunked_fetch
0.66 query.py(39):         self.chunk_size = chunk_size
0.66 query.py(46):         queryset = self.queryset
0.66 query.py(47):         db = queryset.db
0.66 query.py(1273):         if self._for_write:
0.66 query.py(1275):         return self._db or router.db_for_read(self.model, **self._hints)
0.66 query.py(48):         compiler = queryset.query.get_compiler(using=db)
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(51):         results = compiler.execute_sql(chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size)
0.66 query.py(52):         select, klass_info, annotation_col_map = (compiler.select, compiler.klass_info,
0.66 query.py(53):                                                   compiler.annotation_col_map)
0.66 query.py(52):         select, klass_info, annotation_col_map = (compiler.select, compiler.klass_info,
0.66 query.py(54):         model_cls = klass_info['model']
0.66 query.py(55):         select_fields = klass_info['select_fields']
0.66 query.py(56):         model_fields_start, model_fields_end = select_fields[0], select_fields[-1] + 1
0.66 query.py(57):         init_list = [f[0].target.attname
0.66 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.66 query.py(57):         init_list = [f[0].target.attname
0.66 query.py(57):         init_list = [f[0].target.attname
0.66 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.66 query.py(57):         init_list = [f[0].target.attname
0.66 query.py(57):         init_list = [f[0].target.attname
0.66 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.66 query.py(57):         init_list = [f[0].target.attname
0.66 query.py(57):         init_list = [f[0].target.attname
0.66 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.66 query.py(57):         init_list = [f[0].target.attname
0.66 query.py(57):         init_list = [f[0].target.attname
0.66 query.py(59):         related_populators = get_related_populators(klass_info, select, db)
0.66 query.py(2030):     iterators = []
0.66 query.py(2031):     related_klass_infos = klass_info.get('related_klass_infos', [])
0.66 query.py(2032):     for rel_klass_info in related_klass_infos:
0.66 query.py(2035):     return iterators
0.66 query.py(60):         known_related_objects = [
0.66 query.py(66):             ])) for field, related_objs in queryset._known_related_objects.items()
0.66 query.py(60):         known_related_objects = [
0.66 query.py(60):         known_related_objects = [
0.66 query.py(68):         for row in compiler.results_iter(results):
0.66 query.py(69):             obj = model_cls.from_db(db, init_list, row[model_fields_start:model_fields_end])
0.66 query.py(70):             for rel_populator in related_populators:
0.66 query.py(72):             if annotation_col_map:
0.66 query.py(77):             for field, rel_objs, rel_getter in known_related_objects:
0.66 query.py(89):             yield obj
0.66 query.py(68):         for row in compiler.results_iter(results):
0.66 query.py(1346):         if self._prefetch_related_lookups and not self._prefetch_done:
0.66 query.py(263):         return len(self._result_cache)
0.66 query.py(432):         if num == 1:
0.66 query.py(433):             return clone._result_cache[0]
0.66 query.py(179):         self.model = model
0.66 query.py(180):         self._db = using
0.66 query.py(181):         self._hints = hints or {}
0.66 query.py(182):         self._query = query or sql.Query(self.model)
0.66 query.py(183):         self._result_cache = None
0.66 query.py(184):         self._sticky_filter = False
0.66 query.py(185):         self._for_write = False
0.66 query.py(186):         self._prefetch_related_lookups = ()
0.66 query.py(187):         self._prefetch_done = False
0.66 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.66 query.py(189):         self._iterable_class = ModelIterable
0.66 query.py(190):         self._fields = None
0.66 query.py(191):         self._defer_next_filter = False
0.66 query.py(192):         self._deferred_filter = None
0.66 query.py(419):         if self.query.combinator and (args or kwargs):
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(424):         clone = self._chain() if self.query.combinator else self.filter(*args, **kwargs)
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(963):         self._not_support_combined_queries('filter')
0.66 query.py(1418):         if self.query.combinator:
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(964):         return self._filter_or_exclude(False, args, kwargs)
0.66 query.py(975):         if (args or kwargs) and self.query.is_sliced:
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(977):         clone = self._chain()
0.66 query.py(1322):         obj = self._clone()
0.66 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(179):         self.model = model
0.66 query.py(180):         self._db = using
0.66 query.py(181):         self._hints = hints or {}
0.66 query.py(182):         self._query = query or sql.Query(self.model)
0.66 query.py(183):         self._result_cache = None
0.66 query.py(184):         self._sticky_filter = False
0.66 query.py(185):         self._for_write = False
0.66 query.py(186):         self._prefetch_related_lookups = ()
0.66 query.py(187):         self._prefetch_done = False
0.66 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.66 query.py(189):         self._iterable_class = ModelIterable
0.66 query.py(190):         self._fields = None
0.66 query.py(191):         self._defer_next_filter = False
0.66 query.py(192):         self._deferred_filter = None
0.66 query.py(1335):         c._sticky_filter = self._sticky_filter
0.66 query.py(1336):         c._for_write = self._for_write
0.66 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.66 query.py(1338):         c._known_related_objects = self._known_related_objects
0.66 query.py(1339):         c._iterable_class = self._iterable_class
0.66 query.py(1340):         c._fields = self._fields
0.66 query.py(1341):         return c
0.66 query.py(1323):         if obj._sticky_filter:
0.66 query.py(1326):         obj.__dict__.update(kwargs)
0.66 query.py(1327):         return obj
0.66 query.py(978):         if self._defer_next_filter:
0.66 query.py(982):             clone._filter_or_exclude_inplace(negate, args, kwargs)
0.66 query.py(986):         if negate:
0.66 query.py(989):             self._query.add_q(Q(*args, **kwargs))
0.66 query.py(983):         return clone
0.66 query.py(425):         if self.query.can_filter() and not self.query.distinct_fields:
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(426):             clone = clone.order_by()
0.66 query.py(1166):         if self.query.is_sliced:
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(1168):         obj = self._chain()
0.66 query.py(1322):         obj = self._clone()
0.66 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(179):         self.model = model
0.66 query.py(180):         self._db = using
0.66 query.py(181):         self._hints = hints or {}
0.66 query.py(182):         self._query = query or sql.Query(self.model)
0.66 query.py(183):         self._result_cache = None
0.66 query.py(184):         self._sticky_filter = False
0.66 query.py(185):         self._for_write = False
0.66 query.py(186):         self._prefetch_related_lookups = ()
0.66 query.py(187):         self._prefetch_done = False
0.66 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.66 query.py(189):         self._iterable_class = ModelIterable
0.66 query.py(190):         self._fields = None
0.66 query.py(191):         self._defer_next_filter = False
0.66 query.py(192):         self._deferred_filter = None
0.66 query.py(1335):         c._sticky_filter = self._sticky_filter
0.66 query.py(1336):         c._for_write = self._for_write
0.66 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.66 query.py(1338):         c._known_related_objects = self._known_related_objects
0.66 query.py(1339):         c._iterable_class = self._iterable_class
0.66 query.py(1340):         c._fields = self._fields
0.66 query.py(1341):         return c
0.66 query.py(1323):         if obj._sticky_filter:
0.66 query.py(1326):         obj.__dict__.update(kwargs)
0.66 query.py(1327):         return obj
0.66 query.py(1169):         obj.query.clear_ordering(force_empty=False)
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(1170):         obj.query.add_ordering(*field_names)
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(1171):         return obj
0.66 query.py(427):         limit = None
0.66 query.py(428):         if not clone.query.select_for_update or connections[clone.db].features.supports_select_for_update_with_limit:
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(429):             limit = MAX_GET_RESULTS
0.66 query.py(430):             clone.query.set_limits(high=limit)
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(431):         num = len(clone)
0.66 query.py(262):         self._fetch_all()
0.66 query.py(1344):         if self._result_cache is None:
0.66 query.py(1345):             self._result_cache = list(self._iterable_class(self))
0.66 query.py(37):         self.queryset = queryset
0.66 query.py(38):         self.chunked_fetch = chunked_fetch
0.66 query.py(39):         self.chunk_size = chunk_size
0.66 query.py(46):         queryset = self.queryset
0.66 query.py(47):         db = queryset.db
0.66 query.py(1273):         if self._for_write:
0.66 query.py(1275):         return self._db or router.db_for_read(self.model, **self._hints)
0.66 query.py(48):         compiler = queryset.query.get_compiler(using=db)
0.66 query.py(196):         if self._deferred_filter:
0.66 query.py(200):         return self._query
0.66 query.py(51):         results = compiler.execute_sql(chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size)
0.66 query.py(52):         select, klass_info, annotation_col_map = (compiler.select, compiler.klass_info,
0.66 query.py(53):                                                   compiler.annotation_col_map)
0.66 query.py(52):         select, klass_info, annotation_col_map = (compiler.select, compiler.klass_info,
0.66 query.py(54):         model_cls = klass_info['model']
0.66 query.py(55):         select_fields = klass_info['select_fields']
0.66 query.py(56):         model_fields_start, model_fields_end = select_fields[0], select_fields[-1] + 1
0.66 query.py(57):         init_list = [f[0].target.attname
0.66 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.67 query.py(57):         init_list = [f[0].target.attname
0.67 query.py(57):         init_list = [f[0].target.attname
0.67 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.67 query.py(57):         init_list = [f[0].target.attname
0.67 query.py(57):         init_list = [f[0].target.attname
0.67 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.67 query.py(57):         init_list = [f[0].target.attname
0.67 query.py(57):         init_list = [f[0].target.attname
0.67 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.67 query.py(57):         init_list = [f[0].target.attname
0.67 query.py(57):         init_list = [f[0].target.attname
0.67 query.py(59):         related_populators = get_related_populators(klass_info, select, db)
0.67 query.py(2030):     iterators = []
0.67 query.py(2031):     related_klass_infos = klass_info.get('related_klass_infos', [])
0.67 query.py(2032):     for rel_klass_info in related_klass_infos:
0.67 query.py(2035):     return iterators
0.67 query.py(60):         known_related_objects = [
0.67 query.py(66):             ])) for field, related_objs in queryset._known_related_objects.items()
0.67 query.py(60):         known_related_objects = [
0.67 query.py(60):         known_related_objects = [
0.67 query.py(68):         for row in compiler.results_iter(results):
0.67 query.py(69):             obj = model_cls.from_db(db, init_list, row[model_fields_start:model_fields_end])
0.67 query.py(70):             for rel_populator in related_populators:
0.67 query.py(72):             if annotation_col_map:
0.67 query.py(77):             for field, rel_objs, rel_getter in known_related_objects:
0.67 query.py(89):             yield obj
0.67 query.py(68):         for row in compiler.results_iter(results):
0.67 query.py(1346):         if self._prefetch_related_lookups and not self._prefetch_done:
0.67 query.py(263):         return len(self._result_cache)
0.67 query.py(432):         if num == 1:
0.67 query.py(433):             return clone._result_cache[0]
0.67 query.py(179):         self.model = model
0.67 query.py(180):         self._db = using
0.67 query.py(181):         self._hints = hints or {}
0.67 query.py(182):         self._query = query or sql.Query(self.model)
0.67 query.py(183):         self._result_cache = None
0.67 query.py(184):         self._sticky_filter = False
0.67 query.py(185):         self._for_write = False
0.67 query.py(186):         self._prefetch_related_lookups = ()
0.67 query.py(187):         self._prefetch_done = False
0.67 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.67 query.py(189):         self._iterable_class = ModelIterable
0.67 query.py(190):         self._fields = None
0.67 query.py(191):         self._defer_next_filter = False
0.67 query.py(192):         self._deferred_filter = None
0.67 query.py(1242):         clone = self._chain()
0.67 query.py(1322):         obj = self._clone()
0.67 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.67 query.py(196):         if self._deferred_filter:
0.67 query.py(200):         return self._query
0.67 query.py(179):         self.model = model
0.67 query.py(180):         self._db = using
0.67 query.py(181):         self._hints = hints or {}
0.67 query.py(182):         self._query = query or sql.Query(self.model)
0.67 query.py(183):         self._result_cache = None
0.67 query.py(184):         self._sticky_filter = False
0.67 query.py(185):         self._for_write = False
0.67 query.py(186):         self._prefetch_related_lookups = ()
0.67 query.py(187):         self._prefetch_done = False
0.67 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.67 query.py(189):         self._iterable_class = ModelIterable
0.67 query.py(190):         self._fields = None
0.67 query.py(191):         self._defer_next_filter = False
0.67 query.py(192):         self._deferred_filter = None
0.67 query.py(1335):         c._sticky_filter = self._sticky_filter
0.67 query.py(1336):         c._for_write = self._for_write
0.67 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.67 query.py(1338):         c._known_related_objects = self._known_related_objects
0.67 query.py(1339):         c._iterable_class = self._iterable_class
0.67 query.py(1340):         c._fields = self._fields
0.67 query.py(1341):         return c
0.67 query.py(1323):         if obj._sticky_filter:
0.67 query.py(1326):         obj.__dict__.update(kwargs)
0.67 query.py(1327):         return obj
0.67 query.py(1243):         clone._db = alias
0.67 query.py(1244):         return clone
0.67 query.py(963):         self._not_support_combined_queries('filter')
0.67 query.py(1418):         if self.query.combinator:
0.67 query.py(196):         if self._deferred_filter:
0.67 query.py(200):         return self._query
0.67 query.py(964):         return self._filter_or_exclude(False, args, kwargs)
0.67 query.py(975):         if (args or kwargs) and self.query.is_sliced:
0.67 query.py(196):         if self._deferred_filter:
0.67 query.py(200):         return self._query
0.67 query.py(977):         clone = self._chain()
0.67 query.py(1322):         obj = self._clone()
0.67 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.67 query.py(196):         if self._deferred_filter:
0.67 query.py(200):         return self._query
0.67 query.py(179):         self.model = model
0.67 query.py(180):         self._db = using
0.67 query.py(181):         self._hints = hints or {}
0.67 query.py(182):         self._query = query or sql.Query(self.model)
0.67 query.py(183):         self._result_cache = None
0.67 query.py(184):         self._sticky_filter = False
0.67 query.py(185):         self._for_write = False
0.67 query.py(186):         self._prefetch_related_lookups = ()
0.67 query.py(187):         self._prefetch_done = False
0.67 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.67 query.py(189):         self._iterable_class = ModelIterable
0.67 query.py(190):         self._fields = None
0.67 query.py(191):         self._defer_next_filter = False
0.67 query.py(192):         self._deferred_filter = None
0.67 query.py(1335):         c._sticky_filter = self._sticky_filter
0.67 query.py(1336):         c._for_write = self._for_write
0.67 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.67 query.py(1338):         c._known_related_objects = self._known_related_objects
0.67 query.py(1339):         c._iterable_class = self._iterable_class
0.67 query.py(1340):         c._fields = self._fields
0.67 query.py(1341):         return c
0.67 query.py(1323):         if obj._sticky_filter:
0.67 query.py(1326):         obj.__dict__.update(kwargs)
0.67 query.py(1327):         return obj
0.67 query.py(978):         if self._defer_next_filter:
0.67 query.py(982):             clone._filter_or_exclude_inplace(negate, args, kwargs)
0.67 query.py(986):         if negate:
0.67 query.py(989):             self._query.add_q(Q(*args, **kwargs))
0.67 query.py(983):         return clone
0.67 query.py(868):         if flat and named:
0.67 query.py(870):         if flat and len(fields) > 1:
0.67 query.py(873):         field_names = {f for f in fields if not hasattr(f, 'resolve_expression')}
0.67 query.py(873):         field_names = {f for f in fields if not hasattr(f, 'resolve_expression')}
0.67 query.py(873):         field_names = {f for f in fields if not hasattr(f, 'resolve_expression')}
0.67 query.py(873):         field_names = {f for f in fields if not hasattr(f, 'resolve_expression')}
0.67 query.py(874):         _fields = []
0.67 query.py(875):         expressions = {}
0.67 query.py(876):         counter = 1
0.67 query.py(877):         for field in fields:
0.67 query.py(878):             if hasattr(field, 'resolve_expression'):
0.67 query.py(888):                 _fields.append(field)
0.67 query.py(877):         for field in fields:
0.67 query.py(878):             if hasattr(field, 'resolve_expression'):
0.67 query.py(888):                 _fields.append(field)
0.67 query.py(877):         for field in fields:
0.67 query.py(890):         clone = self._values(*_fields, **expressions)
0.67 query.py(854):         clone = self._chain()
0.67 query.py(1322):         obj = self._clone()
0.67 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.67 query.py(196):         if self._deferred_filter:
0.67 query.py(200):         return self._query
0.67 query.py(179):         self.model = model
0.67 query.py(180):         self._db = using
0.67 query.py(181):         self._hints = hints or {}
0.67 query.py(182):         self._query = query or sql.Query(self.model)
0.67 query.py(183):         self._result_cache = None
0.67 query.py(184):         self._sticky_filter = False
0.67 query.py(185):         self._for_write = False
0.67 query.py(186):         self._prefetch_related_lookups = ()
0.67 query.py(187):         self._prefetch_done = False
0.67 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.67 query.py(189):         self._iterable_class = ModelIterable
0.67 query.py(190):         self._fields = None
0.67 query.py(191):         self._defer_next_filter = False
0.67 query.py(192):         self._deferred_filter = None
0.67 query.py(1335):         c._sticky_filter = self._sticky_filter
0.67 query.py(1336):         c._for_write = self._for_write
0.67 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.67 query.py(1338):         c._known_related_objects = self._known_related_objects
0.67 query.py(1339):         c._iterable_class = self._iterable_class
0.67 query.py(1340):         c._fields = self._fields
0.67 query.py(1341):         return c
0.67 query.py(1323):         if obj._sticky_filter:
0.67 query.py(1326):         obj.__dict__.update(kwargs)
0.67 query.py(1327):         return obj
0.67 query.py(855):         if expressions:
0.67 query.py(857):         clone._fields = fields
0.67 query.py(858):         clone.query.set_values(fields)
0.67 query.py(196):         if self._deferred_filter:
0.67 query.py(200):         return self._query
0.67 query.py(859):         return clone
0.67 query.py(892):             NamedValuesListIterable if named
0.67 query.py(893):             else FlatValuesListIterable if flat
0.67 query.py(894):             else ValuesListIterable
0.67 query.py(891):         clone._iterable_class = (
0.67 query.py(896):         return clone
0.67 query.py(280):         self._fetch_all()
0.67 query.py(1344):         if self._result_cache is None:
0.67 query.py(1345):             self._result_cache = list(self._iterable_class(self))
0.67 query.py(37):         self.queryset = queryset
0.67 query.py(38):         self.chunked_fetch = chunked_fetch
0.67 query.py(39):         self.chunk_size = chunk_size
0.67 query.py(120):         queryset = self.queryset
0.67 query.py(121):         query = queryset.query
0.67 query.py(196):         if self._deferred_filter:
0.67 query.py(200):         return self._query
0.67 query.py(122):         compiler = query.get_compiler(queryset.db)
0.67 query.py(1273):         if self._for_write:
0.67 query.py(1275):         return self._db or router.db_for_read(self.model, **self._hints)
0.67 query.py(124):         if queryset._fields:
0.67 query.py(127):                 *query.extra_select,
0.67 query.py(128):                 *query.values_select,
0.67 query.py(129):                 *query.annotation_select,
0.67 query.py(126):             names = [
0.67 query.py(131):             fields = [*queryset._fields, *(f for f in query.annotation_select if f not in queryset._fields)]
0.67 query.py(131):             fields = [*queryset._fields, *(f for f in query.annotation_select if f not in queryset._fields)]
0.67 query.py(132):             if fields != names:
0.67 query.py(140):         return compiler.results_iter(tuple_expected=True, chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size)
0.67 query.py(1346):         if self._prefetch_related_lookups and not self._prefetch_done:
0.67 query.py(281):         return iter(self._result_cache)
0.67 query.py(179):         self.model = model
0.67 query.py(180):         self._db = using
0.67 query.py(181):         self._hints = hints or {}
0.67 query.py(182):         self._query = query or sql.Query(self.model)
0.67 query.py(183):         self._result_cache = None
0.67 query.py(184):         self._sticky_filter = False
0.67 query.py(185):         self._for_write = False
0.67 query.py(186):         self._prefetch_related_lookups = ()
0.67 query.py(187):         self._prefetch_done = False
0.67 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.67 query.py(189):         self._iterable_class = ModelIterable
0.67 query.py(190):         self._fields = None
0.67 query.py(191):         self._defer_next_filter = False
0.67 query.py(192):         self._deferred_filter = None
0.67 query.py(1242):         clone = self._chain()
0.67 query.py(1322):         obj = self._clone()
0.67 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.67 query.py(196):         if self._deferred_filter:
0.67 query.py(200):         return self._query
0.67 query.py(179):         self.model = model
0.67 query.py(180):         self._db = using
0.67 query.py(181):         self._hints = hints or {}
0.67 query.py(182):         self._query = query or sql.Query(self.model)
0.67 query.py(183):         self._result_cache = None
0.67 query.py(184):         self._sticky_filter = False
0.67 query.py(185):         self._for_write = False
0.67 query.py(186):         self._prefetch_related_lookups = ()
0.67 query.py(187):         self._prefetch_done = False
0.67 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.67 query.py(189):         self._iterable_class = ModelIterable
0.67 query.py(190):         self._fields = None
0.67 query.py(191):         self._defer_next_filter = False
0.67 query.py(192):         self._deferred_filter = None
0.67 query.py(1335):         c._sticky_filter = self._sticky_filter
0.67 query.py(1336):         c._for_write = self._for_write
0.67 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.67 query.py(1338):         c._known_related_objects = self._known_related_objects
0.67 query.py(1339):         c._iterable_class = self._iterable_class
0.67 query.py(1340):         c._fields = self._fields
0.67 query.py(1341):         return c
0.67 query.py(1323):         if obj._sticky_filter:
0.67 query.py(1326):         obj.__dict__.update(kwargs)
0.67 query.py(1327):         return obj
0.67 query.py(1243):         clone._db = alias
0.67 query.py(1244):         return clone
0.67 query.py(483):         assert batch_size is None or batch_size > 0
0.67 query.py(488):         for parent in self.model._meta.get_parent_list():
0.67 query.py(491):         if not objs:
0.67 query.py(493):         self._for_write = True
0.67 query.py(494):         connection = connections[self.db]
0.67 query.py(1273):         if self._for_write:
0.67 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.67 query.py(495):         opts = self.model._meta
0.67 query.py(496):         fields = opts.concrete_fields
0.67 query.py(497):         objs = list(objs)
0.67 query.py(498):         self._prepare_for_bulk_create(objs)
0.67 query.py(457):         for obj in objs:
0.67 query.py(458):             if obj.pk is None:
0.67 query.py(460):                 obj.pk = obj._meta.pk.get_pk_value_on_save(obj)
0.67 query.py(461):             obj._prepare_related_fields_for_save(operation_name='bulk_create')
0.67 query.py(457):         for obj in objs:
0.67 query.py(458):             if obj.pk is None:
0.67 query.py(460):                 obj.pk = obj._meta.pk.get_pk_value_on_save(obj)
0.67 query.py(461):             obj._prepare_related_fields_for_save(operation_name='bulk_create')
0.67 query.py(457):         for obj in objs:
0.67 query.py(458):             if obj.pk is None:
0.67 query.py(460):                 obj.pk = obj._meta.pk.get_pk_value_on_save(obj)
0.67 query.py(461):             obj._prepare_related_fields_for_save(operation_name='bulk_create')
0.67 query.py(457):         for obj in objs:
0.67 query.py(458):             if obj.pk is None:
0.67 query.py(460):                 obj.pk = obj._meta.pk.get_pk_value_on_save(obj)
0.67 query.py(461):             obj._prepare_related_fields_for_save(operation_name='bulk_create')
0.67 query.py(457):         for obj in objs:
0.67 query.py(458):             if obj.pk is None:
0.67 query.py(460):                 obj.pk = obj._meta.pk.get_pk_value_on_save(obj)
0.67 query.py(461):             obj._prepare_related_fields_for_save(operation_name='bulk_create')
0.67 query.py(457):         for obj in objs:
0.67 query.py(458):             if obj.pk is None:
0.67 query.py(460):                 obj.pk = obj._meta.pk.get_pk_value_on_save(obj)
0.67 query.py(461):             obj._prepare_related_fields_for_save(operation_name='bulk_create')
0.67 query.py(457):         for obj in objs:
0.67 query.py(458):             if obj.pk is None:
0.67 query.py(460):                 obj.pk = obj._meta.pk.get_pk_value_on_save(obj)
0.67 query.py(461):             obj._prepare_related_fields_for_save(operation_name='bulk_create')
0.67 query.py(457):         for obj in objs:
0.67 query.py(458):             if obj.pk is None:
0.67 query.py(460):                 obj.pk = obj._meta.pk.get_pk_value_on_save(obj)
0.67 query.py(461):             obj._prepare_related_fields_for_save(operation_name='bulk_create')
0.67 query.py(457):         for obj in objs:
0.67 query.py(458):             if obj.pk is None:
0.67 query.py(460):                 obj.pk = obj._meta.pk.get_pk_value_on_save(obj)
0.67 query.py(461):             obj._prepare_related_fields_for_save(operation_name='bulk_create')
0.67 query.py(457):         for obj in objs:
0.67 query.py(458):             if obj.pk is None:
0.67 query.py(460):                 obj.pk = obj._meta.pk.get_pk_value_on_save(obj)
0.67 query.py(461):             obj._prepare_related_fields_for_save(operation_name='bulk_create')
0.67 query.py(457):         for obj in objs:
0.67 query.py(458):             if obj.pk is None:
0.67 query.py(460):                 obj.pk = obj._meta.pk.get_pk_value_on_save(obj)
0.67 query.py(461):             obj._prepare_related_fields_for_save(operation_name='bulk_create')
0.67 query.py(457):         for obj in objs:
0.67 query.py(458):             if obj.pk is None:
0.67 query.py(460):                 obj.pk = obj._meta.pk.get_pk_value_on_save(obj)
0.67 query.py(461):             obj._prepare_related_fields_for_save(operation_name='bulk_create')
0.67 query.py(457):         for obj in objs:
0.67 query.py(499):         with transaction.atomic(using=self.db, savepoint=False):
0.67 query.py(1273):         if self._for_write:
0.67 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.67 query.py(500):             objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)
0.67 query.py(500):             objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)
0.67 query.py(500):             objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)
0.67 query.py(500):             objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)
0.67 query.py(500):             objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)
0.67 query.py(500):             objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)
0.67 query.py(500):             objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)
0.67 query.py(500):             objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)
0.67 query.py(500):             objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)
0.67 query.py(500):             objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)
0.67 query.py(500):             objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)
0.67 query.py(500):             objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)
0.67 query.py(500):             objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)
0.67 query.py(501):             if objs_with_pk:
0.67 query.py(512):             if objs_without_pk:
0.67 query.py(513):                 fields = [f for f in fields if not isinstance(f, AutoField)]
0.67 query.py(513):                 fields = [f for f in fields if not isinstance(f, AutoField)]
0.67 query.py(513):                 fields = [f for f in fields if not isinstance(f, AutoField)]
0.67 query.py(513):                 fields = [f for f in fields if not isinstance(f, AutoField)]
0.67 query.py(513):                 fields = [f for f in fields if not isinstance(f, AutoField)]
0.67 query.py(513):                 fields = [f for f in fields if not isinstance(f, AutoField)]
0.67 query.py(514):                 returned_columns = self._batched_insert(
0.67 query.py(515):                     objs_without_pk, fields, batch_size, ignore_conflicts=ignore_conflicts,
0.67 query.py(514):                 returned_columns = self._batched_insert(
0.67 query.py(1299):         if ignore_conflicts and not connections[self.db].features.supports_ignore_conflicts:
0.67 query.py(1301):         ops = connections[self.db].ops
0.67 query.py(1273):         if self._for_write:
0.67 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.67 query.py(1302):         max_batch_size = max(ops.bulk_batch_size(fields, objs), 1)
0.67 query.py(1303):         batch_size = min(batch_size, max_batch_size) if batch_size else max_batch_size
0.67 query.py(1304):         inserted_rows = []
0.67 query.py(1305):         bulk_return = connections[self.db].features.can_return_rows_from_bulk_insert
0.67 query.py(1273):         if self._for_write:
0.67 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.67 query.py(1306):         for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:
0.67 query.py(1306):         for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:
0.67 query.py(1306):         for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:
0.67 query.py(1307):             if bulk_return and not ignore_conflicts:
0.67 query.py(1308):                 inserted_rows.extend(self._insert(
0.67 query.py(1309):                     item, fields=fields, using=self.db,
0.67 query.py(1273):         if self._for_write:
0.67 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.67 query.py(1310):                     returning_fields=self.model._meta.db_returning_fields,
0.67 query.py(1311):                     ignore_conflicts=ignore_conflicts,
0.67 query.py(1308):                 inserted_rows.extend(self._insert(
0.67 query.py(1286):         self._for_write = True
0.67 query.py(1287):         if using is None:
0.67 query.py(1289):         query = sql.InsertQuery(self.model, ignore_conflicts=ignore_conflicts)
0.67 query.py(1290):         query.insert_values(fields, objs, raw=raw)
0.67 query.py(1291):         return query.get_compiler(using=using).execute_sql(returning_fields)
0.67 query.py(1306):         for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:
0.67 query.py(1315):         return inserted_rows
0.67 query.py(517):                 if connection.features.can_return_rows_from_bulk_insert and not ignore_conflicts:
0.67 query.py(518):                     assert len(returned_columns) == len(objs_without_pk)
0.67 query.py(519):                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):
0.67 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.67 query.py(521):                         setattr(obj_without_pk, field.attname, result)
0.67 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.67 query.py(522):                     obj_without_pk._state.adding = False
0.67 query.py(523):                     obj_without_pk._state.db = self.db
0.67 query.py(1273):         if self._for_write:
0.67 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.67 query.py(519):                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):
0.67 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.67 query.py(521):                         setattr(obj_without_pk, field.attname, result)
0.67 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.67 query.py(522):                     obj_without_pk._state.adding = False
0.67 query.py(523):                     obj_without_pk._state.db = self.db
0.67 query.py(1273):         if self._for_write:
0.67 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.67 query.py(519):                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):
0.67 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.67 query.py(521):                         setattr(obj_without_pk, field.attname, result)
0.67 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.67 query.py(522):                     obj_without_pk._state.adding = False
0.67 query.py(523):                     obj_without_pk._state.db = self.db
0.67 query.py(1273):         if self._for_write:
0.67 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.67 query.py(519):                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):
0.67 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.67 query.py(521):                         setattr(obj_without_pk, field.attname, result)
0.67 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.67 query.py(522):                     obj_without_pk._state.adding = False
0.67 query.py(523):                     obj_without_pk._state.db = self.db
0.67 query.py(1273):         if self._for_write:
0.67 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.67 query.py(519):                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):
0.67 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.67 query.py(521):                         setattr(obj_without_pk, field.attname, result)
0.67 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.67 query.py(522):                     obj_without_pk._state.adding = False
0.67 query.py(523):                     obj_without_pk._state.db = self.db
0.67 query.py(1273):         if self._for_write:
0.67 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.67 query.py(519):                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):
0.67 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.67 query.py(521):                         setattr(obj_without_pk, field.attname, result)
0.67 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.67 query.py(522):                     obj_without_pk._state.adding = False
0.67 query.py(523):                     obj_without_pk._state.db = self.db
0.67 query.py(1273):         if self._for_write:
0.67 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.67 query.py(519):                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):
0.67 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.67 query.py(521):                         setattr(obj_without_pk, field.attname, result)
0.67 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.67 query.py(522):                     obj_without_pk._state.adding = False
0.67 query.py(523):                     obj_without_pk._state.db = self.db
0.67 query.py(1273):         if self._for_write:
0.67 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.67 query.py(519):                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):
0.67 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.67 query.py(521):                         setattr(obj_without_pk, field.attname, result)
0.67 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.67 query.py(522):                     obj_without_pk._state.adding = False
0.67 query.py(523):                     obj_without_pk._state.db = self.db
0.67 query.py(1273):         if self._for_write:
0.67 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.67 query.py(519):                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):
0.67 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.67 query.py(521):                         setattr(obj_without_pk, field.attname, result)
0.67 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.67 query.py(522):                     obj_without_pk._state.adding = False
0.67 query.py(523):                     obj_without_pk._state.db = self.db
0.67 query.py(1273):         if self._for_write:
0.67 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.67 query.py(519):                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):
0.67 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.67 query.py(521):                         setattr(obj_without_pk, field.attname, result)
0.67 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.67 query.py(522):                     obj_without_pk._state.adding = False
0.67 query.py(523):                     obj_without_pk._state.db = self.db
0.67 query.py(1273):         if self._for_write:
0.67 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.67 query.py(519):                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):
0.67 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.67 query.py(521):                         setattr(obj_without_pk, field.attname, result)
0.67 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.67 query.py(522):                     obj_without_pk._state.adding = False
0.67 query.py(523):                     obj_without_pk._state.db = self.db
0.67 query.py(1273):         if self._for_write:
0.67 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.67 query.py(519):                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):
0.67 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.67 query.py(521):                         setattr(obj_without_pk, field.attname, result)
0.67 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.67 query.py(522):                     obj_without_pk._state.adding = False
0.67 query.py(523):                     obj_without_pk._state.db = self.db
0.67 query.py(1273):         if self._for_write:
0.67 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.67 query.py(519):                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):
0.67 query.py(525):         return objs
0.67 query.py(179):         self.model = model
0.67 query.py(180):         self._db = using
0.67 query.py(181):         self._hints = hints or {}
0.67 query.py(182):         self._query = query or sql.Query(self.model)
0.67 query.py(183):         self._result_cache = None
0.67 query.py(184):         self._sticky_filter = False
0.67 query.py(185):         self._for_write = False
0.67 query.py(186):         self._prefetch_related_lookups = ()
0.67 query.py(187):         self._prefetch_done = False
0.67 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.67 query.py(189):         self._iterable_class = ModelIterable
0.67 query.py(190):         self._fields = None
0.67 query.py(191):         self._defer_next_filter = False
0.67 query.py(192):         self._deferred_filter = None
0.67 query.py(1242):         clone = self._chain()
0.67 query.py(1322):         obj = self._clone()
0.67 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.67 query.py(196):         if self._deferred_filter:
0.67 query.py(200):         return self._query
0.67 query.py(179):         self.model = model
0.67 query.py(180):         self._db = using
0.67 query.py(181):         self._hints = hints or {}
0.67 query.py(182):         self._query = query or sql.Query(self.model)
0.67 query.py(183):         self._result_cache = None
0.67 query.py(184):         self._sticky_filter = False
0.67 query.py(185):         self._for_write = False
0.67 query.py(186):         self._prefetch_related_lookups = ()
0.67 query.py(187):         self._prefetch_done = False
0.67 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.67 query.py(189):         self._iterable_class = ModelIterable
0.67 query.py(190):         self._fields = None
0.67 query.py(191):         self._defer_next_filter = False
0.67 query.py(192):         self._deferred_filter = None
0.67 query.py(1335):         c._sticky_filter = self._sticky_filter
0.67 query.py(1336):         c._for_write = self._for_write
0.67 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.67 query.py(1338):         c._known_related_objects = self._known_related_objects
0.67 query.py(1339):         c._iterable_class = self._iterable_class
0.67 query.py(1340):         c._fields = self._fields
0.67 query.py(1341):         return c
0.67 query.py(1323):         if obj._sticky_filter:
0.67 query.py(1326):         obj.__dict__.update(kwargs)
0.67 query.py(1327):         return obj
0.67 query.py(1243):         clone._db = alias
0.67 query.py(1244):         return clone
0.67 query.py(963):         self._not_support_combined_queries('filter')
0.67 query.py(1418):         if self.query.combinator:
0.67 query.py(196):         if self._deferred_filter:
0.67 query.py(200):         return self._query
0.67 query.py(964):         return self._filter_or_exclude(False, args, kwargs)
0.67 query.py(975):         if (args or kwargs) and self.query.is_sliced:
0.67 query.py(196):         if self._deferred_filter:
0.67 query.py(200):         return self._query
0.67 query.py(977):         clone = self._chain()
0.67 query.py(1322):         obj = self._clone()
0.67 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.67 query.py(196):         if self._deferred_filter:
0.67 query.py(200):         return self._query
0.67 query.py(179):         self.model = model
0.67 query.py(180):         self._db = using
0.67 query.py(181):         self._hints = hints or {}
0.67 query.py(182):         self._query = query or sql.Query(self.model)
0.67 query.py(183):         self._result_cache = None
0.67 query.py(184):         self._sticky_filter = False
0.67 query.py(185):         self._for_write = False
0.67 query.py(186):         self._prefetch_related_lookups = ()
0.67 query.py(187):         self._prefetch_done = False
0.67 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.67 query.py(189):         self._iterable_class = ModelIterable
0.67 query.py(190):         self._fields = None
0.67 query.py(191):         self._defer_next_filter = False
0.67 query.py(192):         self._deferred_filter = None
0.67 query.py(1335):         c._sticky_filter = self._sticky_filter
0.67 query.py(1336):         c._for_write = self._for_write
0.67 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.67 query.py(1338):         c._known_related_objects = self._known_related_objects
0.67 query.py(1339):         c._iterable_class = self._iterable_class
0.67 query.py(1340):         c._fields = self._fields
0.67 query.py(1341):         return c
0.67 query.py(1323):         if obj._sticky_filter:
0.67 query.py(1326):         obj.__dict__.update(kwargs)
0.67 query.py(1327):         return obj
0.67 query.py(978):         if self._defer_next_filter:
0.67 query.py(982):             clone._filter_or_exclude_inplace(negate, args, kwargs)
0.67 query.py(986):         if negate:
0.67 query.py(989):             self._query.add_q(Q(*args, **kwargs))
0.67 query.py(983):         return clone
0.67 query.py(280):         self._fetch_all()
0.67 query.py(1344):         if self._result_cache is None:
0.67 query.py(1345):             self._result_cache = list(self._iterable_class(self))
0.67 query.py(37):         self.queryset = queryset
0.67 query.py(38):         self.chunked_fetch = chunked_fetch
0.67 query.py(39):         self.chunk_size = chunk_size
0.67 query.py(46):         queryset = self.queryset
0.67 query.py(47):         db = queryset.db
0.67 query.py(1273):         if self._for_write:
0.67 query.py(1275):         return self._db or router.db_for_read(self.model, **self._hints)
0.67 query.py(48):         compiler = queryset.query.get_compiler(using=db)
0.67 query.py(196):         if self._deferred_filter:
0.67 query.py(200):         return self._query
0.67 query.py(51):         results = compiler.execute_sql(chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size)
0.67 query.py(52):         select, klass_info, annotation_col_map = (compiler.select, compiler.klass_info,
0.67 query.py(53):                                                   compiler.annotation_col_map)
0.67 query.py(52):         select, klass_info, annotation_col_map = (compiler.select, compiler.klass_info,
0.67 query.py(54):         model_cls = klass_info['model']
0.67 query.py(55):         select_fields = klass_info['select_fields']
0.67 query.py(56):         model_fields_start, model_fields_end = select_fields[0], select_fields[-1] + 1
0.67 query.py(57):         init_list = [f[0].target.attname
0.67 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.67 query.py(57):         init_list = [f[0].target.attname
0.67 query.py(57):         init_list = [f[0].target.attname
0.67 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.67 query.py(57):         init_list = [f[0].target.attname
0.67 query.py(57):         init_list = [f[0].target.attname
0.67 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.67 query.py(57):         init_list = [f[0].target.attname
0.67 query.py(57):         init_list = [f[0].target.attname
0.67 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.67 query.py(57):         init_list = [f[0].target.attname
0.67 query.py(57):         init_list = [f[0].target.attname
0.67 query.py(59):         related_populators = get_related_populators(klass_info, select, db)
0.67 query.py(2030):     iterators = []
0.67 query.py(2031):     related_klass_infos = klass_info.get('related_klass_infos', [])
0.67 query.py(2032):     for rel_klass_info in related_klass_infos:
0.67 query.py(2035):     return iterators
0.67 query.py(60):         known_related_objects = [
0.67 query.py(66):             ])) for field, related_objs in queryset._known_related_objects.items()
0.67 query.py(60):         known_related_objects = [
0.67 query.py(60):         known_related_objects = [
0.67 query.py(68):         for row in compiler.results_iter(results):
0.67 query.py(1346):         if self._prefetch_related_lookups and not self._prefetch_done:
0.67 query.py(281):         return iter(self._result_cache)
0.67 query.py(179):         self.model = model
0.67 query.py(180):         self._db = using
0.67 query.py(181):         self._hints = hints or {}
0.67 query.py(182):         self._query = query or sql.Query(self.model)
0.67 query.py(183):         self._result_cache = None
0.67 query.py(184):         self._sticky_filter = False
0.67 query.py(185):         self._for_write = False
0.67 query.py(186):         self._prefetch_related_lookups = ()
0.67 query.py(187):         self._prefetch_done = False
0.67 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.67 query.py(189):         self._iterable_class = ModelIterable
0.67 query.py(190):         self._fields = None
0.67 query.py(191):         self._defer_next_filter = False
0.67 query.py(192):         self._deferred_filter = None
0.67 query.py(1242):         clone = self._chain()
0.67 query.py(1322):         obj = self._clone()
0.67 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.67 query.py(196):         if self._deferred_filter:
0.67 query.py(200):         return self._query
0.67 query.py(179):         self.model = model
0.67 query.py(180):         self._db = using
0.67 query.py(181):         self._hints = hints or {}
0.67 query.py(182):         self._query = query or sql.Query(self.model)
0.67 query.py(183):         self._result_cache = None
0.67 query.py(184):         self._sticky_filter = False
0.67 query.py(185):         self._for_write = False
0.67 query.py(186):         self._prefetch_related_lookups = ()
0.67 query.py(187):         self._prefetch_done = False
0.67 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.67 query.py(189):         self._iterable_class = ModelIterable
0.67 query.py(190):         self._fields = None
0.67 query.py(191):         self._defer_next_filter = False
0.67 query.py(192):         self._deferred_filter = None
0.67 query.py(1335):         c._sticky_filter = self._sticky_filter
0.67 query.py(1336):         c._for_write = self._for_write
0.67 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.67 query.py(1338):         c._known_related_objects = self._known_related_objects
0.67 query.py(1339):         c._iterable_class = self._iterable_class
0.67 query.py(1340):         c._fields = self._fields
0.67 query.py(1341):         return c
0.67 query.py(1323):         if obj._sticky_filter:
0.67 query.py(1326):         obj.__dict__.update(kwargs)
0.67 query.py(1327):         return obj
0.67 query.py(1243):         clone._db = alias
0.67 query.py(1244):         return clone
0.67 query.py(483):         assert batch_size is None or batch_size > 0
0.67 query.py(488):         for parent in self.model._meta.get_parent_list():
0.67 query.py(491):         if not objs:
0.67 query.py(493):         self._for_write = True
0.67 query.py(494):         connection = connections[self.db]
0.67 query.py(1273):         if self._for_write:
0.67 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.67 query.py(495):         opts = self.model._meta
0.67 query.py(496):         fields = opts.concrete_fields
0.67 query.py(497):         objs = list(objs)
0.67 query.py(498):         self._prepare_for_bulk_create(objs)
0.67 query.py(457):         for obj in objs:
0.67 query.py(458):             if obj.pk is None:
0.67 query.py(460):                 obj.pk = obj._meta.pk.get_pk_value_on_save(obj)
0.67 query.py(461):             obj._prepare_related_fields_for_save(operation_name='bulk_create')
0.67 query.py(457):         for obj in objs:
0.67 query.py(499):         with transaction.atomic(using=self.db, savepoint=False):
0.67 query.py(1273):         if self._for_write:
0.67 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.67 query.py(500):             objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)
0.67 query.py(500):             objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)
0.67 query.py(501):             if objs_with_pk:
0.67 query.py(512):             if objs_without_pk:
0.67 query.py(513):                 fields = [f for f in fields if not isinstance(f, AutoField)]
0.67 query.py(513):                 fields = [f for f in fields if not isinstance(f, AutoField)]
0.67 query.py(513):                 fields = [f for f in fields if not isinstance(f, AutoField)]
0.67 query.py(513):                 fields = [f for f in fields if not isinstance(f, AutoField)]
0.67 query.py(513):                 fields = [f for f in fields if not isinstance(f, AutoField)]
0.67 query.py(514):                 returned_columns = self._batched_insert(
0.67 query.py(515):                     objs_without_pk, fields, batch_size, ignore_conflicts=ignore_conflicts,
0.67 query.py(514):                 returned_columns = self._batched_insert(
0.67 query.py(1299):         if ignore_conflicts and not connections[self.db].features.supports_ignore_conflicts:
0.67 query.py(1301):         ops = connections[self.db].ops
0.67 query.py(1273):         if self._for_write:
0.67 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.67 query.py(1302):         max_batch_size = max(ops.bulk_batch_size(fields, objs), 1)
0.67 query.py(1303):         batch_size = min(batch_size, max_batch_size) if batch_size else max_batch_size
0.67 query.py(1304):         inserted_rows = []
0.67 query.py(1305):         bulk_return = connections[self.db].features.can_return_rows_from_bulk_insert
0.67 query.py(1273):         if self._for_write:
0.67 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.67 query.py(1306):         for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:
0.67 query.py(1306):         for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:
0.67 query.py(1306):         for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:
0.67 query.py(1307):             if bulk_return and not ignore_conflicts:
0.67 query.py(1308):                 inserted_rows.extend(self._insert(
0.67 query.py(1309):                     item, fields=fields, using=self.db,
0.67 query.py(1273):         if self._for_write:
0.67 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.67 query.py(1310):                     returning_fields=self.model._meta.db_returning_fields,
0.67 query.py(1311):                     ignore_conflicts=ignore_conflicts,
0.67 query.py(1308):                 inserted_rows.extend(self._insert(
0.67 query.py(1286):         self._for_write = True
0.67 query.py(1287):         if using is None:
0.67 query.py(1289):         query = sql.InsertQuery(self.model, ignore_conflicts=ignore_conflicts)
0.67 query.py(1290):         query.insert_values(fields, objs, raw=raw)
0.67 query.py(1291):         return query.get_compiler(using=using).execute_sql(returning_fields)
0.67 query.py(1306):         for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:
0.67 query.py(1315):         return inserted_rows
0.67 query.py(517):                 if connection.features.can_return_rows_from_bulk_insert and not ignore_conflicts:
0.67 query.py(518):                     assert len(returned_columns) == len(objs_without_pk)
0.67 query.py(519):                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):
0.67 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.67 query.py(521):                         setattr(obj_without_pk, field.attname, result)
0.67 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.67 query.py(522):                     obj_without_pk._state.adding = False
0.67 query.py(523):                     obj_without_pk._state.db = self.db
0.67 query.py(1273):         if self._for_write:
0.67 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.67 query.py(519):                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):
0.67 query.py(525):         return objs
0.67 query.py(179):         self.model = model
0.67 query.py(180):         self._db = using
0.67 query.py(181):         self._hints = hints or {}
0.67 query.py(182):         self._query = query or sql.Query(self.model)
0.67 query.py(183):         self._result_cache = None
0.67 query.py(184):         self._sticky_filter = False
0.67 query.py(185):         self._for_write = False
0.67 query.py(186):         self._prefetch_related_lookups = ()
0.67 query.py(187):         self._prefetch_done = False
0.67 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.67 query.py(189):         self._iterable_class = ModelIterable
0.67 query.py(190):         self._fields = None
0.67 query.py(191):         self._defer_next_filter = False
0.67 query.py(192):         self._deferred_filter = None
0.67 query.py(1242):         clone = self._chain()
0.67 query.py(1322):         obj = self._clone()
0.67 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.67 query.py(196):         if self._deferred_filter:
0.67 query.py(200):         return self._query
0.67 query.py(179):         self.model = model
0.67 query.py(180):         self._db = using
0.67 query.py(181):         self._hints = hints or {}
0.67 query.py(182):         self._query = query or sql.Query(self.model)
0.67 query.py(183):         self._result_cache = None
0.67 query.py(184):         self._sticky_filter = False
0.67 query.py(185):         self._for_write = False
0.67 query.py(186):         self._prefetch_related_lookups = ()
0.67 query.py(187):         self._prefetch_done = False
0.67 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.67 query.py(189):         self._iterable_class = ModelIterable
0.67 query.py(190):         self._fields = None
0.67 query.py(191):         self._defer_next_filter = False
0.67 query.py(192):         self._deferred_filter = None
0.67 query.py(1335):         c._sticky_filter = self._sticky_filter
0.67 query.py(1336):         c._for_write = self._for_write
0.67 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.67 query.py(1338):         c._known_related_objects = self._known_related_objects
0.67 query.py(1339):         c._iterable_class = self._iterable_class
0.67 query.py(1340):         c._fields = self._fields
0.67 query.py(1341):         return c
0.67 query.py(1323):         if obj._sticky_filter:
0.67 query.py(1326):         obj.__dict__.update(kwargs)
0.67 query.py(1327):         return obj
0.67 query.py(1243):         clone._db = alias
0.67 query.py(1244):         return clone
0.67 query.py(963):         self._not_support_combined_queries('filter')
0.67 query.py(1418):         if self.query.combinator:
0.67 query.py(196):         if self._deferred_filter:
0.67 query.py(200):         return self._query
0.67 query.py(964):         return self._filter_or_exclude(False, args, kwargs)
0.67 query.py(975):         if (args or kwargs) and self.query.is_sliced:
0.67 query.py(196):         if self._deferred_filter:
0.67 query.py(200):         return self._query
0.67 query.py(977):         clone = self._chain()
0.67 query.py(1322):         obj = self._clone()
0.67 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.67 query.py(196):         if self._deferred_filter:
0.67 query.py(200):         return self._query
0.67 query.py(179):         self.model = model
0.67 query.py(180):         self._db = using
0.67 query.py(181):         self._hints = hints or {}
0.67 query.py(182):         self._query = query or sql.Query(self.model)
0.67 query.py(183):         self._result_cache = None
0.67 query.py(184):         self._sticky_filter = False
0.67 query.py(185):         self._for_write = False
0.67 query.py(186):         self._prefetch_related_lookups = ()
0.67 query.py(187):         self._prefetch_done = False
0.67 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.67 query.py(189):         self._iterable_class = ModelIterable
0.67 query.py(190):         self._fields = None
0.67 query.py(191):         self._defer_next_filter = False
0.67 query.py(192):         self._deferred_filter = None
0.67 query.py(1335):         c._sticky_filter = self._sticky_filter
0.67 query.py(1336):         c._for_write = self._for_write
0.67 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.67 query.py(1338):         c._known_related_objects = self._known_related_objects
0.67 query.py(1339):         c._iterable_class = self._iterable_class
0.67 query.py(1340):         c._fields = self._fields
0.67 query.py(1341):         return c
0.67 query.py(1323):         if obj._sticky_filter:
0.67 query.py(1326):         obj.__dict__.update(kwargs)
0.67 query.py(1327):         return obj
0.67 query.py(978):         if self._defer_next_filter:
0.67 query.py(982):             clone._filter_or_exclude_inplace(negate, args, kwargs)
0.67 query.py(986):         if negate:
0.67 query.py(989):             self._query.add_q(Q(*args, **kwargs))
0.67 query.py(983):         return clone
0.67 query.py(280):         self._fetch_all()
0.67 query.py(1344):         if self._result_cache is None:
0.67 query.py(1345):             self._result_cache = list(self._iterable_class(self))
0.67 query.py(37):         self.queryset = queryset
0.67 query.py(38):         self.chunked_fetch = chunked_fetch
0.67 query.py(39):         self.chunk_size = chunk_size
0.67 query.py(46):         queryset = self.queryset
0.67 query.py(47):         db = queryset.db
0.67 query.py(1273):         if self._for_write:
0.67 query.py(1275):         return self._db or router.db_for_read(self.model, **self._hints)
0.67 query.py(48):         compiler = queryset.query.get_compiler(using=db)
0.67 query.py(196):         if self._deferred_filter:
0.67 query.py(200):         return self._query
0.67 query.py(51):         results = compiler.execute_sql(chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size)
0.67 query.py(52):         select, klass_info, annotation_col_map = (compiler.select, compiler.klass_info,
0.67 query.py(53):                                                   compiler.annotation_col_map)
0.67 query.py(52):         select, klass_info, annotation_col_map = (compiler.select, compiler.klass_info,
0.67 query.py(54):         model_cls = klass_info['model']
0.67 query.py(55):         select_fields = klass_info['select_fields']
0.67 query.py(56):         model_fields_start, model_fields_end = select_fields[0], select_fields[-1] + 1
0.67 query.py(57):         init_list = [f[0].target.attname
0.67 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.67 query.py(57):         init_list = [f[0].target.attname
0.67 query.py(57):         init_list = [f[0].target.attname
0.67 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.67 query.py(57):         init_list = [f[0].target.attname
0.67 query.py(57):         init_list = [f[0].target.attname
0.67 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.67 query.py(57):         init_list = [f[0].target.attname
0.67 query.py(57):         init_list = [f[0].target.attname
0.67 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.67 query.py(57):         init_list = [f[0].target.attname
0.67 query.py(57):         init_list = [f[0].target.attname
0.67 query.py(59):         related_populators = get_related_populators(klass_info, select, db)
0.67 query.py(2030):     iterators = []
0.67 query.py(2031):     related_klass_infos = klass_info.get('related_klass_infos', [])
0.67 query.py(2032):     for rel_klass_info in related_klass_infos:
0.67 query.py(2035):     return iterators
0.67 query.py(60):         known_related_objects = [
0.67 query.py(66):             ])) for field, related_objs in queryset._known_related_objects.items()
0.67 query.py(60):         known_related_objects = [
0.67 query.py(60):         known_related_objects = [
0.67 query.py(68):         for row in compiler.results_iter(results):
0.67 query.py(69):             obj = model_cls.from_db(db, init_list, row[model_fields_start:model_fields_end])
0.67 query.py(70):             for rel_populator in related_populators:
0.67 query.py(72):             if annotation_col_map:
0.67 query.py(77):             for field, rel_objs, rel_getter in known_related_objects:
0.67 query.py(89):             yield obj
0.67 query.py(68):         for row in compiler.results_iter(results):
0.67 query.py(1346):         if self._prefetch_related_lookups and not self._prefetch_done:
0.67 query.py(281):         return iter(self._result_cache)
0.67 query.py(179):         self.model = model
0.67 query.py(180):         self._db = using
0.67 query.py(181):         self._hints = hints or {}
0.67 query.py(182):         self._query = query or sql.Query(self.model)
0.67 query.py(183):         self._result_cache = None
0.67 query.py(184):         self._sticky_filter = False
0.67 query.py(185):         self._for_write = False
0.67 query.py(186):         self._prefetch_related_lookups = ()
0.67 query.py(187):         self._prefetch_done = False
0.67 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.67 query.py(189):         self._iterable_class = ModelIterable
0.67 query.py(190):         self._fields = None
0.67 query.py(191):         self._defer_next_filter = False
0.67 query.py(192):         self._deferred_filter = None
0.67 query.py(1242):         clone = self._chain()
0.67 query.py(1322):         obj = self._clone()
0.67 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.67 query.py(196):         if self._deferred_filter:
0.67 query.py(200):         return self._query
0.67 query.py(179):         self.model = model
0.67 query.py(180):         self._db = using
0.67 query.py(181):         self._hints = hints or {}
0.67 query.py(182):         self._query = query or sql.Query(self.model)
0.67 query.py(183):         self._result_cache = None
0.67 query.py(184):         self._sticky_filter = False
0.67 query.py(185):         self._for_write = False
0.67 query.py(186):         self._prefetch_related_lookups = ()
0.67 query.py(187):         self._prefetch_done = False
0.67 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.67 query.py(189):         self._iterable_class = ModelIterable
0.67 query.py(190):         self._fields = None
0.67 query.py(191):         self._defer_next_filter = False
0.67 query.py(192):         self._deferred_filter = None
0.67 query.py(1335):         c._sticky_filter = self._sticky_filter
0.67 query.py(1336):         c._for_write = self._for_write
0.67 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.67 query.py(1338):         c._known_related_objects = self._known_related_objects
0.67 query.py(1339):         c._iterable_class = self._iterable_class
0.67 query.py(1340):         c._fields = self._fields
0.67 query.py(1341):         return c
0.67 query.py(1323):         if obj._sticky_filter:
0.67 query.py(1326):         obj.__dict__.update(kwargs)
0.67 query.py(1327):         return obj
0.67 query.py(1243):         clone._db = alias
0.67 query.py(1244):         return clone
0.67 query.py(483):         assert batch_size is None or batch_size > 0
0.67 query.py(488):         for parent in self.model._meta.get_parent_list():
0.67 query.py(491):         if not objs:
0.67 query.py(492):             return objs
0.67 query.py(179):         self.model = model
0.67 query.py(180):         self._db = using
0.67 query.py(181):         self._hints = hints or {}
0.67 query.py(182):         self._query = query or sql.Query(self.model)
0.67 query.py(183):         self._result_cache = None
0.67 query.py(184):         self._sticky_filter = False
0.67 query.py(185):         self._for_write = False
0.67 query.py(186):         self._prefetch_related_lookups = ()
0.67 query.py(187):         self._prefetch_done = False
0.67 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.67 query.py(189):         self._iterable_class = ModelIterable
0.67 query.py(190):         self._fields = None
0.67 query.py(191):         self._defer_next_filter = False
0.67 query.py(192):         self._deferred_filter = None
0.67 query.py(419):         if self.query.combinator and (args or kwargs):
0.67 query.py(196):         if self._deferred_filter:
0.67 query.py(200):         return self._query
0.67 query.py(424):         clone = self._chain() if self.query.combinator else self.filter(*args, **kwargs)
0.67 query.py(196):         if self._deferred_filter:
0.67 query.py(200):         return self._query
0.67 query.py(963):         self._not_support_combined_queries('filter')
0.67 query.py(1418):         if self.query.combinator:
0.67 query.py(196):         if self._deferred_filter:
0.67 query.py(200):         return self._query
0.67 query.py(964):         return self._filter_or_exclude(False, args, kwargs)
0.67 query.py(975):         if (args or kwargs) and self.query.is_sliced:
0.67 query.py(196):         if self._deferred_filter:
0.67 query.py(200):         return self._query
0.67 query.py(977):         clone = self._chain()
0.67 query.py(1322):         obj = self._clone()
0.67 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.67 query.py(196):         if self._deferred_filter:
0.67 query.py(200):         return self._query
0.67 query.py(179):         self.model = model
0.67 query.py(180):         self._db = using
0.67 query.py(181):         self._hints = hints or {}
0.67 query.py(182):         self._query = query or sql.Query(self.model)
0.67 query.py(183):         self._result_cache = None
0.67 query.py(184):         self._sticky_filter = False
0.67 query.py(185):         self._for_write = False
0.67 query.py(186):         self._prefetch_related_lookups = ()
0.67 query.py(187):         self._prefetch_done = False
0.67 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.67 query.py(189):         self._iterable_class = ModelIterable
0.67 query.py(190):         self._fields = None
0.67 query.py(191):         self._defer_next_filter = False
0.67 query.py(192):         self._deferred_filter = None
0.67 query.py(1335):         c._sticky_filter = self._sticky_filter
0.67 query.py(1336):         c._for_write = self._for_write
0.67 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.67 query.py(1338):         c._known_related_objects = self._known_related_objects
0.67 query.py(1339):         c._iterable_class = self._iterable_class
0.67 query.py(1340):         c._fields = self._fields
0.67 query.py(1341):         return c
0.67 query.py(1323):         if obj._sticky_filter:
0.67 query.py(1326):         obj.__dict__.update(kwargs)
0.67 query.py(1327):         return obj
0.67 query.py(978):         if self._defer_next_filter:
0.67 query.py(982):             clone._filter_or_exclude_inplace(negate, args, kwargs)
0.67 query.py(986):         if negate:
0.67 query.py(989):             self._query.add_q(Q(*args, **kwargs))
0.67 query.py(983):         return clone
0.67 query.py(425):         if self.query.can_filter() and not self.query.distinct_fields:
0.67 query.py(196):         if self._deferred_filter:
0.67 query.py(200):         return self._query
0.67 query.py(196):         if self._deferred_filter:
0.67 query.py(200):         return self._query
0.67 query.py(426):             clone = clone.order_by()
0.67 query.py(1166):         if self.query.is_sliced:
0.67 query.py(196):         if self._deferred_filter:
0.67 query.py(200):         return self._query
0.67 query.py(1168):         obj = self._chain()
0.67 query.py(1322):         obj = self._clone()
0.67 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.67 query.py(196):         if self._deferred_filter:
0.67 query.py(200):         return self._query
0.67 query.py(179):         self.model = model
0.67 query.py(180):         self._db = using
0.67 query.py(181):         self._hints = hints or {}
0.67 query.py(182):         self._query = query or sql.Query(self.model)
0.67 query.py(183):         self._result_cache = None
0.67 query.py(184):         self._sticky_filter = False
0.67 query.py(185):         self._for_write = False
0.67 query.py(186):         self._prefetch_related_lookups = ()
0.67 query.py(187):         self._prefetch_done = False
0.67 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.67 query.py(189):         self._iterable_class = ModelIterable
0.67 query.py(190):         self._fields = None
0.67 query.py(191):         self._defer_next_filter = False
0.67 query.py(192):         self._deferred_filter = None
0.67 query.py(1335):         c._sticky_filter = self._sticky_filter
0.67 query.py(1336):         c._for_write = self._for_write
0.67 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.67 query.py(1338):         c._known_related_objects = self._known_related_objects
0.67 query.py(1339):         c._iterable_class = self._iterable_class
0.67 query.py(1340):         c._fields = self._fields
0.67 query.py(1341):         return c
0.67 query.py(1323):         if obj._sticky_filter:
0.67 query.py(1326):         obj.__dict__.update(kwargs)
0.67 query.py(1327):         return obj
0.67 query.py(1169):         obj.query.clear_ordering(force_empty=False)
0.67 query.py(196):         if self._deferred_filter:
0.67 query.py(200):         return self._query
0.67 query.py(1170):         obj.query.add_ordering(*field_names)
0.67 query.py(196):         if self._deferred_filter:
0.67 query.py(200):         return self._query
0.67 query.py(1171):         return obj
0.67 query.py(427):         limit = None
0.67 query.py(428):         if not clone.query.select_for_update or connections[clone.db].features.supports_select_for_update_with_limit:
0.67 query.py(196):         if self._deferred_filter:
0.67 query.py(200):         return self._query
0.67 query.py(429):             limit = MAX_GET_RESULTS
0.67 query.py(430):             clone.query.set_limits(high=limit)
0.67 query.py(196):         if self._deferred_filter:
0.67 query.py(200):         return self._query
0.67 query.py(431):         num = len(clone)
0.67 query.py(262):         self._fetch_all()
0.67 query.py(1344):         if self._result_cache is None:
0.67 query.py(1345):             self._result_cache = list(self._iterable_class(self))
0.67 query.py(37):         self.queryset = queryset
0.67 query.py(38):         self.chunked_fetch = chunked_fetch
0.67 query.py(39):         self.chunk_size = chunk_size
0.67 query.py(46):         queryset = self.queryset
0.67 query.py(47):         db = queryset.db
0.67 query.py(1273):         if self._for_write:
0.67 query.py(1275):         return self._db or router.db_for_read(self.model, **self._hints)
0.67 query.py(48):         compiler = queryset.query.get_compiler(using=db)
0.67 query.py(196):         if self._deferred_filter:
0.67 query.py(200):         return self._query
0.67 query.py(51):         results = compiler.execute_sql(chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size)
0.67 query.py(52):         select, klass_info, annotation_col_map = (compiler.select, compiler.klass_info,
0.67 query.py(53):                                                   compiler.annotation_col_map)
0.67 query.py(52):         select, klass_info, annotation_col_map = (compiler.select, compiler.klass_info,
0.67 query.py(54):         model_cls = klass_info['model']
0.67 query.py(55):         select_fields = klass_info['select_fields']
0.67 query.py(56):         model_fields_start, model_fields_end = select_fields[0], select_fields[-1] + 1
0.67 query.py(57):         init_list = [f[0].target.attname
0.67 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.67 query.py(57):         init_list = [f[0].target.attname
0.67 query.py(57):         init_list = [f[0].target.attname
0.67 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.67 query.py(57):         init_list = [f[0].target.attname
0.67 query.py(57):         init_list = [f[0].target.attname
0.67 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.67 query.py(57):         init_list = [f[0].target.attname
0.67 query.py(57):         init_list = [f[0].target.attname
0.67 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.67 query.py(57):         init_list = [f[0].target.attname
0.67 query.py(57):         init_list = [f[0].target.attname
0.67 query.py(59):         related_populators = get_related_populators(klass_info, select, db)
0.67 query.py(2030):     iterators = []
0.67 query.py(2031):     related_klass_infos = klass_info.get('related_klass_infos', [])
0.67 query.py(2032):     for rel_klass_info in related_klass_infos:
0.67 query.py(2035):     return iterators
0.67 query.py(60):         known_related_objects = [
0.67 query.py(66):             ])) for field, related_objs in queryset._known_related_objects.items()
0.67 query.py(60):         known_related_objects = [
0.67 query.py(60):         known_related_objects = [
0.67 query.py(68):         for row in compiler.results_iter(results):
0.67 query.py(69):             obj = model_cls.from_db(db, init_list, row[model_fields_start:model_fields_end])
0.67 query.py(70):             for rel_populator in related_populators:
0.67 query.py(72):             if annotation_col_map:
0.67 query.py(77):             for field, rel_objs, rel_getter in known_related_objects:
0.67 query.py(89):             yield obj
0.67 query.py(68):         for row in compiler.results_iter(results):
0.67 query.py(1346):         if self._prefetch_related_lookups and not self._prefetch_done:
0.67 query.py(263):         return len(self._result_cache)
0.67 query.py(432):         if num == 1:
0.67 query.py(433):             return clone._result_cache[0]
0.67 query.py(179):         self.model = model
0.67 query.py(180):         self._db = using
0.67 query.py(181):         self._hints = hints or {}
0.67 query.py(182):         self._query = query or sql.Query(self.model)
0.67 query.py(183):         self._result_cache = None
0.67 query.py(184):         self._sticky_filter = False
0.67 query.py(185):         self._for_write = False
0.67 query.py(186):         self._prefetch_related_lookups = ()
0.67 query.py(187):         self._prefetch_done = False
0.67 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.67 query.py(189):         self._iterable_class = ModelIterable
0.67 query.py(190):         self._fields = None
0.67 query.py(191):         self._defer_next_filter = False
0.67 query.py(192):         self._deferred_filter = None
0.67 query.py(1242):         clone = self._chain()
0.67 query.py(1322):         obj = self._clone()
0.67 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.67 query.py(196):         if self._deferred_filter:
0.67 query.py(200):         return self._query
0.67 query.py(179):         self.model = model
0.67 query.py(180):         self._db = using
0.67 query.py(181):         self._hints = hints or {}
0.67 query.py(182):         self._query = query or sql.Query(self.model)
0.67 query.py(183):         self._result_cache = None
0.67 query.py(184):         self._sticky_filter = False
0.67 query.py(185):         self._for_write = False
0.67 query.py(186):         self._prefetch_related_lookups = ()
0.67 query.py(187):         self._prefetch_done = False
0.67 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.67 query.py(189):         self._iterable_class = ModelIterable
0.67 query.py(190):         self._fields = None
0.67 query.py(191):         self._defer_next_filter = False
0.67 query.py(192):         self._deferred_filter = None
0.67 query.py(1335):         c._sticky_filter = self._sticky_filter
0.67 query.py(1336):         c._for_write = self._for_write
0.67 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.67 query.py(1338):         c._known_related_objects = self._known_related_objects
0.67 query.py(1339):         c._iterable_class = self._iterable_class
0.67 query.py(1340):         c._fields = self._fields
0.67 query.py(1341):         return c
0.67 query.py(1323):         if obj._sticky_filter:
0.67 query.py(1326):         obj.__dict__.update(kwargs)
0.67 query.py(1327):         return obj
0.67 query.py(1243):         clone._db = alias
0.67 query.py(1244):         return clone
0.67 query.py(963):         self._not_support_combined_queries('filter')
0.67 query.py(1418):         if self.query.combinator:
0.67 query.py(196):         if self._deferred_filter:
0.67 query.py(200):         return self._query
0.67 query.py(964):         return self._filter_or_exclude(False, args, kwargs)
0.67 query.py(975):         if (args or kwargs) and self.query.is_sliced:
0.67 query.py(196):         if self._deferred_filter:
0.67 query.py(200):         return self._query
0.67 query.py(977):         clone = self._chain()
0.67 query.py(1322):         obj = self._clone()
0.67 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.67 query.py(196):         if self._deferred_filter:
0.67 query.py(200):         return self._query
0.67 query.py(179):         self.model = model
0.67 query.py(180):         self._db = using
0.67 query.py(181):         self._hints = hints or {}
0.67 query.py(182):         self._query = query or sql.Query(self.model)
0.67 query.py(183):         self._result_cache = None
0.67 query.py(184):         self._sticky_filter = False
0.67 query.py(185):         self._for_write = False
0.67 query.py(186):         self._prefetch_related_lookups = ()
0.67 query.py(187):         self._prefetch_done = False
0.67 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.67 query.py(189):         self._iterable_class = ModelIterable
0.67 query.py(190):         self._fields = None
0.67 query.py(191):         self._defer_next_filter = False
0.67 query.py(192):         self._deferred_filter = None
0.67 query.py(1335):         c._sticky_filter = self._sticky_filter
0.67 query.py(1336):         c._for_write = self._for_write
0.67 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.67 query.py(1338):         c._known_related_objects = self._known_related_objects
0.67 query.py(1339):         c._iterable_class = self._iterable_class
0.67 query.py(1340):         c._fields = self._fields
0.67 query.py(1341):         return c
0.67 query.py(1323):         if obj._sticky_filter:
0.67 query.py(1326):         obj.__dict__.update(kwargs)
0.67 query.py(1327):         return obj
0.67 query.py(978):         if self._defer_next_filter:
0.67 query.py(982):             clone._filter_or_exclude_inplace(negate, args, kwargs)
0.67 query.py(986):         if negate:
0.67 query.py(989):             self._query.add_q(Q(*args, **kwargs))
0.67 query.py(983):         return clone
0.67 query.py(868):         if flat and named:
0.67 query.py(870):         if flat and len(fields) > 1:
0.67 query.py(873):         field_names = {f for f in fields if not hasattr(f, 'resolve_expression')}
0.67 query.py(873):         field_names = {f for f in fields if not hasattr(f, 'resolve_expression')}
0.67 query.py(873):         field_names = {f for f in fields if not hasattr(f, 'resolve_expression')}
0.67 query.py(873):         field_names = {f for f in fields if not hasattr(f, 'resolve_expression')}
0.67 query.py(874):         _fields = []
0.67 query.py(875):         expressions = {}
0.67 query.py(876):         counter = 1
0.67 query.py(877):         for field in fields:
0.67 query.py(878):             if hasattr(field, 'resolve_expression'):
0.67 query.py(888):                 _fields.append(field)
0.67 query.py(877):         for field in fields:
0.67 query.py(878):             if hasattr(field, 'resolve_expression'):
0.67 query.py(888):                 _fields.append(field)
0.67 query.py(877):         for field in fields:
0.67 query.py(890):         clone = self._values(*_fields, **expressions)
0.67 query.py(854):         clone = self._chain()
0.67 query.py(1322):         obj = self._clone()
0.67 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.67 query.py(196):         if self._deferred_filter:
0.67 query.py(200):         return self._query
0.67 query.py(179):         self.model = model
0.67 query.py(180):         self._db = using
0.67 query.py(181):         self._hints = hints or {}
0.67 query.py(182):         self._query = query or sql.Query(self.model)
0.67 query.py(183):         self._result_cache = None
0.67 query.py(184):         self._sticky_filter = False
0.67 query.py(185):         self._for_write = False
0.67 query.py(186):         self._prefetch_related_lookups = ()
0.67 query.py(187):         self._prefetch_done = False
0.67 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.67 query.py(189):         self._iterable_class = ModelIterable
0.67 query.py(190):         self._fields = None
0.67 query.py(191):         self._defer_next_filter = False
0.67 query.py(192):         self._deferred_filter = None
0.67 query.py(1335):         c._sticky_filter = self._sticky_filter
0.67 query.py(1336):         c._for_write = self._for_write
0.67 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.67 query.py(1338):         c._known_related_objects = self._known_related_objects
0.67 query.py(1339):         c._iterable_class = self._iterable_class
0.67 query.py(1340):         c._fields = self._fields
0.67 query.py(1341):         return c
0.67 query.py(1323):         if obj._sticky_filter:
0.67 query.py(1326):         obj.__dict__.update(kwargs)
0.67 query.py(1327):         return obj
0.67 query.py(855):         if expressions:
0.67 query.py(857):         clone._fields = fields
0.67 query.py(858):         clone.query.set_values(fields)
0.67 query.py(196):         if self._deferred_filter:
0.67 query.py(200):         return self._query
0.67 query.py(859):         return clone
0.67 query.py(892):             NamedValuesListIterable if named
0.67 query.py(893):             else FlatValuesListIterable if flat
0.67 query.py(894):             else ValuesListIterable
0.67 query.py(891):         clone._iterable_class = (
0.67 query.py(896):         return clone
0.67 query.py(280):         self._fetch_all()
0.67 query.py(1344):         if self._result_cache is None:
0.67 query.py(1345):             self._result_cache = list(self._iterable_class(self))
0.67 query.py(37):         self.queryset = queryset
0.67 query.py(38):         self.chunked_fetch = chunked_fetch
0.67 query.py(39):         self.chunk_size = chunk_size
0.67 query.py(120):         queryset = self.queryset
0.67 query.py(121):         query = queryset.query
0.67 query.py(196):         if self._deferred_filter:
0.67 query.py(200):         return self._query
0.67 query.py(122):         compiler = query.get_compiler(queryset.db)
0.67 query.py(1273):         if self._for_write:
0.67 query.py(1275):         return self._db or router.db_for_read(self.model, **self._hints)
0.67 query.py(124):         if queryset._fields:
0.67 query.py(127):                 *query.extra_select,
0.67 query.py(128):                 *query.values_select,
0.67 query.py(129):                 *query.annotation_select,
0.67 query.py(126):             names = [
0.67 query.py(131):             fields = [*queryset._fields, *(f for f in query.annotation_select if f not in queryset._fields)]
0.67 query.py(131):             fields = [*queryset._fields, *(f for f in query.annotation_select if f not in queryset._fields)]
0.67 query.py(132):             if fields != names:
0.67 query.py(140):         return compiler.results_iter(tuple_expected=True, chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size)
0.67 query.py(1346):         if self._prefetch_related_lookups and not self._prefetch_done:
0.67 query.py(281):         return iter(self._result_cache)
0.67 query.py(179):         self.model = model
0.67 query.py(180):         self._db = using
0.67 query.py(181):         self._hints = hints or {}
0.67 query.py(182):         self._query = query or sql.Query(self.model)
0.67 query.py(183):         self._result_cache = None
0.67 query.py(184):         self._sticky_filter = False
0.67 query.py(185):         self._for_write = False
0.67 query.py(186):         self._prefetch_related_lookups = ()
0.67 query.py(187):         self._prefetch_done = False
0.67 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.67 query.py(189):         self._iterable_class = ModelIterable
0.67 query.py(190):         self._fields = None
0.67 query.py(191):         self._defer_next_filter = False
0.67 query.py(192):         self._deferred_filter = None
0.67 query.py(1242):         clone = self._chain()
0.67 query.py(1322):         obj = self._clone()
0.67 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.67 query.py(196):         if self._deferred_filter:
0.67 query.py(200):         return self._query
0.67 query.py(179):         self.model = model
0.67 query.py(180):         self._db = using
0.67 query.py(181):         self._hints = hints or {}
0.67 query.py(182):         self._query = query or sql.Query(self.model)
0.67 query.py(183):         self._result_cache = None
0.67 query.py(184):         self._sticky_filter = False
0.67 query.py(185):         self._for_write = False
0.67 query.py(186):         self._prefetch_related_lookups = ()
0.67 query.py(187):         self._prefetch_done = False
0.67 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.67 query.py(189):         self._iterable_class = ModelIterable
0.67 query.py(190):         self._fields = None
0.67 query.py(191):         self._defer_next_filter = False
0.67 query.py(192):         self._deferred_filter = None
0.67 query.py(1335):         c._sticky_filter = self._sticky_filter
0.67 query.py(1336):         c._for_write = self._for_write
0.67 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.67 query.py(1338):         c._known_related_objects = self._known_related_objects
0.67 query.py(1339):         c._iterable_class = self._iterable_class
0.67 query.py(1340):         c._fields = self._fields
0.67 query.py(1341):         return c
0.67 query.py(1323):         if obj._sticky_filter:
0.67 query.py(1326):         obj.__dict__.update(kwargs)
0.67 query.py(1327):         return obj
0.67 query.py(1243):         clone._db = alias
0.67 query.py(1244):         return clone
0.67 query.py(483):         assert batch_size is None or batch_size > 0
0.67 query.py(488):         for parent in self.model._meta.get_parent_list():
0.67 query.py(491):         if not objs:
0.67 query.py(493):         self._for_write = True
0.67 query.py(494):         connection = connections[self.db]
0.67 query.py(1273):         if self._for_write:
0.67 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.67 query.py(495):         opts = self.model._meta
0.67 query.py(496):         fields = opts.concrete_fields
0.67 query.py(497):         objs = list(objs)
0.67 query.py(498):         self._prepare_for_bulk_create(objs)
0.67 query.py(457):         for obj in objs:
0.67 query.py(458):             if obj.pk is None:
0.67 query.py(460):                 obj.pk = obj._meta.pk.get_pk_value_on_save(obj)
0.67 query.py(461):             obj._prepare_related_fields_for_save(operation_name='bulk_create')
0.67 query.py(457):         for obj in objs:
0.67 query.py(458):             if obj.pk is None:
0.67 query.py(460):                 obj.pk = obj._meta.pk.get_pk_value_on_save(obj)
0.67 query.py(461):             obj._prepare_related_fields_for_save(operation_name='bulk_create')
0.67 query.py(457):         for obj in objs:
0.67 query.py(458):             if obj.pk is None:
0.67 query.py(460):                 obj.pk = obj._meta.pk.get_pk_value_on_save(obj)
0.67 query.py(461):             obj._prepare_related_fields_for_save(operation_name='bulk_create')
0.67 query.py(457):         for obj in objs:
0.67 query.py(458):             if obj.pk is None:
0.67 query.py(460):                 obj.pk = obj._meta.pk.get_pk_value_on_save(obj)
0.67 query.py(461):             obj._prepare_related_fields_for_save(operation_name='bulk_create')
0.67 query.py(457):         for obj in objs:
0.67 query.py(499):         with transaction.atomic(using=self.db, savepoint=False):
0.67 query.py(1273):         if self._for_write:
0.67 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.67 query.py(500):             objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)
0.67 query.py(500):             objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)
0.67 query.py(500):             objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)
0.67 query.py(500):             objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)
0.67 query.py(500):             objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)
0.67 query.py(501):             if objs_with_pk:
0.67 query.py(512):             if objs_without_pk:
0.67 query.py(513):                 fields = [f for f in fields if not isinstance(f, AutoField)]
0.67 query.py(513):                 fields = [f for f in fields if not isinstance(f, AutoField)]
0.67 query.py(513):                 fields = [f for f in fields if not isinstance(f, AutoField)]
0.67 query.py(513):                 fields = [f for f in fields if not isinstance(f, AutoField)]
0.67 query.py(513):                 fields = [f for f in fields if not isinstance(f, AutoField)]
0.67 query.py(513):                 fields = [f for f in fields if not isinstance(f, AutoField)]
0.67 query.py(514):                 returned_columns = self._batched_insert(
0.67 query.py(515):                     objs_without_pk, fields, batch_size, ignore_conflicts=ignore_conflicts,
0.67 query.py(514):                 returned_columns = self._batched_insert(
0.67 query.py(1299):         if ignore_conflicts and not connections[self.db].features.supports_ignore_conflicts:
0.67 query.py(1301):         ops = connections[self.db].ops
0.67 query.py(1273):         if self._for_write:
0.67 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.67 query.py(1302):         max_batch_size = max(ops.bulk_batch_size(fields, objs), 1)
0.67 query.py(1303):         batch_size = min(batch_size, max_batch_size) if batch_size else max_batch_size
0.67 query.py(1304):         inserted_rows = []
0.67 query.py(1305):         bulk_return = connections[self.db].features.can_return_rows_from_bulk_insert
0.67 query.py(1273):         if self._for_write:
0.67 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.67 query.py(1306):         for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:
0.67 query.py(1306):         for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:
0.67 query.py(1306):         for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:
0.67 query.py(1307):             if bulk_return and not ignore_conflicts:
0.67 query.py(1308):                 inserted_rows.extend(self._insert(
0.67 query.py(1309):                     item, fields=fields, using=self.db,
0.67 query.py(1273):         if self._for_write:
0.67 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.67 query.py(1310):                     returning_fields=self.model._meta.db_returning_fields,
0.67 query.py(1311):                     ignore_conflicts=ignore_conflicts,
0.67 query.py(1308):                 inserted_rows.extend(self._insert(
0.67 query.py(1286):         self._for_write = True
0.67 query.py(1287):         if using is None:
0.67 query.py(1289):         query = sql.InsertQuery(self.model, ignore_conflicts=ignore_conflicts)
0.67 query.py(1290):         query.insert_values(fields, objs, raw=raw)
0.67 query.py(1291):         return query.get_compiler(using=using).execute_sql(returning_fields)
0.67 query.py(1306):         for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:
0.67 query.py(1315):         return inserted_rows
0.67 query.py(517):                 if connection.features.can_return_rows_from_bulk_insert and not ignore_conflicts:
0.67 query.py(518):                     assert len(returned_columns) == len(objs_without_pk)
0.67 query.py(519):                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):
0.67 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.67 query.py(521):                         setattr(obj_without_pk, field.attname, result)
0.67 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.67 query.py(522):                     obj_without_pk._state.adding = False
0.67 query.py(523):                     obj_without_pk._state.db = self.db
0.67 query.py(1273):         if self._for_write:
0.67 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.67 query.py(519):                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):
0.67 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.67 query.py(521):                         setattr(obj_without_pk, field.attname, result)
0.67 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.67 query.py(522):                     obj_without_pk._state.adding = False
0.67 query.py(523):                     obj_without_pk._state.db = self.db
0.67 query.py(1273):         if self._for_write:
0.67 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.67 query.py(519):                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):
0.67 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.67 query.py(521):                         setattr(obj_without_pk, field.attname, result)
0.67 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.67 query.py(522):                     obj_without_pk._state.adding = False
0.67 query.py(523):                     obj_without_pk._state.db = self.db
0.67 query.py(1273):         if self._for_write:
0.67 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.67 query.py(519):                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):
0.67 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.67 query.py(521):                         setattr(obj_without_pk, field.attname, result)
0.67 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.67 query.py(522):                     obj_without_pk._state.adding = False
0.67 query.py(523):                     obj_without_pk._state.db = self.db
0.67 query.py(1273):         if self._for_write:
0.67 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.67 query.py(519):                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):
0.67 query.py(525):         return objs
0.67 query.py(179):         self.model = model
0.67 query.py(180):         self._db = using
0.67 query.py(181):         self._hints = hints or {}
0.67 query.py(182):         self._query = query or sql.Query(self.model)
0.67 query.py(183):         self._result_cache = None
0.67 query.py(184):         self._sticky_filter = False
0.67 query.py(185):         self._for_write = False
0.67 query.py(186):         self._prefetch_related_lookups = ()
0.67 query.py(187):         self._prefetch_done = False
0.67 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.67 query.py(189):         self._iterable_class = ModelIterable
0.67 query.py(190):         self._fields = None
0.67 query.py(191):         self._defer_next_filter = False
0.67 query.py(192):         self._deferred_filter = None
0.67 query.py(1242):         clone = self._chain()
0.67 query.py(1322):         obj = self._clone()
0.67 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.67 query.py(196):         if self._deferred_filter:
0.67 query.py(200):         return self._query
0.67 query.py(179):         self.model = model
0.67 query.py(180):         self._db = using
0.67 query.py(181):         self._hints = hints or {}
0.67 query.py(182):         self._query = query or sql.Query(self.model)
0.67 query.py(183):         self._result_cache = None
0.67 query.py(184):         self._sticky_filter = False
0.67 query.py(185):         self._for_write = False
0.67 query.py(186):         self._prefetch_related_lookups = ()
0.67 query.py(187):         self._prefetch_done = False
0.67 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.67 query.py(189):         self._iterable_class = ModelIterable
0.67 query.py(190):         self._fields = None
0.67 query.py(191):         self._defer_next_filter = False
0.67 query.py(192):         self._deferred_filter = None
0.67 query.py(1335):         c._sticky_filter = self._sticky_filter
0.67 query.py(1336):         c._for_write = self._for_write
0.67 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.67 query.py(1338):         c._known_related_objects = self._known_related_objects
0.67 query.py(1339):         c._iterable_class = self._iterable_class
0.67 query.py(1340):         c._fields = self._fields
0.67 query.py(1341):         return c
0.67 query.py(1323):         if obj._sticky_filter:
0.67 query.py(1326):         obj.__dict__.update(kwargs)
0.67 query.py(1327):         return obj
0.67 query.py(1243):         clone._db = alias
0.67 query.py(1244):         return clone
0.67 query.py(809):         if self._result_cache is None:
0.67 query.py(810):             return self.query.has_results(using=self.db)
0.67 query.py(196):         if self._deferred_filter:
0.67 query.py(200):         return self._query
0.67 query.py(1273):         if self._for_write:
0.67 query.py(1275):         return self._db or router.db_for_read(self.model, **self._hints)
0.68 query.py(179):         self.model = model
0.68 query.py(180):         self._db = using
0.68 query.py(181):         self._hints = hints or {}
0.68 query.py(182):         self._query = query or sql.Query(self.model)
0.68 query.py(183):         self._result_cache = None
0.68 query.py(184):         self._sticky_filter = False
0.68 query.py(185):         self._for_write = False
0.68 query.py(186):         self._prefetch_related_lookups = ()
0.68 query.py(187):         self._prefetch_done = False
0.68 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.68 query.py(189):         self._iterable_class = ModelIterable
0.68 query.py(190):         self._fields = None
0.68 query.py(191):         self._defer_next_filter = False
0.68 query.py(192):         self._deferred_filter = None
0.68 query.py(1242):         clone = self._chain()
0.68 query.py(1322):         obj = self._clone()
0.68 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.68 query.py(196):         if self._deferred_filter:
0.68 query.py(200):         return self._query
0.68 query.py(179):         self.model = model
0.68 query.py(180):         self._db = using
0.68 query.py(181):         self._hints = hints or {}
0.68 query.py(182):         self._query = query or sql.Query(self.model)
0.68 query.py(183):         self._result_cache = None
0.68 query.py(184):         self._sticky_filter = False
0.68 query.py(185):         self._for_write = False
0.68 query.py(186):         self._prefetch_related_lookups = ()
0.68 query.py(187):         self._prefetch_done = False
0.68 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.68 query.py(189):         self._iterable_class = ModelIterable
0.68 query.py(190):         self._fields = None
0.68 query.py(191):         self._defer_next_filter = False
0.68 query.py(192):         self._deferred_filter = None
0.68 query.py(1335):         c._sticky_filter = self._sticky_filter
0.68 query.py(1336):         c._for_write = self._for_write
0.68 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.68 query.py(1338):         c._known_related_objects = self._known_related_objects
0.68 query.py(1339):         c._iterable_class = self._iterable_class
0.68 query.py(1340):         c._fields = self._fields
0.68 query.py(1341):         return c
0.68 query.py(1323):         if obj._sticky_filter:
0.68 query.py(1326):         obj.__dict__.update(kwargs)
0.68 query.py(1327):         return obj
0.68 query.py(1243):         clone._db = alias
0.68 query.py(1244):         return clone
0.68 query.py(963):         self._not_support_combined_queries('filter')
0.68 query.py(1418):         if self.query.combinator:
0.68 query.py(196):         if self._deferred_filter:
0.68 query.py(200):         return self._query
0.68 query.py(964):         return self._filter_or_exclude(False, args, kwargs)
0.68 query.py(975):         if (args or kwargs) and self.query.is_sliced:
0.68 query.py(196):         if self._deferred_filter:
0.68 query.py(200):         return self._query
0.68 query.py(977):         clone = self._chain()
0.68 query.py(1322):         obj = self._clone()
0.68 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.68 query.py(196):         if self._deferred_filter:
0.68 query.py(200):         return self._query
0.68 query.py(179):         self.model = model
0.68 query.py(180):         self._db = using
0.68 query.py(181):         self._hints = hints or {}
0.68 query.py(182):         self._query = query or sql.Query(self.model)
0.68 query.py(183):         self._result_cache = None
0.68 query.py(184):         self._sticky_filter = False
0.68 query.py(185):         self._for_write = False
0.68 query.py(186):         self._prefetch_related_lookups = ()
0.68 query.py(187):         self._prefetch_done = False
0.68 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.68 query.py(189):         self._iterable_class = ModelIterable
0.68 query.py(190):         self._fields = None
0.68 query.py(191):         self._defer_next_filter = False
0.68 query.py(192):         self._deferred_filter = None
0.68 query.py(1335):         c._sticky_filter = self._sticky_filter
0.68 query.py(1336):         c._for_write = self._for_write
0.68 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.68 query.py(1338):         c._known_related_objects = self._known_related_objects
0.68 query.py(1339):         c._iterable_class = self._iterable_class
0.68 query.py(1340):         c._fields = self._fields
0.68 query.py(1341):         return c
0.68 query.py(1323):         if obj._sticky_filter:
0.68 query.py(1326):         obj.__dict__.update(kwargs)
0.68 query.py(1327):         return obj
0.68 query.py(978):         if self._defer_next_filter:
0.68 query.py(982):             clone._filter_or_exclude_inplace(negate, args, kwargs)
0.68 query.py(986):         if negate:
0.68 query.py(989):             self._query.add_q(Q(*args, **kwargs))
0.68 query.py(983):         return clone
0.68 query.py(797):         if self.query.is_sliced:
0.68 query.py(196):         if self._deferred_filter:
0.68 query.py(200):         return self._query
0.68 query.py(799):         query = self.query.chain(sql.UpdateQuery)
0.68 query.py(196):         if self._deferred_filter:
0.68 query.py(200):         return self._query
0.68 query.py(800):         query.add_update_fields(values)
0.68 query.py(802):         query.annotations = {}
0.68 query.py(803):         self._result_cache = None
0.68 query.py(804):         return query.get_compiler(self.db).execute_sql(CURSOR)
0.68 query.py(1273):         if self._for_write:
0.68 query.py(1275):         return self._db or router.db_for_read(self.model, **self._hints)
0.68 query.py(179):         self.model = model
0.68 query.py(180):         self._db = using
0.68 query.py(181):         self._hints = hints or {}
0.68 query.py(182):         self._query = query or sql.Query(self.model)
0.68 query.py(183):         self._result_cache = None
0.68 query.py(184):         self._sticky_filter = False
0.68 query.py(185):         self._for_write = False
0.68 query.py(186):         self._prefetch_related_lookups = ()
0.68 query.py(187):         self._prefetch_done = False
0.68 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.68 query.py(189):         self._iterable_class = ModelIterable
0.68 query.py(190):         self._fields = None
0.68 query.py(191):         self._defer_next_filter = False
0.68 query.py(192):         self._deferred_filter = None
0.68 query.py(1286):         self._for_write = True
0.68 query.py(1287):         if using is None:
0.68 query.py(1289):         query = sql.InsertQuery(self.model, ignore_conflicts=ignore_conflicts)
0.68 query.py(1290):         query.insert_values(fields, objs, raw=raw)
0.68 query.py(1291):         return query.get_compiler(using=using).execute_sql(returning_fields)
0.68 query.py(179):         self.model = model
0.68 query.py(180):         self._db = using
0.68 query.py(181):         self._hints = hints or {}
0.68 query.py(182):         self._query = query or sql.Query(self.model)
0.68 query.py(183):         self._result_cache = None
0.68 query.py(184):         self._sticky_filter = False
0.68 query.py(185):         self._for_write = False
0.68 query.py(186):         self._prefetch_related_lookups = ()
0.68 query.py(187):         self._prefetch_done = False
0.68 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.68 query.py(189):         self._iterable_class = ModelIterable
0.68 query.py(190):         self._fields = None
0.68 query.py(191):         self._defer_next_filter = False
0.68 query.py(192):         self._deferred_filter = None
0.68 query.py(1242):         clone = self._chain()
0.68 query.py(1322):         obj = self._clone()
0.68 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.68 query.py(196):         if self._deferred_filter:
0.68 query.py(200):         return self._query
0.68 query.py(179):         self.model = model
0.68 query.py(180):         self._db = using
0.68 query.py(181):         self._hints = hints or {}
0.68 query.py(182):         self._query = query or sql.Query(self.model)
0.68 query.py(183):         self._result_cache = None
0.68 query.py(184):         self._sticky_filter = False
0.68 query.py(185):         self._for_write = False
0.68 query.py(186):         self._prefetch_related_lookups = ()
0.68 query.py(187):         self._prefetch_done = False
0.68 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.68 query.py(189):         self._iterable_class = ModelIterable
0.68 query.py(190):         self._fields = None
0.68 query.py(191):         self._defer_next_filter = False
0.68 query.py(192):         self._deferred_filter = None
0.68 query.py(1335):         c._sticky_filter = self._sticky_filter
0.68 query.py(1336):         c._for_write = self._for_write
0.68 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.68 query.py(1338):         c._known_related_objects = self._known_related_objects
0.68 query.py(1339):         c._iterable_class = self._iterable_class
0.68 query.py(1340):         c._fields = self._fields
0.68 query.py(1341):         return c
0.68 query.py(1323):         if obj._sticky_filter:
0.68 query.py(1326):         obj.__dict__.update(kwargs)
0.68 query.py(1327):         return obj
0.68 query.py(1243):         clone._db = alias
0.68 query.py(1244):         return clone
0.68 query.py(963):         self._not_support_combined_queries('filter')
0.68 query.py(1418):         if self.query.combinator:
0.68 query.py(196):         if self._deferred_filter:
0.68 query.py(200):         return self._query
0.68 query.py(964):         return self._filter_or_exclude(False, args, kwargs)
0.68 query.py(975):         if (args or kwargs) and self.query.is_sliced:
0.68 query.py(196):         if self._deferred_filter:
0.68 query.py(200):         return self._query
0.68 query.py(977):         clone = self._chain()
0.68 query.py(1322):         obj = self._clone()
0.68 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.68 query.py(196):         if self._deferred_filter:
0.68 query.py(200):         return self._query
0.68 query.py(179):         self.model = model
0.68 query.py(180):         self._db = using
0.68 query.py(181):         self._hints = hints or {}
0.68 query.py(182):         self._query = query or sql.Query(self.model)
0.68 query.py(183):         self._result_cache = None
0.68 query.py(184):         self._sticky_filter = False
0.68 query.py(185):         self._for_write = False
0.68 query.py(186):         self._prefetch_related_lookups = ()
0.68 query.py(187):         self._prefetch_done = False
0.68 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.68 query.py(189):         self._iterable_class = ModelIterable
0.68 query.py(190):         self._fields = None
0.68 query.py(191):         self._defer_next_filter = False
0.68 query.py(192):         self._deferred_filter = None
0.68 query.py(1335):         c._sticky_filter = self._sticky_filter
0.68 query.py(1336):         c._for_write = self._for_write
0.68 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.68 query.py(1338):         c._known_related_objects = self._known_related_objects
0.68 query.py(1339):         c._iterable_class = self._iterable_class
0.68 query.py(1340):         c._fields = self._fields
0.68 query.py(1341):         return c
0.68 query.py(1323):         if obj._sticky_filter:
0.68 query.py(1326):         obj.__dict__.update(kwargs)
0.68 query.py(1327):         return obj
0.68 query.py(978):         if self._defer_next_filter:
0.68 query.py(982):             clone._filter_or_exclude_inplace(negate, args, kwargs)
0.68 query.py(986):         if negate:
0.68 query.py(989):             self._query.add_q(Q(*args, **kwargs))
0.68 query.py(983):         return clone
0.68 query.py(280):         self._fetch_all()
0.68 query.py(1344):         if self._result_cache is None:
0.68 query.py(1345):             self._result_cache = list(self._iterable_class(self))
0.68 query.py(37):         self.queryset = queryset
0.68 query.py(38):         self.chunked_fetch = chunked_fetch
0.68 query.py(39):         self.chunk_size = chunk_size
0.68 query.py(46):         queryset = self.queryset
0.68 query.py(47):         db = queryset.db
0.68 query.py(1273):         if self._for_write:
0.68 query.py(1275):         return self._db or router.db_for_read(self.model, **self._hints)
0.68 query.py(48):         compiler = queryset.query.get_compiler(using=db)
0.68 query.py(196):         if self._deferred_filter:
0.68 query.py(200):         return self._query
0.68 query.py(51):         results = compiler.execute_sql(chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size)
0.68 query.py(52):         select, klass_info, annotation_col_map = (compiler.select, compiler.klass_info,
0.68 query.py(53):                                                   compiler.annotation_col_map)
0.68 query.py(52):         select, klass_info, annotation_col_map = (compiler.select, compiler.klass_info,
0.68 query.py(54):         model_cls = klass_info['model']
0.68 query.py(55):         select_fields = klass_info['select_fields']
0.68 query.py(56):         model_fields_start, model_fields_end = select_fields[0], select_fields[-1] + 1
0.68 query.py(57):         init_list = [f[0].target.attname
0.68 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.68 query.py(57):         init_list = [f[0].target.attname
0.68 query.py(57):         init_list = [f[0].target.attname
0.68 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.68 query.py(57):         init_list = [f[0].target.attname
0.68 query.py(57):         init_list = [f[0].target.attname
0.68 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.68 query.py(57):         init_list = [f[0].target.attname
0.68 query.py(57):         init_list = [f[0].target.attname
0.68 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.68 query.py(57):         init_list = [f[0].target.attname
0.68 query.py(57):         init_list = [f[0].target.attname
0.68 query.py(59):         related_populators = get_related_populators(klass_info, select, db)
0.68 query.py(2030):     iterators = []
0.68 query.py(2031):     related_klass_infos = klass_info.get('related_klass_infos', [])
0.68 query.py(2032):     for rel_klass_info in related_klass_infos:
0.68 query.py(2035):     return iterators
0.68 query.py(60):         known_related_objects = [
0.68 query.py(66):             ])) for field, related_objs in queryset._known_related_objects.items()
0.68 query.py(60):         known_related_objects = [
0.68 query.py(60):         known_related_objects = [
0.68 query.py(68):         for row in compiler.results_iter(results):
0.68 query.py(1346):         if self._prefetch_related_lookups and not self._prefetch_done:
0.68 query.py(281):         return iter(self._result_cache)
0.68 query.py(179):         self.model = model
0.68 query.py(180):         self._db = using
0.68 query.py(181):         self._hints = hints or {}
0.68 query.py(182):         self._query = query or sql.Query(self.model)
0.68 query.py(183):         self._result_cache = None
0.68 query.py(184):         self._sticky_filter = False
0.68 query.py(185):         self._for_write = False
0.68 query.py(186):         self._prefetch_related_lookups = ()
0.68 query.py(187):         self._prefetch_done = False
0.68 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.68 query.py(189):         self._iterable_class = ModelIterable
0.68 query.py(190):         self._fields = None
0.68 query.py(191):         self._defer_next_filter = False
0.68 query.py(192):         self._deferred_filter = None
0.68 query.py(1242):         clone = self._chain()
0.68 query.py(1322):         obj = self._clone()
0.68 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.68 query.py(196):         if self._deferred_filter:
0.68 query.py(200):         return self._query
0.68 query.py(179):         self.model = model
0.68 query.py(180):         self._db = using
0.68 query.py(181):         self._hints = hints or {}
0.68 query.py(182):         self._query = query or sql.Query(self.model)
0.68 query.py(183):         self._result_cache = None
0.68 query.py(184):         self._sticky_filter = False
0.68 query.py(185):         self._for_write = False
0.68 query.py(186):         self._prefetch_related_lookups = ()
0.68 query.py(187):         self._prefetch_done = False
0.68 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.68 query.py(189):         self._iterable_class = ModelIterable
0.68 query.py(190):         self._fields = None
0.68 query.py(191):         self._defer_next_filter = False
0.68 query.py(192):         self._deferred_filter = None
0.68 query.py(1335):         c._sticky_filter = self._sticky_filter
0.68 query.py(1336):         c._for_write = self._for_write
0.68 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.68 query.py(1338):         c._known_related_objects = self._known_related_objects
0.68 query.py(1339):         c._iterable_class = self._iterable_class
0.68 query.py(1340):         c._fields = self._fields
0.68 query.py(1341):         return c
0.68 query.py(1323):         if obj._sticky_filter:
0.68 query.py(1326):         obj.__dict__.update(kwargs)
0.68 query.py(1327):         return obj
0.68 query.py(1243):         clone._db = alias
0.68 query.py(1244):         return clone
0.68 query.py(483):         assert batch_size is None or batch_size > 0
0.68 query.py(488):         for parent in self.model._meta.get_parent_list():
0.68 query.py(491):         if not objs:
0.68 query.py(493):         self._for_write = True
0.68 query.py(494):         connection = connections[self.db]
0.68 query.py(1273):         if self._for_write:
0.68 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.68 query.py(495):         opts = self.model._meta
0.68 query.py(496):         fields = opts.concrete_fields
0.68 query.py(497):         objs = list(objs)
0.68 query.py(498):         self._prepare_for_bulk_create(objs)
0.68 query.py(457):         for obj in objs:
0.68 query.py(458):             if obj.pk is None:
0.68 query.py(460):                 obj.pk = obj._meta.pk.get_pk_value_on_save(obj)
0.68 query.py(461):             obj._prepare_related_fields_for_save(operation_name='bulk_create')
0.68 query.py(457):         for obj in objs:
0.68 query.py(499):         with transaction.atomic(using=self.db, savepoint=False):
0.68 query.py(1273):         if self._for_write:
0.68 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.68 query.py(500):             objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)
0.68 query.py(500):             objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)
0.68 query.py(501):             if objs_with_pk:
0.68 query.py(512):             if objs_without_pk:
0.68 query.py(513):                 fields = [f for f in fields if not isinstance(f, AutoField)]
0.68 query.py(513):                 fields = [f for f in fields if not isinstance(f, AutoField)]
0.68 query.py(513):                 fields = [f for f in fields if not isinstance(f, AutoField)]
0.68 query.py(513):                 fields = [f for f in fields if not isinstance(f, AutoField)]
0.68 query.py(513):                 fields = [f for f in fields if not isinstance(f, AutoField)]
0.68 query.py(514):                 returned_columns = self._batched_insert(
0.68 query.py(515):                     objs_without_pk, fields, batch_size, ignore_conflicts=ignore_conflicts,
0.68 query.py(514):                 returned_columns = self._batched_insert(
0.68 query.py(1299):         if ignore_conflicts and not connections[self.db].features.supports_ignore_conflicts:
0.68 query.py(1301):         ops = connections[self.db].ops
0.68 query.py(1273):         if self._for_write:
0.68 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.68 query.py(1302):         max_batch_size = max(ops.bulk_batch_size(fields, objs), 1)
0.68 query.py(1303):         batch_size = min(batch_size, max_batch_size) if batch_size else max_batch_size
0.68 query.py(1304):         inserted_rows = []
0.68 query.py(1305):         bulk_return = connections[self.db].features.can_return_rows_from_bulk_insert
0.68 query.py(1273):         if self._for_write:
0.68 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.68 query.py(1306):         for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:
0.68 query.py(1306):         for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:
0.68 query.py(1306):         for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:
0.68 query.py(1307):             if bulk_return and not ignore_conflicts:
0.68 query.py(1308):                 inserted_rows.extend(self._insert(
0.68 query.py(1309):                     item, fields=fields, using=self.db,
0.68 query.py(1273):         if self._for_write:
0.68 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.68 query.py(1310):                     returning_fields=self.model._meta.db_returning_fields,
0.68 query.py(1311):                     ignore_conflicts=ignore_conflicts,
0.68 query.py(1308):                 inserted_rows.extend(self._insert(
0.68 query.py(1286):         self._for_write = True
0.68 query.py(1287):         if using is None:
0.68 query.py(1289):         query = sql.InsertQuery(self.model, ignore_conflicts=ignore_conflicts)
0.68 query.py(1290):         query.insert_values(fields, objs, raw=raw)
0.68 query.py(1291):         return query.get_compiler(using=using).execute_sql(returning_fields)
0.68 query.py(1306):         for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:
0.68 query.py(1315):         return inserted_rows
0.68 query.py(517):                 if connection.features.can_return_rows_from_bulk_insert and not ignore_conflicts:
0.68 query.py(518):                     assert len(returned_columns) == len(objs_without_pk)
0.68 query.py(519):                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):
0.68 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.68 query.py(521):                         setattr(obj_without_pk, field.attname, result)
0.68 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.68 query.py(522):                     obj_without_pk._state.adding = False
0.68 query.py(523):                     obj_without_pk._state.db = self.db
0.68 query.py(1273):         if self._for_write:
0.68 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.68 query.py(519):                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):
0.68 query.py(525):         return objs
0.68 query.py(179):         self.model = model
0.68 query.py(180):         self._db = using
0.68 query.py(181):         self._hints = hints or {}
0.68 query.py(182):         self._query = query or sql.Query(self.model)
0.68 query.py(183):         self._result_cache = None
0.68 query.py(184):         self._sticky_filter = False
0.68 query.py(185):         self._for_write = False
0.68 query.py(186):         self._prefetch_related_lookups = ()
0.68 query.py(187):         self._prefetch_done = False
0.68 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.68 query.py(189):         self._iterable_class = ModelIterable
0.68 query.py(190):         self._fields = None
0.68 query.py(191):         self._defer_next_filter = False
0.68 query.py(192):         self._deferred_filter = None
0.68 query.py(1242):         clone = self._chain()
0.68 query.py(1322):         obj = self._clone()
0.68 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.68 query.py(196):         if self._deferred_filter:
0.68 query.py(200):         return self._query
0.68 query.py(179):         self.model = model
0.68 query.py(180):         self._db = using
0.68 query.py(181):         self._hints = hints or {}
0.68 query.py(182):         self._query = query or sql.Query(self.model)
0.68 query.py(183):         self._result_cache = None
0.68 query.py(184):         self._sticky_filter = False
0.68 query.py(185):         self._for_write = False
0.68 query.py(186):         self._prefetch_related_lookups = ()
0.68 query.py(187):         self._prefetch_done = False
0.68 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.68 query.py(189):         self._iterable_class = ModelIterable
0.68 query.py(190):         self._fields = None
0.68 query.py(191):         self._defer_next_filter = False
0.68 query.py(192):         self._deferred_filter = None
0.68 query.py(1335):         c._sticky_filter = self._sticky_filter
0.68 query.py(1336):         c._for_write = self._for_write
0.68 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.68 query.py(1338):         c._known_related_objects = self._known_related_objects
0.68 query.py(1339):         c._iterable_class = self._iterable_class
0.68 query.py(1340):         c._fields = self._fields
0.68 query.py(1341):         return c
0.68 query.py(1323):         if obj._sticky_filter:
0.68 query.py(1326):         obj.__dict__.update(kwargs)
0.68 query.py(1327):         return obj
0.68 query.py(1243):         clone._db = alias
0.68 query.py(1244):         return clone
0.68 query.py(963):         self._not_support_combined_queries('filter')
0.68 query.py(1418):         if self.query.combinator:
0.68 query.py(196):         if self._deferred_filter:
0.68 query.py(200):         return self._query
0.68 query.py(964):         return self._filter_or_exclude(False, args, kwargs)
0.68 query.py(975):         if (args or kwargs) and self.query.is_sliced:
0.68 query.py(196):         if self._deferred_filter:
0.68 query.py(200):         return self._query
0.68 query.py(977):         clone = self._chain()
0.68 query.py(1322):         obj = self._clone()
0.68 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.68 query.py(196):         if self._deferred_filter:
0.68 query.py(200):         return self._query
0.68 query.py(179):         self.model = model
0.68 query.py(180):         self._db = using
0.68 query.py(181):         self._hints = hints or {}
0.68 query.py(182):         self._query = query or sql.Query(self.model)
0.68 query.py(183):         self._result_cache = None
0.68 query.py(184):         self._sticky_filter = False
0.68 query.py(185):         self._for_write = False
0.68 query.py(186):         self._prefetch_related_lookups = ()
0.68 query.py(187):         self._prefetch_done = False
0.68 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.68 query.py(189):         self._iterable_class = ModelIterable
0.68 query.py(190):         self._fields = None
0.68 query.py(191):         self._defer_next_filter = False
0.68 query.py(192):         self._deferred_filter = None
0.68 query.py(1335):         c._sticky_filter = self._sticky_filter
0.68 query.py(1336):         c._for_write = self._for_write
0.68 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.68 query.py(1338):         c._known_related_objects = self._known_related_objects
0.68 query.py(1339):         c._iterable_class = self._iterable_class
0.68 query.py(1340):         c._fields = self._fields
0.68 query.py(1341):         return c
0.68 query.py(1323):         if obj._sticky_filter:
0.68 query.py(1326):         obj.__dict__.update(kwargs)
0.68 query.py(1327):         return obj
0.68 query.py(978):         if self._defer_next_filter:
0.68 query.py(982):             clone._filter_or_exclude_inplace(negate, args, kwargs)
0.68 query.py(986):         if negate:
0.68 query.py(989):             self._query.add_q(Q(*args, **kwargs))
0.68 query.py(983):         return clone
0.68 query.py(280):         self._fetch_all()
0.68 query.py(1344):         if self._result_cache is None:
0.68 query.py(1345):             self._result_cache = list(self._iterable_class(self))
0.68 query.py(37):         self.queryset = queryset
0.68 query.py(38):         self.chunked_fetch = chunked_fetch
0.68 query.py(39):         self.chunk_size = chunk_size
0.68 query.py(46):         queryset = self.queryset
0.68 query.py(47):         db = queryset.db
0.68 query.py(1273):         if self._for_write:
0.68 query.py(1275):         return self._db or router.db_for_read(self.model, **self._hints)
0.68 query.py(48):         compiler = queryset.query.get_compiler(using=db)
0.68 query.py(196):         if self._deferred_filter:
0.68 query.py(200):         return self._query
0.68 query.py(51):         results = compiler.execute_sql(chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size)
0.68 query.py(52):         select, klass_info, annotation_col_map = (compiler.select, compiler.klass_info,
0.68 query.py(53):                                                   compiler.annotation_col_map)
0.68 query.py(52):         select, klass_info, annotation_col_map = (compiler.select, compiler.klass_info,
0.68 query.py(54):         model_cls = klass_info['model']
0.68 query.py(55):         select_fields = klass_info['select_fields']
0.68 query.py(56):         model_fields_start, model_fields_end = select_fields[0], select_fields[-1] + 1
0.68 query.py(57):         init_list = [f[0].target.attname
0.68 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.68 query.py(57):         init_list = [f[0].target.attname
0.68 query.py(57):         init_list = [f[0].target.attname
0.68 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.68 query.py(57):         init_list = [f[0].target.attname
0.68 query.py(57):         init_list = [f[0].target.attname
0.68 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.68 query.py(57):         init_list = [f[0].target.attname
0.68 query.py(57):         init_list = [f[0].target.attname
0.68 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.68 query.py(57):         init_list = [f[0].target.attname
0.68 query.py(57):         init_list = [f[0].target.attname
0.68 query.py(59):         related_populators = get_related_populators(klass_info, select, db)
0.68 query.py(2030):     iterators = []
0.68 query.py(2031):     related_klass_infos = klass_info.get('related_klass_infos', [])
0.68 query.py(2032):     for rel_klass_info in related_klass_infos:
0.68 query.py(2035):     return iterators
0.68 query.py(60):         known_related_objects = [
0.68 query.py(66):             ])) for field, related_objs in queryset._known_related_objects.items()
0.68 query.py(60):         known_related_objects = [
0.68 query.py(60):         known_related_objects = [
0.68 query.py(68):         for row in compiler.results_iter(results):
0.68 query.py(69):             obj = model_cls.from_db(db, init_list, row[model_fields_start:model_fields_end])
0.68 query.py(70):             for rel_populator in related_populators:
0.68 query.py(72):             if annotation_col_map:
0.68 query.py(77):             for field, rel_objs, rel_getter in known_related_objects:
0.68 query.py(89):             yield obj
0.68 query.py(68):         for row in compiler.results_iter(results):
0.68 query.py(1346):         if self._prefetch_related_lookups and not self._prefetch_done:
0.68 query.py(281):         return iter(self._result_cache)
0.68 query.py(179):         self.model = model
0.68 query.py(180):         self._db = using
0.68 query.py(181):         self._hints = hints or {}
0.68 query.py(182):         self._query = query or sql.Query(self.model)
0.68 query.py(183):         self._result_cache = None
0.68 query.py(184):         self._sticky_filter = False
0.68 query.py(185):         self._for_write = False
0.68 query.py(186):         self._prefetch_related_lookups = ()
0.68 query.py(187):         self._prefetch_done = False
0.68 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.68 query.py(189):         self._iterable_class = ModelIterable
0.68 query.py(190):         self._fields = None
0.68 query.py(191):         self._defer_next_filter = False
0.68 query.py(192):         self._deferred_filter = None
0.68 query.py(1242):         clone = self._chain()
0.68 query.py(1322):         obj = self._clone()
0.68 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.68 query.py(196):         if self._deferred_filter:
0.68 query.py(200):         return self._query
0.68 query.py(179):         self.model = model
0.68 query.py(180):         self._db = using
0.68 query.py(181):         self._hints = hints or {}
0.68 query.py(182):         self._query = query or sql.Query(self.model)
0.68 query.py(183):         self._result_cache = None
0.68 query.py(184):         self._sticky_filter = False
0.68 query.py(185):         self._for_write = False
0.68 query.py(186):         self._prefetch_related_lookups = ()
0.68 query.py(187):         self._prefetch_done = False
0.68 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.68 query.py(189):         self._iterable_class = ModelIterable
0.68 query.py(190):         self._fields = None
0.68 query.py(191):         self._defer_next_filter = False
0.68 query.py(192):         self._deferred_filter = None
0.68 query.py(1335):         c._sticky_filter = self._sticky_filter
0.68 query.py(1336):         c._for_write = self._for_write
0.68 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.68 query.py(1338):         c._known_related_objects = self._known_related_objects
0.68 query.py(1339):         c._iterable_class = self._iterable_class
0.68 query.py(1340):         c._fields = self._fields
0.68 query.py(1341):         return c
0.68 query.py(1323):         if obj._sticky_filter:
0.68 query.py(1326):         obj.__dict__.update(kwargs)
0.68 query.py(1327):         return obj
0.68 query.py(1243):         clone._db = alias
0.68 query.py(1244):         return clone
0.68 query.py(483):         assert batch_size is None or batch_size > 0
0.68 query.py(488):         for parent in self.model._meta.get_parent_list():
0.68 query.py(491):         if not objs:
0.68 query.py(492):             return objs
0.68 query.py(179):         self.model = model
0.68 query.py(180):         self._db = using
0.68 query.py(181):         self._hints = hints or {}
0.68 query.py(182):         self._query = query or sql.Query(self.model)
0.68 query.py(183):         self._result_cache = None
0.68 query.py(184):         self._sticky_filter = False
0.68 query.py(185):         self._for_write = False
0.68 query.py(186):         self._prefetch_related_lookups = ()
0.68 query.py(187):         self._prefetch_done = False
0.68 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.68 query.py(189):         self._iterable_class = ModelIterable
0.68 query.py(190):         self._fields = None
0.68 query.py(191):         self._defer_next_filter = False
0.68 query.py(192):         self._deferred_filter = None
0.68 query.py(419):         if self.query.combinator and (args or kwargs):
0.68 query.py(196):         if self._deferred_filter:
0.68 query.py(200):         return self._query
0.68 query.py(424):         clone = self._chain() if self.query.combinator else self.filter(*args, **kwargs)
0.68 query.py(196):         if self._deferred_filter:
0.68 query.py(200):         return self._query
0.68 query.py(963):         self._not_support_combined_queries('filter')
0.68 query.py(1418):         if self.query.combinator:
0.68 query.py(196):         if self._deferred_filter:
0.68 query.py(200):         return self._query
0.68 query.py(964):         return self._filter_or_exclude(False, args, kwargs)
0.68 query.py(975):         if (args or kwargs) and self.query.is_sliced:
0.68 query.py(196):         if self._deferred_filter:
0.68 query.py(200):         return self._query
0.68 query.py(977):         clone = self._chain()
0.68 query.py(1322):         obj = self._clone()
0.68 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.68 query.py(196):         if self._deferred_filter:
0.68 query.py(200):         return self._query
0.68 query.py(179):         self.model = model
0.68 query.py(180):         self._db = using
0.68 query.py(181):         self._hints = hints or {}
0.68 query.py(182):         self._query = query or sql.Query(self.model)
0.68 query.py(183):         self._result_cache = None
0.68 query.py(184):         self._sticky_filter = False
0.68 query.py(185):         self._for_write = False
0.68 query.py(186):         self._prefetch_related_lookups = ()
0.68 query.py(187):         self._prefetch_done = False
0.68 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.68 query.py(189):         self._iterable_class = ModelIterable
0.68 query.py(190):         self._fields = None
0.68 query.py(191):         self._defer_next_filter = False
0.68 query.py(192):         self._deferred_filter = None
0.68 query.py(1335):         c._sticky_filter = self._sticky_filter
0.68 query.py(1336):         c._for_write = self._for_write
0.68 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.68 query.py(1338):         c._known_related_objects = self._known_related_objects
0.68 query.py(1339):         c._iterable_class = self._iterable_class
0.68 query.py(1340):         c._fields = self._fields
0.68 query.py(1341):         return c
0.68 query.py(1323):         if obj._sticky_filter:
0.68 query.py(1326):         obj.__dict__.update(kwargs)
0.68 query.py(1327):         return obj
0.68 query.py(978):         if self._defer_next_filter:
0.68 query.py(982):             clone._filter_or_exclude_inplace(negate, args, kwargs)
0.68 query.py(986):         if negate:
0.68 query.py(989):             self._query.add_q(Q(*args, **kwargs))
0.68 query.py(983):         return clone
0.68 query.py(425):         if self.query.can_filter() and not self.query.distinct_fields:
0.68 query.py(196):         if self._deferred_filter:
0.68 query.py(200):         return self._query
0.68 query.py(196):         if self._deferred_filter:
0.68 query.py(200):         return self._query
0.68 query.py(426):             clone = clone.order_by()
0.68 query.py(1166):         if self.query.is_sliced:
0.68 query.py(196):         if self._deferred_filter:
0.68 query.py(200):         return self._query
0.68 query.py(1168):         obj = self._chain()
0.68 query.py(1322):         obj = self._clone()
0.68 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.68 query.py(196):         if self._deferred_filter:
0.68 query.py(200):         return self._query
0.68 query.py(179):         self.model = model
0.68 query.py(180):         self._db = using
0.68 query.py(181):         self._hints = hints or {}
0.68 query.py(182):         self._query = query or sql.Query(self.model)
0.68 query.py(183):         self._result_cache = None
0.68 query.py(184):         self._sticky_filter = False
0.68 query.py(185):         self._for_write = False
0.68 query.py(186):         self._prefetch_related_lookups = ()
0.68 query.py(187):         self._prefetch_done = False
0.68 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.68 query.py(189):         self._iterable_class = ModelIterable
0.68 query.py(190):         self._fields = None
0.68 query.py(191):         self._defer_next_filter = False
0.68 query.py(192):         self._deferred_filter = None
0.68 query.py(1335):         c._sticky_filter = self._sticky_filter
0.68 query.py(1336):         c._for_write = self._for_write
0.68 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.68 query.py(1338):         c._known_related_objects = self._known_related_objects
0.68 query.py(1339):         c._iterable_class = self._iterable_class
0.68 query.py(1340):         c._fields = self._fields
0.68 query.py(1341):         return c
0.68 query.py(1323):         if obj._sticky_filter:
0.68 query.py(1326):         obj.__dict__.update(kwargs)
0.68 query.py(1327):         return obj
0.68 query.py(1169):         obj.query.clear_ordering(force_empty=False)
0.68 query.py(196):         if self._deferred_filter:
0.68 query.py(200):         return self._query
0.68 query.py(1170):         obj.query.add_ordering(*field_names)
0.68 query.py(196):         if self._deferred_filter:
0.68 query.py(200):         return self._query
0.68 query.py(1171):         return obj
0.68 query.py(427):         limit = None
0.68 query.py(428):         if not clone.query.select_for_update or connections[clone.db].features.supports_select_for_update_with_limit:
0.68 query.py(196):         if self._deferred_filter:
0.68 query.py(200):         return self._query
0.68 query.py(429):             limit = MAX_GET_RESULTS
0.68 query.py(430):             clone.query.set_limits(high=limit)
0.68 query.py(196):         if self._deferred_filter:
0.68 query.py(200):         return self._query
0.68 query.py(431):         num = len(clone)
0.68 query.py(262):         self._fetch_all()
0.68 query.py(1344):         if self._result_cache is None:
0.68 query.py(1345):             self._result_cache = list(self._iterable_class(self))
0.68 query.py(37):         self.queryset = queryset
0.68 query.py(38):         self.chunked_fetch = chunked_fetch
0.68 query.py(39):         self.chunk_size = chunk_size
0.68 query.py(46):         queryset = self.queryset
0.68 query.py(47):         db = queryset.db
0.68 query.py(1273):         if self._for_write:
0.68 query.py(1275):         return self._db or router.db_for_read(self.model, **self._hints)
0.68 query.py(48):         compiler = queryset.query.get_compiler(using=db)
0.68 query.py(196):         if self._deferred_filter:
0.68 query.py(200):         return self._query
0.68 query.py(51):         results = compiler.execute_sql(chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size)
0.68 query.py(52):         select, klass_info, annotation_col_map = (compiler.select, compiler.klass_info,
0.68 query.py(53):                                                   compiler.annotation_col_map)
0.68 query.py(52):         select, klass_info, annotation_col_map = (compiler.select, compiler.klass_info,
0.68 query.py(54):         model_cls = klass_info['model']
0.68 query.py(55):         select_fields = klass_info['select_fields']
0.68 query.py(56):         model_fields_start, model_fields_end = select_fields[0], select_fields[-1] + 1
0.68 query.py(57):         init_list = [f[0].target.attname
0.68 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.68 query.py(57):         init_list = [f[0].target.attname
0.68 query.py(57):         init_list = [f[0].target.attname
0.68 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.68 query.py(57):         init_list = [f[0].target.attname
0.68 query.py(57):         init_list = [f[0].target.attname
0.68 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.68 query.py(57):         init_list = [f[0].target.attname
0.68 query.py(57):         init_list = [f[0].target.attname
0.68 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.68 query.py(57):         init_list = [f[0].target.attname
0.68 query.py(57):         init_list = [f[0].target.attname
0.68 query.py(59):         related_populators = get_related_populators(klass_info, select, db)
0.68 query.py(2030):     iterators = []
0.68 query.py(2031):     related_klass_infos = klass_info.get('related_klass_infos', [])
0.68 query.py(2032):     for rel_klass_info in related_klass_infos:
0.68 query.py(2035):     return iterators
0.68 query.py(60):         known_related_objects = [
0.68 query.py(66):             ])) for field, related_objs in queryset._known_related_objects.items()
0.68 query.py(60):         known_related_objects = [
0.68 query.py(60):         known_related_objects = [
0.68 query.py(68):         for row in compiler.results_iter(results):
0.68 query.py(69):             obj = model_cls.from_db(db, init_list, row[model_fields_start:model_fields_end])
0.68 query.py(70):             for rel_populator in related_populators:
0.68 query.py(72):             if annotation_col_map:
0.68 query.py(77):             for field, rel_objs, rel_getter in known_related_objects:
0.68 query.py(89):             yield obj
0.68 query.py(68):         for row in compiler.results_iter(results):
0.68 query.py(1346):         if self._prefetch_related_lookups and not self._prefetch_done:
0.68 query.py(263):         return len(self._result_cache)
0.68 query.py(432):         if num == 1:
0.68 query.py(433):             return clone._result_cache[0]
0.68 query.py(179):         self.model = model
0.68 query.py(180):         self._db = using
0.68 query.py(181):         self._hints = hints or {}
0.68 query.py(182):         self._query = query or sql.Query(self.model)
0.68 query.py(183):         self._result_cache = None
0.68 query.py(184):         self._sticky_filter = False
0.68 query.py(185):         self._for_write = False
0.68 query.py(186):         self._prefetch_related_lookups = ()
0.68 query.py(187):         self._prefetch_done = False
0.68 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.68 query.py(189):         self._iterable_class = ModelIterable
0.68 query.py(190):         self._fields = None
0.68 query.py(191):         self._defer_next_filter = False
0.68 query.py(192):         self._deferred_filter = None
0.68 query.py(1242):         clone = self._chain()
0.68 query.py(1322):         obj = self._clone()
0.68 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.68 query.py(196):         if self._deferred_filter:
0.68 query.py(200):         return self._query
0.68 query.py(179):         self.model = model
0.68 query.py(180):         self._db = using
0.68 query.py(181):         self._hints = hints or {}
0.68 query.py(182):         self._query = query or sql.Query(self.model)
0.68 query.py(183):         self._result_cache = None
0.68 query.py(184):         self._sticky_filter = False
0.68 query.py(185):         self._for_write = False
0.68 query.py(186):         self._prefetch_related_lookups = ()
0.68 query.py(187):         self._prefetch_done = False
0.68 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.68 query.py(189):         self._iterable_class = ModelIterable
0.68 query.py(190):         self._fields = None
0.68 query.py(191):         self._defer_next_filter = False
0.68 query.py(192):         self._deferred_filter = None
0.68 query.py(1335):         c._sticky_filter = self._sticky_filter
0.68 query.py(1336):         c._for_write = self._for_write
0.68 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.68 query.py(1338):         c._known_related_objects = self._known_related_objects
0.68 query.py(1339):         c._iterable_class = self._iterable_class
0.68 query.py(1340):         c._fields = self._fields
0.68 query.py(1341):         return c
0.68 query.py(1323):         if obj._sticky_filter:
0.68 query.py(1326):         obj.__dict__.update(kwargs)
0.68 query.py(1327):         return obj
0.68 query.py(1243):         clone._db = alias
0.68 query.py(1244):         return clone
0.68 query.py(963):         self._not_support_combined_queries('filter')
0.68 query.py(1418):         if self.query.combinator:
0.68 query.py(196):         if self._deferred_filter:
0.68 query.py(200):         return self._query
0.68 query.py(964):         return self._filter_or_exclude(False, args, kwargs)
0.68 query.py(975):         if (args or kwargs) and self.query.is_sliced:
0.68 query.py(196):         if self._deferred_filter:
0.68 query.py(200):         return self._query
0.68 query.py(977):         clone = self._chain()
0.68 query.py(1322):         obj = self._clone()
0.68 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.68 query.py(196):         if self._deferred_filter:
0.68 query.py(200):         return self._query
0.68 query.py(179):         self.model = model
0.68 query.py(180):         self._db = using
0.68 query.py(181):         self._hints = hints or {}
0.68 query.py(182):         self._query = query or sql.Query(self.model)
0.68 query.py(183):         self._result_cache = None
0.68 query.py(184):         self._sticky_filter = False
0.68 query.py(185):         self._for_write = False
0.68 query.py(186):         self._prefetch_related_lookups = ()
0.68 query.py(187):         self._prefetch_done = False
0.68 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.68 query.py(189):         self._iterable_class = ModelIterable
0.68 query.py(190):         self._fields = None
0.68 query.py(191):         self._defer_next_filter = False
0.68 query.py(192):         self._deferred_filter = None
0.68 query.py(1335):         c._sticky_filter = self._sticky_filter
0.68 query.py(1336):         c._for_write = self._for_write
0.68 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.68 query.py(1338):         c._known_related_objects = self._known_related_objects
0.68 query.py(1339):         c._iterable_class = self._iterable_class
0.68 query.py(1340):         c._fields = self._fields
0.68 query.py(1341):         return c
0.68 query.py(1323):         if obj._sticky_filter:
0.68 query.py(1326):         obj.__dict__.update(kwargs)
0.68 query.py(1327):         return obj
0.68 query.py(978):         if self._defer_next_filter:
0.68 query.py(982):             clone._filter_or_exclude_inplace(negate, args, kwargs)
0.68 query.py(986):         if negate:
0.68 query.py(989):             self._query.add_q(Q(*args, **kwargs))
0.68 query.py(983):         return clone
0.68 query.py(868):         if flat and named:
0.68 query.py(870):         if flat and len(fields) > 1:
0.68 query.py(873):         field_names = {f for f in fields if not hasattr(f, 'resolve_expression')}
0.68 query.py(873):         field_names = {f for f in fields if not hasattr(f, 'resolve_expression')}
0.68 query.py(873):         field_names = {f for f in fields if not hasattr(f, 'resolve_expression')}
0.68 query.py(873):         field_names = {f for f in fields if not hasattr(f, 'resolve_expression')}
0.68 query.py(874):         _fields = []
0.68 query.py(875):         expressions = {}
0.68 query.py(876):         counter = 1
0.68 query.py(877):         for field in fields:
0.68 query.py(878):             if hasattr(field, 'resolve_expression'):
0.68 query.py(888):                 _fields.append(field)
0.68 query.py(877):         for field in fields:
0.68 query.py(878):             if hasattr(field, 'resolve_expression'):
0.68 query.py(888):                 _fields.append(field)
0.68 query.py(877):         for field in fields:
0.68 query.py(890):         clone = self._values(*_fields, **expressions)
0.68 query.py(854):         clone = self._chain()
0.68 query.py(1322):         obj = self._clone()
0.68 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.68 query.py(196):         if self._deferred_filter:
0.68 query.py(200):         return self._query
0.68 query.py(179):         self.model = model
0.68 query.py(180):         self._db = using
0.68 query.py(181):         self._hints = hints or {}
0.68 query.py(182):         self._query = query or sql.Query(self.model)
0.68 query.py(183):         self._result_cache = None
0.68 query.py(184):         self._sticky_filter = False
0.68 query.py(185):         self._for_write = False
0.68 query.py(186):         self._prefetch_related_lookups = ()
0.68 query.py(187):         self._prefetch_done = False
0.68 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.68 query.py(189):         self._iterable_class = ModelIterable
0.68 query.py(190):         self._fields = None
0.68 query.py(191):         self._defer_next_filter = False
0.68 query.py(192):         self._deferred_filter = None
0.68 query.py(1335):         c._sticky_filter = self._sticky_filter
0.68 query.py(1336):         c._for_write = self._for_write
0.68 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.68 query.py(1338):         c._known_related_objects = self._known_related_objects
0.68 query.py(1339):         c._iterable_class = self._iterable_class
0.68 query.py(1340):         c._fields = self._fields
0.68 query.py(1341):         return c
0.68 query.py(1323):         if obj._sticky_filter:
0.68 query.py(1326):         obj.__dict__.update(kwargs)
0.68 query.py(1327):         return obj
0.68 query.py(855):         if expressions:
0.68 query.py(857):         clone._fields = fields
0.68 query.py(858):         clone.query.set_values(fields)
0.68 query.py(196):         if self._deferred_filter:
0.68 query.py(200):         return self._query
0.68 query.py(859):         return clone
0.68 query.py(892):             NamedValuesListIterable if named
0.68 query.py(893):             else FlatValuesListIterable if flat
0.68 query.py(894):             else ValuesListIterable
0.68 query.py(891):         clone._iterable_class = (
0.68 query.py(896):         return clone
0.68 query.py(280):         self._fetch_all()
0.68 query.py(1344):         if self._result_cache is None:
0.68 query.py(1345):             self._result_cache = list(self._iterable_class(self))
0.68 query.py(37):         self.queryset = queryset
0.68 query.py(38):         self.chunked_fetch = chunked_fetch
0.68 query.py(39):         self.chunk_size = chunk_size
0.68 query.py(120):         queryset = self.queryset
0.68 query.py(121):         query = queryset.query
0.68 query.py(196):         if self._deferred_filter:
0.68 query.py(200):         return self._query
0.68 query.py(122):         compiler = query.get_compiler(queryset.db)
0.68 query.py(1273):         if self._for_write:
0.68 query.py(1275):         return self._db or router.db_for_read(self.model, **self._hints)
0.68 query.py(124):         if queryset._fields:
0.68 query.py(127):                 *query.extra_select,
0.68 query.py(128):                 *query.values_select,
0.68 query.py(129):                 *query.annotation_select,
0.68 query.py(126):             names = [
0.68 query.py(131):             fields = [*queryset._fields, *(f for f in query.annotation_select if f not in queryset._fields)]
0.68 query.py(131):             fields = [*queryset._fields, *(f for f in query.annotation_select if f not in queryset._fields)]
0.68 query.py(132):             if fields != names:
0.68 query.py(140):         return compiler.results_iter(tuple_expected=True, chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size)
0.68 query.py(1346):         if self._prefetch_related_lookups and not self._prefetch_done:
0.68 query.py(281):         return iter(self._result_cache)
0.68 query.py(179):         self.model = model
0.68 query.py(180):         self._db = using
0.68 query.py(181):         self._hints = hints or {}
0.68 query.py(182):         self._query = query or sql.Query(self.model)
0.68 query.py(183):         self._result_cache = None
0.68 query.py(184):         self._sticky_filter = False
0.68 query.py(185):         self._for_write = False
0.68 query.py(186):         self._prefetch_related_lookups = ()
0.68 query.py(187):         self._prefetch_done = False
0.68 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.68 query.py(189):         self._iterable_class = ModelIterable
0.68 query.py(190):         self._fields = None
0.68 query.py(191):         self._defer_next_filter = False
0.68 query.py(192):         self._deferred_filter = None
0.68 query.py(1242):         clone = self._chain()
0.68 query.py(1322):         obj = self._clone()
0.68 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.68 query.py(196):         if self._deferred_filter:
0.68 query.py(200):         return self._query
0.68 query.py(179):         self.model = model
0.68 query.py(180):         self._db = using
0.68 query.py(181):         self._hints = hints or {}
0.68 query.py(182):         self._query = query or sql.Query(self.model)
0.68 query.py(183):         self._result_cache = None
0.68 query.py(184):         self._sticky_filter = False
0.68 query.py(185):         self._for_write = False
0.68 query.py(186):         self._prefetch_related_lookups = ()
0.68 query.py(187):         self._prefetch_done = False
0.68 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.68 query.py(189):         self._iterable_class = ModelIterable
0.68 query.py(190):         self._fields = None
0.68 query.py(191):         self._defer_next_filter = False
0.68 query.py(192):         self._deferred_filter = None
0.68 query.py(1335):         c._sticky_filter = self._sticky_filter
0.68 query.py(1336):         c._for_write = self._for_write
0.68 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.68 query.py(1338):         c._known_related_objects = self._known_related_objects
0.68 query.py(1339):         c._iterable_class = self._iterable_class
0.68 query.py(1340):         c._fields = self._fields
0.68 query.py(1341):         return c
0.68 query.py(1323):         if obj._sticky_filter:
0.68 query.py(1326):         obj.__dict__.update(kwargs)
0.68 query.py(1327):         return obj
0.68 query.py(1243):         clone._db = alias
0.68 query.py(1244):         return clone
0.68 query.py(483):         assert batch_size is None or batch_size > 0
0.68 query.py(488):         for parent in self.model._meta.get_parent_list():
0.68 query.py(491):         if not objs:
0.68 query.py(493):         self._for_write = True
0.68 query.py(494):         connection = connections[self.db]
0.68 query.py(1273):         if self._for_write:
0.68 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.68 query.py(495):         opts = self.model._meta
0.68 query.py(496):         fields = opts.concrete_fields
0.68 query.py(497):         objs = list(objs)
0.68 query.py(498):         self._prepare_for_bulk_create(objs)
0.68 query.py(457):         for obj in objs:
0.68 query.py(458):             if obj.pk is None:
0.68 query.py(460):                 obj.pk = obj._meta.pk.get_pk_value_on_save(obj)
0.68 query.py(461):             obj._prepare_related_fields_for_save(operation_name='bulk_create')
0.68 query.py(457):         for obj in objs:
0.68 query.py(458):             if obj.pk is None:
0.68 query.py(460):                 obj.pk = obj._meta.pk.get_pk_value_on_save(obj)
0.68 query.py(461):             obj._prepare_related_fields_for_save(operation_name='bulk_create')
0.68 query.py(457):         for obj in objs:
0.68 query.py(458):             if obj.pk is None:
0.68 query.py(460):                 obj.pk = obj._meta.pk.get_pk_value_on_save(obj)
0.68 query.py(461):             obj._prepare_related_fields_for_save(operation_name='bulk_create')
0.68 query.py(457):         for obj in objs:
0.68 query.py(458):             if obj.pk is None:
0.68 query.py(460):                 obj.pk = obj._meta.pk.get_pk_value_on_save(obj)
0.68 query.py(461):             obj._prepare_related_fields_for_save(operation_name='bulk_create')
0.68 query.py(457):         for obj in objs:
0.68 query.py(499):         with transaction.atomic(using=self.db, savepoint=False):
0.68 query.py(1273):         if self._for_write:
0.68 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.68 query.py(500):             objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)
0.68 query.py(500):             objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)
0.68 query.py(500):             objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)
0.68 query.py(500):             objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)
0.68 query.py(500):             objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)
0.68 query.py(501):             if objs_with_pk:
0.68 query.py(512):             if objs_without_pk:
0.68 query.py(513):                 fields = [f for f in fields if not isinstance(f, AutoField)]
0.68 query.py(513):                 fields = [f for f in fields if not isinstance(f, AutoField)]
0.68 query.py(513):                 fields = [f for f in fields if not isinstance(f, AutoField)]
0.68 query.py(513):                 fields = [f for f in fields if not isinstance(f, AutoField)]
0.68 query.py(513):                 fields = [f for f in fields if not isinstance(f, AutoField)]
0.68 query.py(513):                 fields = [f for f in fields if not isinstance(f, AutoField)]
0.68 query.py(514):                 returned_columns = self._batched_insert(
0.68 query.py(515):                     objs_without_pk, fields, batch_size, ignore_conflicts=ignore_conflicts,
0.68 query.py(514):                 returned_columns = self._batched_insert(
0.68 query.py(1299):         if ignore_conflicts and not connections[self.db].features.supports_ignore_conflicts:
0.68 query.py(1301):         ops = connections[self.db].ops
0.68 query.py(1273):         if self._for_write:
0.68 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.68 query.py(1302):         max_batch_size = max(ops.bulk_batch_size(fields, objs), 1)
0.68 query.py(1303):         batch_size = min(batch_size, max_batch_size) if batch_size else max_batch_size
0.68 query.py(1304):         inserted_rows = []
0.68 query.py(1305):         bulk_return = connections[self.db].features.can_return_rows_from_bulk_insert
0.68 query.py(1273):         if self._for_write:
0.68 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.68 query.py(1306):         for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:
0.68 query.py(1306):         for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:
0.68 query.py(1306):         for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:
0.68 query.py(1307):             if bulk_return and not ignore_conflicts:
0.68 query.py(1308):                 inserted_rows.extend(self._insert(
0.68 query.py(1309):                     item, fields=fields, using=self.db,
0.68 query.py(1273):         if self._for_write:
0.68 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.68 query.py(1310):                     returning_fields=self.model._meta.db_returning_fields,
0.68 query.py(1311):                     ignore_conflicts=ignore_conflicts,
0.68 query.py(1308):                 inserted_rows.extend(self._insert(
0.68 query.py(1286):         self._for_write = True
0.68 query.py(1287):         if using is None:
0.68 query.py(1289):         query = sql.InsertQuery(self.model, ignore_conflicts=ignore_conflicts)
0.68 query.py(1290):         query.insert_values(fields, objs, raw=raw)
0.68 query.py(1291):         return query.get_compiler(using=using).execute_sql(returning_fields)
0.68 query.py(1306):         for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:
0.68 query.py(1315):         return inserted_rows
0.68 query.py(517):                 if connection.features.can_return_rows_from_bulk_insert and not ignore_conflicts:
0.68 query.py(518):                     assert len(returned_columns) == len(objs_without_pk)
0.68 query.py(519):                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):
0.68 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.68 query.py(521):                         setattr(obj_without_pk, field.attname, result)
0.68 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.68 query.py(522):                     obj_without_pk._state.adding = False
0.68 query.py(523):                     obj_without_pk._state.db = self.db
0.68 query.py(1273):         if self._for_write:
0.68 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.68 query.py(519):                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):
0.68 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.68 query.py(521):                         setattr(obj_without_pk, field.attname, result)
0.68 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.68 query.py(522):                     obj_without_pk._state.adding = False
0.68 query.py(523):                     obj_without_pk._state.db = self.db
0.68 query.py(1273):         if self._for_write:
0.68 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.68 query.py(519):                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):
0.68 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.68 query.py(521):                         setattr(obj_without_pk, field.attname, result)
0.68 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.68 query.py(522):                     obj_without_pk._state.adding = False
0.68 query.py(523):                     obj_without_pk._state.db = self.db
0.68 query.py(1273):         if self._for_write:
0.68 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.68 query.py(519):                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):
0.68 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.68 query.py(521):                         setattr(obj_without_pk, field.attname, result)
0.68 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.68 query.py(522):                     obj_without_pk._state.adding = False
0.68 query.py(523):                     obj_without_pk._state.db = self.db
0.68 query.py(1273):         if self._for_write:
0.68 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.68 query.py(519):                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):
0.68 query.py(525):         return objs
0.68 query.py(179):         self.model = model
0.68 query.py(180):         self._db = using
0.68 query.py(181):         self._hints = hints or {}
0.68 query.py(182):         self._query = query or sql.Query(self.model)
0.68 query.py(183):         self._result_cache = None
0.68 query.py(184):         self._sticky_filter = False
0.68 query.py(185):         self._for_write = False
0.68 query.py(186):         self._prefetch_related_lookups = ()
0.68 query.py(187):         self._prefetch_done = False
0.68 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.68 query.py(189):         self._iterable_class = ModelIterable
0.68 query.py(190):         self._fields = None
0.68 query.py(191):         self._defer_next_filter = False
0.68 query.py(192):         self._deferred_filter = None
0.68 query.py(1242):         clone = self._chain()
0.68 query.py(1322):         obj = self._clone()
0.68 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.68 query.py(196):         if self._deferred_filter:
0.68 query.py(200):         return self._query
0.68 query.py(179):         self.model = model
0.68 query.py(180):         self._db = using
0.68 query.py(181):         self._hints = hints or {}
0.68 query.py(182):         self._query = query or sql.Query(self.model)
0.68 query.py(183):         self._result_cache = None
0.68 query.py(184):         self._sticky_filter = False
0.68 query.py(185):         self._for_write = False
0.68 query.py(186):         self._prefetch_related_lookups = ()
0.68 query.py(187):         self._prefetch_done = False
0.68 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.68 query.py(189):         self._iterable_class = ModelIterable
0.68 query.py(190):         self._fields = None
0.68 query.py(191):         self._defer_next_filter = False
0.68 query.py(192):         self._deferred_filter = None
0.68 query.py(1335):         c._sticky_filter = self._sticky_filter
0.68 query.py(1336):         c._for_write = self._for_write
0.68 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.68 query.py(1338):         c._known_related_objects = self._known_related_objects
0.68 query.py(1339):         c._iterable_class = self._iterable_class
0.68 query.py(1340):         c._fields = self._fields
0.68 query.py(1341):         return c
0.68 query.py(1323):         if obj._sticky_filter:
0.68 query.py(1326):         obj.__dict__.update(kwargs)
0.68 query.py(1327):         return obj
0.68 query.py(1243):         clone._db = alias
0.68 query.py(1244):         return clone
0.68 query.py(963):         self._not_support_combined_queries('filter')
0.68 query.py(1418):         if self.query.combinator:
0.68 query.py(196):         if self._deferred_filter:
0.68 query.py(200):         return self._query
0.68 query.py(964):         return self._filter_or_exclude(False, args, kwargs)
0.68 query.py(975):         if (args or kwargs) and self.query.is_sliced:
0.68 query.py(196):         if self._deferred_filter:
0.68 query.py(200):         return self._query
0.68 query.py(977):         clone = self._chain()
0.68 query.py(1322):         obj = self._clone()
0.68 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.68 query.py(196):         if self._deferred_filter:
0.68 query.py(200):         return self._query
0.68 query.py(179):         self.model = model
0.68 query.py(180):         self._db = using
0.68 query.py(181):         self._hints = hints or {}
0.68 query.py(182):         self._query = query or sql.Query(self.model)
0.68 query.py(183):         self._result_cache = None
0.68 query.py(184):         self._sticky_filter = False
0.68 query.py(185):         self._for_write = False
0.68 query.py(186):         self._prefetch_related_lookups = ()
0.68 query.py(187):         self._prefetch_done = False
0.68 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.68 query.py(189):         self._iterable_class = ModelIterable
0.68 query.py(190):         self._fields = None
0.68 query.py(191):         self._defer_next_filter = False
0.68 query.py(192):         self._deferred_filter = None
0.68 query.py(1335):         c._sticky_filter = self._sticky_filter
0.68 query.py(1336):         c._for_write = self._for_write
0.68 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.68 query.py(1338):         c._known_related_objects = self._known_related_objects
0.68 query.py(1339):         c._iterable_class = self._iterable_class
0.68 query.py(1340):         c._fields = self._fields
0.68 query.py(1341):         return c
0.68 query.py(1323):         if obj._sticky_filter:
0.68 query.py(1326):         obj.__dict__.update(kwargs)
0.68 query.py(1327):         return obj
0.68 query.py(978):         if self._defer_next_filter:
0.68 query.py(982):             clone._filter_or_exclude_inplace(negate, args, kwargs)
0.68 query.py(986):         if negate:
0.68 query.py(989):             self._query.add_q(Q(*args, **kwargs))
0.68 query.py(983):         return clone
0.68 query.py(280):         self._fetch_all()
0.68 query.py(1344):         if self._result_cache is None:
0.68 query.py(1345):             self._result_cache = list(self._iterable_class(self))
0.68 query.py(37):         self.queryset = queryset
0.68 query.py(38):         self.chunked_fetch = chunked_fetch
0.68 query.py(39):         self.chunk_size = chunk_size
0.69 query.py(46):         queryset = self.queryset
0.69 query.py(47):         db = queryset.db
0.69 query.py(1273):         if self._for_write:
0.69 query.py(1275):         return self._db or router.db_for_read(self.model, **self._hints)
0.69 query.py(48):         compiler = queryset.query.get_compiler(using=db)
0.69 query.py(196):         if self._deferred_filter:
0.69 query.py(200):         return self._query
0.69 query.py(51):         results = compiler.execute_sql(chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size)
0.69 query.py(52):         select, klass_info, annotation_col_map = (compiler.select, compiler.klass_info,
0.69 query.py(53):                                                   compiler.annotation_col_map)
0.69 query.py(52):         select, klass_info, annotation_col_map = (compiler.select, compiler.klass_info,
0.69 query.py(54):         model_cls = klass_info['model']
0.69 query.py(55):         select_fields = klass_info['select_fields']
0.69 query.py(56):         model_fields_start, model_fields_end = select_fields[0], select_fields[-1] + 1
0.69 query.py(57):         init_list = [f[0].target.attname
0.69 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.69 query.py(57):         init_list = [f[0].target.attname
0.69 query.py(57):         init_list = [f[0].target.attname
0.69 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.69 query.py(57):         init_list = [f[0].target.attname
0.69 query.py(57):         init_list = [f[0].target.attname
0.69 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.69 query.py(57):         init_list = [f[0].target.attname
0.69 query.py(57):         init_list = [f[0].target.attname
0.69 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.69 query.py(57):         init_list = [f[0].target.attname
0.69 query.py(57):         init_list = [f[0].target.attname
0.69 query.py(59):         related_populators = get_related_populators(klass_info, select, db)
0.69 query.py(2030):     iterators = []
0.69 query.py(2031):     related_klass_infos = klass_info.get('related_klass_infos', [])
0.69 query.py(2032):     for rel_klass_info in related_klass_infos:
0.69 query.py(2035):     return iterators
0.69 query.py(60):         known_related_objects = [
0.69 query.py(66):             ])) for field, related_objs in queryset._known_related_objects.items()
0.69 query.py(60):         known_related_objects = [
0.69 query.py(60):         known_related_objects = [
0.69 query.py(68):         for row in compiler.results_iter(results):
0.69 query.py(1346):         if self._prefetch_related_lookups and not self._prefetch_done:
0.69 query.py(281):         return iter(self._result_cache)
0.69 query.py(179):         self.model = model
0.69 query.py(180):         self._db = using
0.69 query.py(181):         self._hints = hints or {}
0.69 query.py(182):         self._query = query or sql.Query(self.model)
0.69 query.py(183):         self._result_cache = None
0.69 query.py(184):         self._sticky_filter = False
0.69 query.py(185):         self._for_write = False
0.69 query.py(186):         self._prefetch_related_lookups = ()
0.69 query.py(187):         self._prefetch_done = False
0.69 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.69 query.py(189):         self._iterable_class = ModelIterable
0.69 query.py(190):         self._fields = None
0.69 query.py(191):         self._defer_next_filter = False
0.69 query.py(192):         self._deferred_filter = None
0.69 query.py(1242):         clone = self._chain()
0.69 query.py(1322):         obj = self._clone()
0.69 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.69 query.py(196):         if self._deferred_filter:
0.69 query.py(200):         return self._query
0.69 query.py(179):         self.model = model
0.69 query.py(180):         self._db = using
0.69 query.py(181):         self._hints = hints or {}
0.69 query.py(182):         self._query = query or sql.Query(self.model)
0.69 query.py(183):         self._result_cache = None
0.69 query.py(184):         self._sticky_filter = False
0.69 query.py(185):         self._for_write = False
0.69 query.py(186):         self._prefetch_related_lookups = ()
0.69 query.py(187):         self._prefetch_done = False
0.69 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.69 query.py(189):         self._iterable_class = ModelIterable
0.69 query.py(190):         self._fields = None
0.69 query.py(191):         self._defer_next_filter = False
0.69 query.py(192):         self._deferred_filter = None
0.69 query.py(1335):         c._sticky_filter = self._sticky_filter
0.69 query.py(1336):         c._for_write = self._for_write
0.69 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.69 query.py(1338):         c._known_related_objects = self._known_related_objects
0.69 query.py(1339):         c._iterable_class = self._iterable_class
0.69 query.py(1340):         c._fields = self._fields
0.69 query.py(1341):         return c
0.69 query.py(1323):         if obj._sticky_filter:
0.69 query.py(1326):         obj.__dict__.update(kwargs)
0.69 query.py(1327):         return obj
0.69 query.py(1243):         clone._db = alias
0.69 query.py(1244):         return clone
0.69 query.py(483):         assert batch_size is None or batch_size > 0
0.69 query.py(488):         for parent in self.model._meta.get_parent_list():
0.69 query.py(491):         if not objs:
0.69 query.py(493):         self._for_write = True
0.69 query.py(494):         connection = connections[self.db]
0.69 query.py(1273):         if self._for_write:
0.69 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.69 query.py(495):         opts = self.model._meta
0.69 query.py(496):         fields = opts.concrete_fields
0.69 query.py(497):         objs = list(objs)
0.69 query.py(498):         self._prepare_for_bulk_create(objs)
0.69 query.py(457):         for obj in objs:
0.69 query.py(458):             if obj.pk is None:
0.69 query.py(460):                 obj.pk = obj._meta.pk.get_pk_value_on_save(obj)
0.69 query.py(461):             obj._prepare_related_fields_for_save(operation_name='bulk_create')
0.69 query.py(457):         for obj in objs:
0.69 query.py(499):         with transaction.atomic(using=self.db, savepoint=False):
0.69 query.py(1273):         if self._for_write:
0.69 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.69 query.py(500):             objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)
0.69 query.py(500):             objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)
0.69 query.py(501):             if objs_with_pk:
0.69 query.py(512):             if objs_without_pk:
0.69 query.py(513):                 fields = [f for f in fields if not isinstance(f, AutoField)]
0.69 query.py(513):                 fields = [f for f in fields if not isinstance(f, AutoField)]
0.69 query.py(513):                 fields = [f for f in fields if not isinstance(f, AutoField)]
0.69 query.py(513):                 fields = [f for f in fields if not isinstance(f, AutoField)]
0.69 query.py(513):                 fields = [f for f in fields if not isinstance(f, AutoField)]
0.69 query.py(514):                 returned_columns = self._batched_insert(
0.69 query.py(515):                     objs_without_pk, fields, batch_size, ignore_conflicts=ignore_conflicts,
0.69 query.py(514):                 returned_columns = self._batched_insert(
0.69 query.py(1299):         if ignore_conflicts and not connections[self.db].features.supports_ignore_conflicts:
0.69 query.py(1301):         ops = connections[self.db].ops
0.69 query.py(1273):         if self._for_write:
0.69 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.69 query.py(1302):         max_batch_size = max(ops.bulk_batch_size(fields, objs), 1)
0.69 query.py(1303):         batch_size = min(batch_size, max_batch_size) if batch_size else max_batch_size
0.69 query.py(1304):         inserted_rows = []
0.69 query.py(1305):         bulk_return = connections[self.db].features.can_return_rows_from_bulk_insert
0.69 query.py(1273):         if self._for_write:
0.69 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.69 query.py(1306):         for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:
0.69 query.py(1306):         for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:
0.69 query.py(1306):         for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:
0.69 query.py(1307):             if bulk_return and not ignore_conflicts:
0.69 query.py(1308):                 inserted_rows.extend(self._insert(
0.69 query.py(1309):                     item, fields=fields, using=self.db,
0.69 query.py(1273):         if self._for_write:
0.69 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.69 query.py(1310):                     returning_fields=self.model._meta.db_returning_fields,
0.69 query.py(1311):                     ignore_conflicts=ignore_conflicts,
0.69 query.py(1308):                 inserted_rows.extend(self._insert(
0.69 query.py(1286):         self._for_write = True
0.69 query.py(1287):         if using is None:
0.69 query.py(1289):         query = sql.InsertQuery(self.model, ignore_conflicts=ignore_conflicts)
0.69 query.py(1290):         query.insert_values(fields, objs, raw=raw)
0.69 query.py(1291):         return query.get_compiler(using=using).execute_sql(returning_fields)
0.69 query.py(1306):         for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:
0.69 query.py(1315):         return inserted_rows
0.69 query.py(517):                 if connection.features.can_return_rows_from_bulk_insert and not ignore_conflicts:
0.69 query.py(518):                     assert len(returned_columns) == len(objs_without_pk)
0.69 query.py(519):                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):
0.69 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.69 query.py(521):                         setattr(obj_without_pk, field.attname, result)
0.69 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.69 query.py(522):                     obj_without_pk._state.adding = False
0.69 query.py(523):                     obj_without_pk._state.db = self.db
0.69 query.py(1273):         if self._for_write:
0.69 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.69 query.py(519):                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):
0.69 query.py(525):         return objs
0.69 query.py(179):         self.model = model
0.69 query.py(180):         self._db = using
0.69 query.py(181):         self._hints = hints or {}
0.69 query.py(182):         self._query = query or sql.Query(self.model)
0.69 query.py(183):         self._result_cache = None
0.69 query.py(184):         self._sticky_filter = False
0.69 query.py(185):         self._for_write = False
0.69 query.py(186):         self._prefetch_related_lookups = ()
0.69 query.py(187):         self._prefetch_done = False
0.69 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.69 query.py(189):         self._iterable_class = ModelIterable
0.69 query.py(190):         self._fields = None
0.69 query.py(191):         self._defer_next_filter = False
0.69 query.py(192):         self._deferred_filter = None
0.69 query.py(1242):         clone = self._chain()
0.69 query.py(1322):         obj = self._clone()
0.69 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.69 query.py(196):         if self._deferred_filter:
0.69 query.py(200):         return self._query
0.69 query.py(179):         self.model = model
0.69 query.py(180):         self._db = using
0.69 query.py(181):         self._hints = hints or {}
0.69 query.py(182):         self._query = query or sql.Query(self.model)
0.69 query.py(183):         self._result_cache = None
0.69 query.py(184):         self._sticky_filter = False
0.69 query.py(185):         self._for_write = False
0.69 query.py(186):         self._prefetch_related_lookups = ()
0.69 query.py(187):         self._prefetch_done = False
0.69 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.69 query.py(189):         self._iterable_class = ModelIterable
0.69 query.py(190):         self._fields = None
0.69 query.py(191):         self._defer_next_filter = False
0.69 query.py(192):         self._deferred_filter = None
0.69 query.py(1335):         c._sticky_filter = self._sticky_filter
0.69 query.py(1336):         c._for_write = self._for_write
0.69 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.69 query.py(1338):         c._known_related_objects = self._known_related_objects
0.69 query.py(1339):         c._iterable_class = self._iterable_class
0.69 query.py(1340):         c._fields = self._fields
0.69 query.py(1341):         return c
0.69 query.py(1323):         if obj._sticky_filter:
0.69 query.py(1326):         obj.__dict__.update(kwargs)
0.69 query.py(1327):         return obj
0.69 query.py(1243):         clone._db = alias
0.69 query.py(1244):         return clone
0.69 query.py(963):         self._not_support_combined_queries('filter')
0.69 query.py(1418):         if self.query.combinator:
0.69 query.py(196):         if self._deferred_filter:
0.69 query.py(200):         return self._query
0.69 query.py(964):         return self._filter_or_exclude(False, args, kwargs)
0.69 query.py(975):         if (args or kwargs) and self.query.is_sliced:
0.69 query.py(196):         if self._deferred_filter:
0.69 query.py(200):         return self._query
0.69 query.py(977):         clone = self._chain()
0.69 query.py(1322):         obj = self._clone()
0.69 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.69 query.py(196):         if self._deferred_filter:
0.69 query.py(200):         return self._query
0.69 query.py(179):         self.model = model
0.69 query.py(180):         self._db = using
0.69 query.py(181):         self._hints = hints or {}
0.69 query.py(182):         self._query = query or sql.Query(self.model)
0.69 query.py(183):         self._result_cache = None
0.69 query.py(184):         self._sticky_filter = False
0.69 query.py(185):         self._for_write = False
0.69 query.py(186):         self._prefetch_related_lookups = ()
0.69 query.py(187):         self._prefetch_done = False
0.69 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.69 query.py(189):         self._iterable_class = ModelIterable
0.69 query.py(190):         self._fields = None
0.69 query.py(191):         self._defer_next_filter = False
0.69 query.py(192):         self._deferred_filter = None
0.69 query.py(1335):         c._sticky_filter = self._sticky_filter
0.69 query.py(1336):         c._for_write = self._for_write
0.69 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.69 query.py(1338):         c._known_related_objects = self._known_related_objects
0.69 query.py(1339):         c._iterable_class = self._iterable_class
0.69 query.py(1340):         c._fields = self._fields
0.69 query.py(1341):         return c
0.69 query.py(1323):         if obj._sticky_filter:
0.69 query.py(1326):         obj.__dict__.update(kwargs)
0.69 query.py(1327):         return obj
0.69 query.py(978):         if self._defer_next_filter:
0.69 query.py(982):             clone._filter_or_exclude_inplace(negate, args, kwargs)
0.69 query.py(986):         if negate:
0.69 query.py(989):             self._query.add_q(Q(*args, **kwargs))
0.69 query.py(983):         return clone
0.69 query.py(280):         self._fetch_all()
0.69 query.py(1344):         if self._result_cache is None:
0.69 query.py(1345):             self._result_cache = list(self._iterable_class(self))
0.69 query.py(37):         self.queryset = queryset
0.69 query.py(38):         self.chunked_fetch = chunked_fetch
0.69 query.py(39):         self.chunk_size = chunk_size
0.69 query.py(46):         queryset = self.queryset
0.69 query.py(47):         db = queryset.db
0.69 query.py(1273):         if self._for_write:
0.69 query.py(1275):         return self._db or router.db_for_read(self.model, **self._hints)
0.69 query.py(48):         compiler = queryset.query.get_compiler(using=db)
0.69 query.py(196):         if self._deferred_filter:
0.69 query.py(200):         return self._query
0.69 query.py(51):         results = compiler.execute_sql(chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size)
0.69 query.py(52):         select, klass_info, annotation_col_map = (compiler.select, compiler.klass_info,
0.69 query.py(53):                                                   compiler.annotation_col_map)
0.69 query.py(52):         select, klass_info, annotation_col_map = (compiler.select, compiler.klass_info,
0.69 query.py(54):         model_cls = klass_info['model']
0.69 query.py(55):         select_fields = klass_info['select_fields']
0.69 query.py(56):         model_fields_start, model_fields_end = select_fields[0], select_fields[-1] + 1
0.69 query.py(57):         init_list = [f[0].target.attname
0.69 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.69 query.py(57):         init_list = [f[0].target.attname
0.69 query.py(57):         init_list = [f[0].target.attname
0.69 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.69 query.py(57):         init_list = [f[0].target.attname
0.69 query.py(57):         init_list = [f[0].target.attname
0.69 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.69 query.py(57):         init_list = [f[0].target.attname
0.69 query.py(57):         init_list = [f[0].target.attname
0.69 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.69 query.py(57):         init_list = [f[0].target.attname
0.69 query.py(57):         init_list = [f[0].target.attname
0.69 query.py(59):         related_populators = get_related_populators(klass_info, select, db)
0.69 query.py(2030):     iterators = []
0.69 query.py(2031):     related_klass_infos = klass_info.get('related_klass_infos', [])
0.69 query.py(2032):     for rel_klass_info in related_klass_infos:
0.69 query.py(2035):     return iterators
0.69 query.py(60):         known_related_objects = [
0.69 query.py(66):             ])) for field, related_objs in queryset._known_related_objects.items()
0.69 query.py(60):         known_related_objects = [
0.69 query.py(60):         known_related_objects = [
0.69 query.py(68):         for row in compiler.results_iter(results):
0.69 query.py(69):             obj = model_cls.from_db(db, init_list, row[model_fields_start:model_fields_end])
0.69 query.py(70):             for rel_populator in related_populators:
0.69 query.py(72):             if annotation_col_map:
0.69 query.py(77):             for field, rel_objs, rel_getter in known_related_objects:
0.69 query.py(89):             yield obj
0.69 query.py(68):         for row in compiler.results_iter(results):
0.69 query.py(1346):         if self._prefetch_related_lookups and not self._prefetch_done:
0.69 query.py(281):         return iter(self._result_cache)
0.69 query.py(179):         self.model = model
0.69 query.py(180):         self._db = using
0.69 query.py(181):         self._hints = hints or {}
0.69 query.py(182):         self._query = query or sql.Query(self.model)
0.69 query.py(183):         self._result_cache = None
0.69 query.py(184):         self._sticky_filter = False
0.69 query.py(185):         self._for_write = False
0.69 query.py(186):         self._prefetch_related_lookups = ()
0.69 query.py(187):         self._prefetch_done = False
0.69 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.69 query.py(189):         self._iterable_class = ModelIterable
0.69 query.py(190):         self._fields = None
0.69 query.py(191):         self._defer_next_filter = False
0.69 query.py(192):         self._deferred_filter = None
0.69 query.py(1242):         clone = self._chain()
0.69 query.py(1322):         obj = self._clone()
0.69 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.69 query.py(196):         if self._deferred_filter:
0.69 query.py(200):         return self._query
0.69 query.py(179):         self.model = model
0.69 query.py(180):         self._db = using
0.69 query.py(181):         self._hints = hints or {}
0.69 query.py(182):         self._query = query or sql.Query(self.model)
0.69 query.py(183):         self._result_cache = None
0.69 query.py(184):         self._sticky_filter = False
0.69 query.py(185):         self._for_write = False
0.69 query.py(186):         self._prefetch_related_lookups = ()
0.69 query.py(187):         self._prefetch_done = False
0.69 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.69 query.py(189):         self._iterable_class = ModelIterable
0.69 query.py(190):         self._fields = None
0.69 query.py(191):         self._defer_next_filter = False
0.69 query.py(192):         self._deferred_filter = None
0.69 query.py(1335):         c._sticky_filter = self._sticky_filter
0.69 query.py(1336):         c._for_write = self._for_write
0.69 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.69 query.py(1338):         c._known_related_objects = self._known_related_objects
0.69 query.py(1339):         c._iterable_class = self._iterable_class
0.69 query.py(1340):         c._fields = self._fields
0.69 query.py(1341):         return c
0.69 query.py(1323):         if obj._sticky_filter:
0.69 query.py(1326):         obj.__dict__.update(kwargs)
0.69 query.py(1327):         return obj
0.69 query.py(1243):         clone._db = alias
0.69 query.py(1244):         return clone
0.69 query.py(483):         assert batch_size is None or batch_size > 0
0.69 query.py(488):         for parent in self.model._meta.get_parent_list():
0.69 query.py(491):         if not objs:
0.69 query.py(492):             return objs
0.69 query.py(179):         self.model = model
0.69 query.py(180):         self._db = using
0.69 query.py(181):         self._hints = hints or {}
0.69 query.py(182):         self._query = query or sql.Query(self.model)
0.69 query.py(183):         self._result_cache = None
0.69 query.py(184):         self._sticky_filter = False
0.69 query.py(185):         self._for_write = False
0.69 query.py(186):         self._prefetch_related_lookups = ()
0.69 query.py(187):         self._prefetch_done = False
0.69 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.69 query.py(189):         self._iterable_class = ModelIterable
0.69 query.py(190):         self._fields = None
0.69 query.py(191):         self._defer_next_filter = False
0.69 query.py(192):         self._deferred_filter = None
0.69 query.py(419):         if self.query.combinator and (args or kwargs):
0.69 query.py(196):         if self._deferred_filter:
0.69 query.py(200):         return self._query
0.69 query.py(424):         clone = self._chain() if self.query.combinator else self.filter(*args, **kwargs)
0.69 query.py(196):         if self._deferred_filter:
0.69 query.py(200):         return self._query
0.69 query.py(963):         self._not_support_combined_queries('filter')
0.69 query.py(1418):         if self.query.combinator:
0.69 query.py(196):         if self._deferred_filter:
0.69 query.py(200):         return self._query
0.69 query.py(964):         return self._filter_or_exclude(False, args, kwargs)
0.69 query.py(975):         if (args or kwargs) and self.query.is_sliced:
0.69 query.py(196):         if self._deferred_filter:
0.69 query.py(200):         return self._query
0.69 query.py(977):         clone = self._chain()
0.69 query.py(1322):         obj = self._clone()
0.69 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.69 query.py(196):         if self._deferred_filter:
0.69 query.py(200):         return self._query
0.69 query.py(179):         self.model = model
0.69 query.py(180):         self._db = using
0.69 query.py(181):         self._hints = hints or {}
0.69 query.py(182):         self._query = query or sql.Query(self.model)
0.69 query.py(183):         self._result_cache = None
0.69 query.py(184):         self._sticky_filter = False
0.69 query.py(185):         self._for_write = False
0.69 query.py(186):         self._prefetch_related_lookups = ()
0.69 query.py(187):         self._prefetch_done = False
0.69 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.69 query.py(189):         self._iterable_class = ModelIterable
0.69 query.py(190):         self._fields = None
0.69 query.py(191):         self._defer_next_filter = False
0.69 query.py(192):         self._deferred_filter = None
0.69 query.py(1335):         c._sticky_filter = self._sticky_filter
0.69 query.py(1336):         c._for_write = self._for_write
0.69 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.69 query.py(1338):         c._known_related_objects = self._known_related_objects
0.69 query.py(1339):         c._iterable_class = self._iterable_class
0.69 query.py(1340):         c._fields = self._fields
0.69 query.py(1341):         return c
0.69 query.py(1323):         if obj._sticky_filter:
0.69 query.py(1326):         obj.__dict__.update(kwargs)
0.69 query.py(1327):         return obj
0.69 query.py(978):         if self._defer_next_filter:
0.69 query.py(982):             clone._filter_or_exclude_inplace(negate, args, kwargs)
0.69 query.py(986):         if negate:
0.69 query.py(989):             self._query.add_q(Q(*args, **kwargs))
0.69 query.py(983):         return clone
0.69 query.py(425):         if self.query.can_filter() and not self.query.distinct_fields:
0.69 query.py(196):         if self._deferred_filter:
0.69 query.py(200):         return self._query
0.69 query.py(196):         if self._deferred_filter:
0.69 query.py(200):         return self._query
0.69 query.py(426):             clone = clone.order_by()
0.69 query.py(1166):         if self.query.is_sliced:
0.69 query.py(196):         if self._deferred_filter:
0.69 query.py(200):         return self._query
0.69 query.py(1168):         obj = self._chain()
0.69 query.py(1322):         obj = self._clone()
0.69 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.69 query.py(196):         if self._deferred_filter:
0.69 query.py(200):         return self._query
0.69 query.py(179):         self.model = model
0.69 query.py(180):         self._db = using
0.69 query.py(181):         self._hints = hints or {}
0.69 query.py(182):         self._query = query or sql.Query(self.model)
0.69 query.py(183):         self._result_cache = None
0.69 query.py(184):         self._sticky_filter = False
0.69 query.py(185):         self._for_write = False
0.69 query.py(186):         self._prefetch_related_lookups = ()
0.69 query.py(187):         self._prefetch_done = False
0.69 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.69 query.py(189):         self._iterable_class = ModelIterable
0.69 query.py(190):         self._fields = None
0.69 query.py(191):         self._defer_next_filter = False
0.69 query.py(192):         self._deferred_filter = None
0.69 query.py(1335):         c._sticky_filter = self._sticky_filter
0.69 query.py(1336):         c._for_write = self._for_write
0.69 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.69 query.py(1338):         c._known_related_objects = self._known_related_objects
0.69 query.py(1339):         c._iterable_class = self._iterable_class
0.69 query.py(1340):         c._fields = self._fields
0.69 query.py(1341):         return c
0.69 query.py(1323):         if obj._sticky_filter:
0.69 query.py(1326):         obj.__dict__.update(kwargs)
0.69 query.py(1327):         return obj
0.69 query.py(1169):         obj.query.clear_ordering(force_empty=False)
0.69 query.py(196):         if self._deferred_filter:
0.69 query.py(200):         return self._query
0.69 query.py(1170):         obj.query.add_ordering(*field_names)
0.69 query.py(196):         if self._deferred_filter:
0.69 query.py(200):         return self._query
0.69 query.py(1171):         return obj
0.69 query.py(427):         limit = None
0.69 query.py(428):         if not clone.query.select_for_update or connections[clone.db].features.supports_select_for_update_with_limit:
0.69 query.py(196):         if self._deferred_filter:
0.69 query.py(200):         return self._query
0.69 query.py(429):             limit = MAX_GET_RESULTS
0.69 query.py(430):             clone.query.set_limits(high=limit)
0.69 query.py(196):         if self._deferred_filter:
0.69 query.py(200):         return self._query
0.69 query.py(431):         num = len(clone)
0.69 query.py(262):         self._fetch_all()
0.69 query.py(1344):         if self._result_cache is None:
0.69 query.py(1345):             self._result_cache = list(self._iterable_class(self))
0.69 query.py(37):         self.queryset = queryset
0.69 query.py(38):         self.chunked_fetch = chunked_fetch
0.69 query.py(39):         self.chunk_size = chunk_size
0.69 query.py(46):         queryset = self.queryset
0.69 query.py(47):         db = queryset.db
0.69 query.py(1273):         if self._for_write:
0.69 query.py(1275):         return self._db or router.db_for_read(self.model, **self._hints)
0.69 query.py(48):         compiler = queryset.query.get_compiler(using=db)
0.69 query.py(196):         if self._deferred_filter:
0.69 query.py(200):         return self._query
0.69 query.py(51):         results = compiler.execute_sql(chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size)
0.69 query.py(52):         select, klass_info, annotation_col_map = (compiler.select, compiler.klass_info,
0.69 query.py(53):                                                   compiler.annotation_col_map)
0.69 query.py(52):         select, klass_info, annotation_col_map = (compiler.select, compiler.klass_info,
0.69 query.py(54):         model_cls = klass_info['model']
0.69 query.py(55):         select_fields = klass_info['select_fields']
0.69 query.py(56):         model_fields_start, model_fields_end = select_fields[0], select_fields[-1] + 1
0.69 query.py(57):         init_list = [f[0].target.attname
0.69 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.69 query.py(57):         init_list = [f[0].target.attname
0.69 query.py(57):         init_list = [f[0].target.attname
0.69 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.69 query.py(57):         init_list = [f[0].target.attname
0.69 query.py(57):         init_list = [f[0].target.attname
0.69 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.69 query.py(57):         init_list = [f[0].target.attname
0.69 query.py(57):         init_list = [f[0].target.attname
0.69 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.69 query.py(57):         init_list = [f[0].target.attname
0.69 query.py(57):         init_list = [f[0].target.attname
0.69 query.py(59):         related_populators = get_related_populators(klass_info, select, db)
0.69 query.py(2030):     iterators = []
0.69 query.py(2031):     related_klass_infos = klass_info.get('related_klass_infos', [])
0.69 query.py(2032):     for rel_klass_info in related_klass_infos:
0.69 query.py(2035):     return iterators
0.69 query.py(60):         known_related_objects = [
0.69 query.py(66):             ])) for field, related_objs in queryset._known_related_objects.items()
0.69 query.py(60):         known_related_objects = [
0.69 query.py(60):         known_related_objects = [
0.69 query.py(68):         for row in compiler.results_iter(results):
0.69 query.py(69):             obj = model_cls.from_db(db, init_list, row[model_fields_start:model_fields_end])
0.69 query.py(70):             for rel_populator in related_populators:
0.69 query.py(72):             if annotation_col_map:
0.69 query.py(77):             for field, rel_objs, rel_getter in known_related_objects:
0.69 query.py(89):             yield obj
0.69 query.py(68):         for row in compiler.results_iter(results):
0.69 query.py(1346):         if self._prefetch_related_lookups and not self._prefetch_done:
0.69 query.py(263):         return len(self._result_cache)
0.69 query.py(432):         if num == 1:
0.69 query.py(433):             return clone._result_cache[0]
0.69 query.py(179):         self.model = model
0.69 query.py(180):         self._db = using
0.69 query.py(181):         self._hints = hints or {}
0.69 query.py(182):         self._query = query or sql.Query(self.model)
0.69 query.py(183):         self._result_cache = None
0.69 query.py(184):         self._sticky_filter = False
0.69 query.py(185):         self._for_write = False
0.69 query.py(186):         self._prefetch_related_lookups = ()
0.69 query.py(187):         self._prefetch_done = False
0.69 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.69 query.py(189):         self._iterable_class = ModelIterable
0.69 query.py(190):         self._fields = None
0.69 query.py(191):         self._defer_next_filter = False
0.69 query.py(192):         self._deferred_filter = None
0.69 query.py(1242):         clone = self._chain()
0.69 query.py(1322):         obj = self._clone()
0.69 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.69 query.py(196):         if self._deferred_filter:
0.69 query.py(200):         return self._query
0.69 query.py(179):         self.model = model
0.69 query.py(180):         self._db = using
0.69 query.py(181):         self._hints = hints or {}
0.69 query.py(182):         self._query = query or sql.Query(self.model)
0.69 query.py(183):         self._result_cache = None
0.69 query.py(184):         self._sticky_filter = False
0.69 query.py(185):         self._for_write = False
0.69 query.py(186):         self._prefetch_related_lookups = ()
0.69 query.py(187):         self._prefetch_done = False
0.69 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.69 query.py(189):         self._iterable_class = ModelIterable
0.69 query.py(190):         self._fields = None
0.69 query.py(191):         self._defer_next_filter = False
0.69 query.py(192):         self._deferred_filter = None
0.69 query.py(1335):         c._sticky_filter = self._sticky_filter
0.69 query.py(1336):         c._for_write = self._for_write
0.69 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.69 query.py(1338):         c._known_related_objects = self._known_related_objects
0.69 query.py(1339):         c._iterable_class = self._iterable_class
0.69 query.py(1340):         c._fields = self._fields
0.69 query.py(1341):         return c
0.69 query.py(1323):         if obj._sticky_filter:
0.69 query.py(1326):         obj.__dict__.update(kwargs)
0.69 query.py(1327):         return obj
0.69 query.py(1243):         clone._db = alias
0.69 query.py(1244):         return clone
0.69 query.py(963):         self._not_support_combined_queries('filter')
0.69 query.py(1418):         if self.query.combinator:
0.69 query.py(196):         if self._deferred_filter:
0.69 query.py(200):         return self._query
0.69 query.py(964):         return self._filter_or_exclude(False, args, kwargs)
0.69 query.py(975):         if (args or kwargs) and self.query.is_sliced:
0.69 query.py(196):         if self._deferred_filter:
0.69 query.py(200):         return self._query
0.69 query.py(977):         clone = self._chain()
0.69 query.py(1322):         obj = self._clone()
0.69 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.69 query.py(196):         if self._deferred_filter:
0.69 query.py(200):         return self._query
0.69 query.py(179):         self.model = model
0.69 query.py(180):         self._db = using
0.69 query.py(181):         self._hints = hints or {}
0.69 query.py(182):         self._query = query or sql.Query(self.model)
0.69 query.py(183):         self._result_cache = None
0.69 query.py(184):         self._sticky_filter = False
0.69 query.py(185):         self._for_write = False
0.69 query.py(186):         self._prefetch_related_lookups = ()
0.69 query.py(187):         self._prefetch_done = False
0.69 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.69 query.py(189):         self._iterable_class = ModelIterable
0.69 query.py(190):         self._fields = None
0.69 query.py(191):         self._defer_next_filter = False
0.69 query.py(192):         self._deferred_filter = None
0.69 query.py(1335):         c._sticky_filter = self._sticky_filter
0.69 query.py(1336):         c._for_write = self._for_write
0.69 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.69 query.py(1338):         c._known_related_objects = self._known_related_objects
0.69 query.py(1339):         c._iterable_class = self._iterable_class
0.69 query.py(1340):         c._fields = self._fields
0.69 query.py(1341):         return c
0.69 query.py(1323):         if obj._sticky_filter:
0.69 query.py(1326):         obj.__dict__.update(kwargs)
0.69 query.py(1327):         return obj
0.69 query.py(978):         if self._defer_next_filter:
0.69 query.py(982):             clone._filter_or_exclude_inplace(negate, args, kwargs)
0.69 query.py(986):         if negate:
0.69 query.py(989):             self._query.add_q(Q(*args, **kwargs))
0.69 query.py(983):         return clone
0.69 query.py(868):         if flat and named:
0.69 query.py(870):         if flat and len(fields) > 1:
0.69 query.py(873):         field_names = {f for f in fields if not hasattr(f, 'resolve_expression')}
0.69 query.py(873):         field_names = {f for f in fields if not hasattr(f, 'resolve_expression')}
0.69 query.py(873):         field_names = {f for f in fields if not hasattr(f, 'resolve_expression')}
0.69 query.py(873):         field_names = {f for f in fields if not hasattr(f, 'resolve_expression')}
0.69 query.py(874):         _fields = []
0.69 query.py(875):         expressions = {}
0.69 query.py(876):         counter = 1
0.69 query.py(877):         for field in fields:
0.69 query.py(878):             if hasattr(field, 'resolve_expression'):
0.69 query.py(888):                 _fields.append(field)
0.69 query.py(877):         for field in fields:
0.69 query.py(878):             if hasattr(field, 'resolve_expression'):
0.69 query.py(888):                 _fields.append(field)
0.69 query.py(877):         for field in fields:
0.69 query.py(890):         clone = self._values(*_fields, **expressions)
0.69 query.py(854):         clone = self._chain()
0.69 query.py(1322):         obj = self._clone()
0.69 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.69 query.py(196):         if self._deferred_filter:
0.69 query.py(200):         return self._query
0.69 query.py(179):         self.model = model
0.69 query.py(180):         self._db = using
0.69 query.py(181):         self._hints = hints or {}
0.69 query.py(182):         self._query = query or sql.Query(self.model)
0.69 query.py(183):         self._result_cache = None
0.69 query.py(184):         self._sticky_filter = False
0.69 query.py(185):         self._for_write = False
0.69 query.py(186):         self._prefetch_related_lookups = ()
0.69 query.py(187):         self._prefetch_done = False
0.69 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.69 query.py(189):         self._iterable_class = ModelIterable
0.69 query.py(190):         self._fields = None
0.69 query.py(191):         self._defer_next_filter = False
0.69 query.py(192):         self._deferred_filter = None
0.69 query.py(1335):         c._sticky_filter = self._sticky_filter
0.69 query.py(1336):         c._for_write = self._for_write
0.69 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.69 query.py(1338):         c._known_related_objects = self._known_related_objects
0.69 query.py(1339):         c._iterable_class = self._iterable_class
0.69 query.py(1340):         c._fields = self._fields
0.69 query.py(1341):         return c
0.69 query.py(1323):         if obj._sticky_filter:
0.69 query.py(1326):         obj.__dict__.update(kwargs)
0.69 query.py(1327):         return obj
0.69 query.py(855):         if expressions:
0.69 query.py(857):         clone._fields = fields
0.69 query.py(858):         clone.query.set_values(fields)
0.69 query.py(196):         if self._deferred_filter:
0.69 query.py(200):         return self._query
0.69 query.py(859):         return clone
0.69 query.py(892):             NamedValuesListIterable if named
0.69 query.py(893):             else FlatValuesListIterable if flat
0.69 query.py(894):             else ValuesListIterable
0.69 query.py(891):         clone._iterable_class = (
0.69 query.py(896):         return clone
0.69 query.py(280):         self._fetch_all()
0.69 query.py(1344):         if self._result_cache is None:
0.69 query.py(1345):             self._result_cache = list(self._iterable_class(self))
0.69 query.py(37):         self.queryset = queryset
0.69 query.py(38):         self.chunked_fetch = chunked_fetch
0.69 query.py(39):         self.chunk_size = chunk_size
0.69 query.py(120):         queryset = self.queryset
0.69 query.py(121):         query = queryset.query
0.69 query.py(196):         if self._deferred_filter:
0.69 query.py(200):         return self._query
0.69 query.py(122):         compiler = query.get_compiler(queryset.db)
0.69 query.py(1273):         if self._for_write:
0.69 query.py(1275):         return self._db or router.db_for_read(self.model, **self._hints)
0.69 query.py(124):         if queryset._fields:
0.69 query.py(127):                 *query.extra_select,
0.69 query.py(128):                 *query.values_select,
0.69 query.py(129):                 *query.annotation_select,
0.69 query.py(126):             names = [
0.69 query.py(131):             fields = [*queryset._fields, *(f for f in query.annotation_select if f not in queryset._fields)]
0.69 query.py(131):             fields = [*queryset._fields, *(f for f in query.annotation_select if f not in queryset._fields)]
0.69 query.py(132):             if fields != names:
0.69 query.py(140):         return compiler.results_iter(tuple_expected=True, chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size)
0.69 query.py(1346):         if self._prefetch_related_lookups and not self._prefetch_done:
0.69 query.py(281):         return iter(self._result_cache)
0.69 query.py(179):         self.model = model
0.69 query.py(180):         self._db = using
0.69 query.py(181):         self._hints = hints or {}
0.69 query.py(182):         self._query = query or sql.Query(self.model)
0.69 query.py(183):         self._result_cache = None
0.69 query.py(184):         self._sticky_filter = False
0.69 query.py(185):         self._for_write = False
0.69 query.py(186):         self._prefetch_related_lookups = ()
0.69 query.py(187):         self._prefetch_done = False
0.69 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.69 query.py(189):         self._iterable_class = ModelIterable
0.69 query.py(190):         self._fields = None
0.69 query.py(191):         self._defer_next_filter = False
0.69 query.py(192):         self._deferred_filter = None
0.69 query.py(1242):         clone = self._chain()
0.69 query.py(1322):         obj = self._clone()
0.69 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.69 query.py(196):         if self._deferred_filter:
0.69 query.py(200):         return self._query
0.69 query.py(179):         self.model = model
0.69 query.py(180):         self._db = using
0.69 query.py(181):         self._hints = hints or {}
0.69 query.py(182):         self._query = query or sql.Query(self.model)
0.69 query.py(183):         self._result_cache = None
0.69 query.py(184):         self._sticky_filter = False
0.69 query.py(185):         self._for_write = False
0.69 query.py(186):         self._prefetch_related_lookups = ()
0.69 query.py(187):         self._prefetch_done = False
0.69 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.69 query.py(189):         self._iterable_class = ModelIterable
0.69 query.py(190):         self._fields = None
0.69 query.py(191):         self._defer_next_filter = False
0.69 query.py(192):         self._deferred_filter = None
0.69 query.py(1335):         c._sticky_filter = self._sticky_filter
0.69 query.py(1336):         c._for_write = self._for_write
0.69 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.69 query.py(1338):         c._known_related_objects = self._known_related_objects
0.69 query.py(1339):         c._iterable_class = self._iterable_class
0.69 query.py(1340):         c._fields = self._fields
0.69 query.py(1341):         return c
0.69 query.py(1323):         if obj._sticky_filter:
0.69 query.py(1326):         obj.__dict__.update(kwargs)
0.69 query.py(1327):         return obj
0.69 query.py(1243):         clone._db = alias
0.69 query.py(1244):         return clone
0.69 query.py(483):         assert batch_size is None or batch_size > 0
0.69 query.py(488):         for parent in self.model._meta.get_parent_list():
0.69 query.py(491):         if not objs:
0.69 query.py(493):         self._for_write = True
0.69 query.py(494):         connection = connections[self.db]
0.69 query.py(1273):         if self._for_write:
0.69 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.69 query.py(495):         opts = self.model._meta
0.69 query.py(496):         fields = opts.concrete_fields
0.69 query.py(497):         objs = list(objs)
0.69 query.py(498):         self._prepare_for_bulk_create(objs)
0.69 query.py(457):         for obj in objs:
0.69 query.py(458):             if obj.pk is None:
0.69 query.py(460):                 obj.pk = obj._meta.pk.get_pk_value_on_save(obj)
0.69 query.py(461):             obj._prepare_related_fields_for_save(operation_name='bulk_create')
0.69 query.py(457):         for obj in objs:
0.69 query.py(458):             if obj.pk is None:
0.69 query.py(460):                 obj.pk = obj._meta.pk.get_pk_value_on_save(obj)
0.69 query.py(461):             obj._prepare_related_fields_for_save(operation_name='bulk_create')
0.69 query.py(457):         for obj in objs:
0.69 query.py(458):             if obj.pk is None:
0.69 query.py(460):                 obj.pk = obj._meta.pk.get_pk_value_on_save(obj)
0.69 query.py(461):             obj._prepare_related_fields_for_save(operation_name='bulk_create')
0.69 query.py(457):         for obj in objs:
0.69 query.py(458):             if obj.pk is None:
0.69 query.py(460):                 obj.pk = obj._meta.pk.get_pk_value_on_save(obj)
0.69 query.py(461):             obj._prepare_related_fields_for_save(operation_name='bulk_create')
0.69 query.py(457):         for obj in objs:
0.69 query.py(499):         with transaction.atomic(using=self.db, savepoint=False):
0.69 query.py(1273):         if self._for_write:
0.69 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.69 query.py(500):             objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)
0.69 query.py(500):             objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)
0.69 query.py(500):             objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)
0.69 query.py(500):             objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)
0.69 query.py(500):             objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)
0.69 query.py(501):             if objs_with_pk:
0.69 query.py(512):             if objs_without_pk:
0.69 query.py(513):                 fields = [f for f in fields if not isinstance(f, AutoField)]
0.69 query.py(513):                 fields = [f for f in fields if not isinstance(f, AutoField)]
0.69 query.py(513):                 fields = [f for f in fields if not isinstance(f, AutoField)]
0.69 query.py(513):                 fields = [f for f in fields if not isinstance(f, AutoField)]
0.69 query.py(513):                 fields = [f for f in fields if not isinstance(f, AutoField)]
0.69 query.py(513):                 fields = [f for f in fields if not isinstance(f, AutoField)]
0.69 query.py(514):                 returned_columns = self._batched_insert(
0.69 query.py(515):                     objs_without_pk, fields, batch_size, ignore_conflicts=ignore_conflicts,
0.69 query.py(514):                 returned_columns = self._batched_insert(
0.69 query.py(1299):         if ignore_conflicts and not connections[self.db].features.supports_ignore_conflicts:
0.69 query.py(1301):         ops = connections[self.db].ops
0.69 query.py(1273):         if self._for_write:
0.69 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.69 query.py(1302):         max_batch_size = max(ops.bulk_batch_size(fields, objs), 1)
0.69 query.py(1303):         batch_size = min(batch_size, max_batch_size) if batch_size else max_batch_size
0.69 query.py(1304):         inserted_rows = []
0.69 query.py(1305):         bulk_return = connections[self.db].features.can_return_rows_from_bulk_insert
0.69 query.py(1273):         if self._for_write:
0.69 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.69 query.py(1306):         for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:
0.69 query.py(1306):         for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:
0.69 query.py(1306):         for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:
0.69 query.py(1307):             if bulk_return and not ignore_conflicts:
0.69 query.py(1308):                 inserted_rows.extend(self._insert(
0.69 query.py(1309):                     item, fields=fields, using=self.db,
0.69 query.py(1273):         if self._for_write:
0.69 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.69 query.py(1310):                     returning_fields=self.model._meta.db_returning_fields,
0.69 query.py(1311):                     ignore_conflicts=ignore_conflicts,
0.69 query.py(1308):                 inserted_rows.extend(self._insert(
0.69 query.py(1286):         self._for_write = True
0.69 query.py(1287):         if using is None:
0.69 query.py(1289):         query = sql.InsertQuery(self.model, ignore_conflicts=ignore_conflicts)
0.69 query.py(1290):         query.insert_values(fields, objs, raw=raw)
0.69 query.py(1291):         return query.get_compiler(using=using).execute_sql(returning_fields)
0.69 query.py(1306):         for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:
0.69 query.py(1315):         return inserted_rows
0.69 query.py(517):                 if connection.features.can_return_rows_from_bulk_insert and not ignore_conflicts:
0.69 query.py(518):                     assert len(returned_columns) == len(objs_without_pk)
0.69 query.py(519):                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):
0.69 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.69 query.py(521):                         setattr(obj_without_pk, field.attname, result)
0.69 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.69 query.py(522):                     obj_without_pk._state.adding = False
0.69 query.py(523):                     obj_without_pk._state.db = self.db
0.69 query.py(1273):         if self._for_write:
0.69 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.69 query.py(519):                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):
0.69 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.69 query.py(521):                         setattr(obj_without_pk, field.attname, result)
0.69 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.69 query.py(522):                     obj_without_pk._state.adding = False
0.69 query.py(523):                     obj_without_pk._state.db = self.db
0.69 query.py(1273):         if self._for_write:
0.69 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.69 query.py(519):                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):
0.69 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.69 query.py(521):                         setattr(obj_without_pk, field.attname, result)
0.69 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.69 query.py(522):                     obj_without_pk._state.adding = False
0.69 query.py(523):                     obj_without_pk._state.db = self.db
0.69 query.py(1273):         if self._for_write:
0.69 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.69 query.py(519):                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):
0.69 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.69 query.py(521):                         setattr(obj_without_pk, field.attname, result)
0.69 query.py(520):                     for result, field in zip(results, opts.db_returning_fields):
0.69 query.py(522):                     obj_without_pk._state.adding = False
0.69 query.py(523):                     obj_without_pk._state.db = self.db
0.69 query.py(1273):         if self._for_write:
0.69 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.69 query.py(519):                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):
0.69 query.py(525):         return objs
Creating test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
System check identified no issues (0 silenced).
test_bulk_update_returns_number_of_rows_matched (test_coverup_django__django-14559.BulkUpdateTest) ... 0.74 query.py(179):         self.model = model
0.74 query.py(180):         self._db = using
0.74 query.py(181):         self._hints = hints or {}
0.74 query.py(182):         self._query = query or sql.Query(self.model)
0.74 query.py(183):         self._result_cache = None
0.74 query.py(184):         self._sticky_filter = False
0.74 query.py(185):         self._for_write = False
0.74 query.py(186):         self._prefetch_related_lookups = ()
0.74 query.py(187):         self._prefetch_done = False
0.74 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.74 query.py(189):         self._iterable_class = ModelIterable
0.74 query.py(190):         self._fields = None
0.74 query.py(191):         self._defer_next_filter = False
0.74 query.py(192):         self._deferred_filter = None
0.74 query.py(451):         obj = self.model(**kwargs)
0.74 query.py(452):         self._for_write = True
0.74 query.py(453):         obj.save(force_insert=True, using=self.db)
0.74 query.py(1273):         if self._for_write:
0.74 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.74 query.py(179):         self.model = model
0.74 query.py(180):         self._db = using
0.74 query.py(181):         self._hints = hints or {}
0.74 query.py(182):         self._query = query or sql.Query(self.model)
0.74 query.py(183):         self._result_cache = None
0.74 query.py(184):         self._sticky_filter = False
0.74 query.py(185):         self._for_write = False
0.74 query.py(186):         self._prefetch_related_lookups = ()
0.74 query.py(187):         self._prefetch_done = False
0.74 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.74 query.py(189):         self._iterable_class = ModelIterable
0.74 query.py(190):         self._fields = None
0.74 query.py(191):         self._defer_next_filter = False
0.74 query.py(192):         self._deferred_filter = None
0.74 query.py(1286):         self._for_write = True
0.74 query.py(1287):         if using is None:
0.74 query.py(1289):         query = sql.InsertQuery(self.model, ignore_conflicts=ignore_conflicts)
0.74 query.py(1290):         query.insert_values(fields, objs, raw=raw)
0.74 query.py(1291):         return query.get_compiler(using=using).execute_sql(returning_fields)
0.74 query.py(454):         return obj
0.74 query.py(179):         self.model = model
0.74 query.py(180):         self._db = using
0.74 query.py(181):         self._hints = hints or {}
0.74 query.py(182):         self._query = query or sql.Query(self.model)
0.74 query.py(183):         self._result_cache = None
0.74 query.py(184):         self._sticky_filter = False
0.74 query.py(185):         self._for_write = False
0.74 query.py(186):         self._prefetch_related_lookups = ()
0.74 query.py(187):         self._prefetch_done = False
0.74 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.74 query.py(189):         self._iterable_class = ModelIterable
0.74 query.py(190):         self._fields = None
0.74 query.py(191):         self._defer_next_filter = False
0.74 query.py(192):         self._deferred_filter = None
0.74 query.py(451):         obj = self.model(**kwargs)
0.74 query.py(452):         self._for_write = True
0.74 query.py(453):         obj.save(force_insert=True, using=self.db)
0.74 query.py(1273):         if self._for_write:
0.74 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.74 query.py(179):         self.model = model
0.74 query.py(180):         self._db = using
0.74 query.py(181):         self._hints = hints or {}
0.74 query.py(182):         self._query = query or sql.Query(self.model)
0.74 query.py(183):         self._result_cache = None
0.74 query.py(184):         self._sticky_filter = False
0.74 query.py(185):         self._for_write = False
0.74 query.py(186):         self._prefetch_related_lookups = ()
0.74 query.py(187):         self._prefetch_done = False
0.74 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.74 query.py(189):         self._iterable_class = ModelIterable
0.74 query.py(190):         self._fields = None
0.74 query.py(191):         self._defer_next_filter = False
0.74 query.py(192):         self._deferred_filter = None
0.74 query.py(1286):         self._for_write = True
0.74 query.py(1287):         if using is None:
0.74 query.py(1289):         query = sql.InsertQuery(self.model, ignore_conflicts=ignore_conflicts)
0.74 query.py(1290):         query.insert_values(fields, objs, raw=raw)
0.74 query.py(1291):         return query.get_compiler(using=using).execute_sql(returning_fields)
0.74 query.py(454):         return obj
0.74 query.py(179):         self.model = model
0.74 query.py(180):         self._db = using
0.74 query.py(181):         self._hints = hints or {}
0.74 query.py(182):         self._query = query or sql.Query(self.model)
0.74 query.py(183):         self._result_cache = None
0.74 query.py(184):         self._sticky_filter = False
0.74 query.py(185):         self._for_write = False
0.74 query.py(186):         self._prefetch_related_lookups = ()
0.74 query.py(187):         self._prefetch_done = False
0.74 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.74 query.py(189):         self._iterable_class = ModelIterable
0.74 query.py(190):         self._fields = None
0.74 query.py(191):         self._defer_next_filter = False
0.74 query.py(192):         self._deferred_filter = None
0.74 query.py(451):         obj = self.model(**kwargs)
0.74 query.py(452):         self._for_write = True
0.74 query.py(453):         obj.save(force_insert=True, using=self.db)
0.74 query.py(1273):         if self._for_write:
0.74 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.74 query.py(179):         self.model = model
0.74 query.py(180):         self._db = using
0.74 query.py(181):         self._hints = hints or {}
0.74 query.py(182):         self._query = query or sql.Query(self.model)
0.74 query.py(183):         self._result_cache = None
0.74 query.py(184):         self._sticky_filter = False
0.74 query.py(185):         self._for_write = False
0.74 query.py(186):         self._prefetch_related_lookups = ()
0.74 query.py(187):         self._prefetch_done = False
0.74 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.74 query.py(189):         self._iterable_class = ModelIterable
0.74 query.py(190):         self._fields = None
0.74 query.py(191):         self._defer_next_filter = False
0.74 query.py(192):         self._deferred_filter = None
0.74 query.py(1286):         self._for_write = True
0.74 query.py(1287):         if using is None:
0.74 query.py(1289):         query = sql.InsertQuery(self.model, ignore_conflicts=ignore_conflicts)
0.74 query.py(1290):         query.insert_values(fields, objs, raw=raw)
0.74 query.py(1291):         return query.get_compiler(using=using).execute_sql(returning_fields)
0.74 query.py(454):         return obj
0.74 query.py(179):         self.model = model
0.74 query.py(180):         self._db = using
0.74 query.py(181):         self._hints = hints or {}
0.74 query.py(182):         self._query = query or sql.Query(self.model)
0.74 query.py(183):         self._result_cache = None
0.74 query.py(184):         self._sticky_filter = False
0.74 query.py(185):         self._for_write = False
0.74 query.py(186):         self._prefetch_related_lookups = ()
0.74 query.py(187):         self._prefetch_done = False
0.74 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.74 query.py(189):         self._iterable_class = ModelIterable
0.74 query.py(190):         self._fields = None
0.74 query.py(191):         self._defer_next_filter = False
0.74 query.py(192):         self._deferred_filter = None
0.74 query.py(262):         self._fetch_all()
0.74 query.py(1344):         if self._result_cache is None:
0.74 query.py(1345):             self._result_cache = list(self._iterable_class(self))
0.74 query.py(37):         self.queryset = queryset
0.74 query.py(38):         self.chunked_fetch = chunked_fetch
0.74 query.py(39):         self.chunk_size = chunk_size
0.74 query.py(46):         queryset = self.queryset
0.74 query.py(47):         db = queryset.db
0.74 query.py(1273):         if self._for_write:
0.74 query.py(1275):         return self._db or router.db_for_read(self.model, **self._hints)
0.74 query.py(48):         compiler = queryset.query.get_compiler(using=db)
0.74 query.py(196):         if self._deferred_filter:
0.74 query.py(200):         return self._query
0.74 query.py(51):         results = compiler.execute_sql(chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size)
0.74 query.py(52):         select, klass_info, annotation_col_map = (compiler.select, compiler.klass_info,
0.74 query.py(53):                                                   compiler.annotation_col_map)
0.74 query.py(52):         select, klass_info, annotation_col_map = (compiler.select, compiler.klass_info,
0.74 query.py(54):         model_cls = klass_info['model']
0.74 query.py(55):         select_fields = klass_info['select_fields']
0.74 query.py(56):         model_fields_start, model_fields_end = select_fields[0], select_fields[-1] + 1
0.74 query.py(57):         init_list = [f[0].target.attname
0.74 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.74 query.py(57):         init_list = [f[0].target.attname
0.74 query.py(57):         init_list = [f[0].target.attname
0.74 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.74 query.py(57):         init_list = [f[0].target.attname
0.74 query.py(57):         init_list = [f[0].target.attname
0.74 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.74 query.py(57):         init_list = [f[0].target.attname
0.74 query.py(57):         init_list = [f[0].target.attname
0.74 query.py(58):                      for f in select[model_fields_start:model_fields_end]]
0.74 query.py(57):         init_list = [f[0].target.attname
0.74 query.py(57):         init_list = [f[0].target.attname
0.74 query.py(59):         related_populators = get_related_populators(klass_info, select, db)
0.74 query.py(2030):     iterators = []
0.74 query.py(2031):     related_klass_infos = klass_info.get('related_klass_infos', [])
0.74 query.py(2032):     for rel_klass_info in related_klass_infos:
0.74 query.py(2035):     return iterators
0.74 query.py(60):         known_related_objects = [
0.74 query.py(66):             ])) for field, related_objs in queryset._known_related_objects.items()
0.74 query.py(60):         known_related_objects = [
0.74 query.py(60):         known_related_objects = [
0.74 query.py(68):         for row in compiler.results_iter(results):
0.74 query.py(69):             obj = model_cls.from_db(db, init_list, row[model_fields_start:model_fields_end])
0.74 query.py(70):             for rel_populator in related_populators:
0.74 query.py(72):             if annotation_col_map:
0.74 query.py(77):             for field, rel_objs, rel_getter in known_related_objects:
0.74 query.py(89):             yield obj
0.74 query.py(68):         for row in compiler.results_iter(results):
0.74 query.py(69):             obj = model_cls.from_db(db, init_list, row[model_fields_start:model_fields_end])
0.74 query.py(70):             for rel_populator in related_populators:
0.74 query.py(72):             if annotation_col_map:
0.74 query.py(77):             for field, rel_objs, rel_getter in known_related_objects:
0.74 query.py(89):             yield obj
0.74 query.py(68):         for row in compiler.results_iter(results):
0.74 query.py(69):             obj = model_cls.from_db(db, init_list, row[model_fields_start:model_fields_end])
0.74 query.py(70):             for rel_populator in related_populators:
0.74 query.py(72):             if annotation_col_map:
0.74 query.py(77):             for field, rel_objs, rel_getter in known_related_objects:
0.74 query.py(89):             yield obj
0.74 query.py(68):         for row in compiler.results_iter(results):
0.74 query.py(1346):         if self._prefetch_related_lookups and not self._prefetch_done:
0.74 query.py(263):         return len(self._result_cache)
0.74 query.py(280):         self._fetch_all()
0.74 query.py(1344):         if self._result_cache is None:
0.74 query.py(1346):         if self._prefetch_related_lookups and not self._prefetch_done:
0.74 query.py(281):         return iter(self._result_cache)
0.74 query.py(262):         self._fetch_all()
0.74 query.py(1344):         if self._result_cache is None:
0.74 query.py(1346):         if self._prefetch_related_lookups and not self._prefetch_done:
0.74 query.py(263):         return len(self._result_cache)
0.74 query.py(179):         self.model = model
0.74 query.py(180):         self._db = using
0.74 query.py(181):         self._hints = hints or {}
0.74 query.py(182):         self._query = query or sql.Query(self.model)
0.74 query.py(183):         self._result_cache = None
0.74 query.py(184):         self._sticky_filter = False
0.74 query.py(185):         self._for_write = False
0.74 query.py(186):         self._prefetch_related_lookups = ()
0.74 query.py(187):         self._prefetch_done = False
0.74 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.74 query.py(189):         self._iterable_class = ModelIterable
0.74 query.py(190):         self._fields = None
0.74 query.py(191):         self._defer_next_filter = False
0.74 query.py(192):         self._deferred_filter = None
0.74 query.py(531):         if batch_size is not None and batch_size < 0:
0.74 query.py(533):         if not fields:
0.74 query.py(535):         objs = tuple(objs)
0.74 query.py(536):         if any(obj.pk is None for obj in objs):
0.74 query.py(536):         if any(obj.pk is None for obj in objs):
0.74 query.py(536):         if any(obj.pk is None for obj in objs):
0.74 query.py(536):         if any(obj.pk is None for obj in objs):
0.74 query.py(536):         if any(obj.pk is None for obj in objs):
0.74 query.py(538):         fields = [self.model._meta.get_field(name) for name in fields]
0.74 query.py(538):         fields = [self.model._meta.get_field(name) for name in fields]
0.74 query.py(538):         fields = [self.model._meta.get_field(name) for name in fields]
0.74 query.py(539):         if any(not f.concrete or f.many_to_many for f in fields):
0.74 query.py(539):         if any(not f.concrete or f.many_to_many for f in fields):
0.74 query.py(539):         if any(not f.concrete or f.many_to_many for f in fields):
0.74 query.py(541):         if any(f.primary_key for f in fields):
0.74 query.py(541):         if any(f.primary_key for f in fields):
0.74 query.py(541):         if any(f.primary_key for f in fields):
0.74 query.py(543):         if not objs:
0.75 query.py(547):         max_batch_size = connections[self.db].ops.bulk_batch_size(['pk', 'pk'] + fields, objs)
0.75 query.py(1273):         if self._for_write:
0.75 query.py(1275):         return self._db or router.db_for_read(self.model, **self._hints)
0.75 query.py(548):         batch_size = min(batch_size, max_batch_size) if batch_size else max_batch_size
0.75 query.py(549):         requires_casting = connections[self.db].features.requires_casted_case_in_updates
0.75 query.py(1273):         if self._for_write:
0.75 query.py(1275):         return self._db or router.db_for_read(self.model, **self._hints)
0.75 query.py(550):         batches = (objs[i:i + batch_size] for i in range(0, len(objs), batch_size))
0.75 query.py(551):         updates = []
0.75 query.py(552):         for batch_objs in batches:
0.75 query.py(550):         batches = (objs[i:i + batch_size] for i in range(0, len(objs), batch_size))
0.75 query.py(553):             update_kwargs = {}
0.75 query.py(554):             for field in fields:
0.75 query.py(555):                 when_statements = []
0.75 query.py(556):                 for obj in batch_objs:
0.75 query.py(557):                     attr = getattr(obj, field.attname)
0.75 ok

----------------------------------------------------------------------
Ran 1 test in 0.006s

OK
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
query.py(558):                     if not isinstance(attr, Expression):
0.75 query.py(559):                         attr = Value(attr, output_field=field)
0.75 query.py(560):                     when_statements.append(When(pk=obj.pk, then=attr))
0.75 query.py(556):                 for obj in batch_objs:
0.75 query.py(557):                     attr = getattr(obj, field.attname)
0.75 query.py(558):                     if not isinstance(attr, Expression):
0.75 query.py(559):                         attr = Value(attr, output_field=field)
0.75 query.py(560):                     when_statements.append(When(pk=obj.pk, then=attr))
0.75 query.py(556):                 for obj in batch_objs:
0.75 query.py(557):                     attr = getattr(obj, field.attname)
0.75 query.py(558):                     if not isinstance(attr, Expression):
0.75 query.py(559):                         attr = Value(attr, output_field=field)
0.75 query.py(560):                     when_statements.append(When(pk=obj.pk, then=attr))
0.75 query.py(556):                 for obj in batch_objs:
0.75 query.py(561):                 case_statement = Case(*when_statements, output_field=field)
0.75 query.py(562):                 if requires_casting:
0.75 query.py(564):                 update_kwargs[field.attname] = case_statement
0.75 query.py(554):             for field in fields:
0.75 query.py(565):             updates.append(([obj.pk for obj in batch_objs], update_kwargs))
0.75 query.py(565):             updates.append(([obj.pk for obj in batch_objs], update_kwargs))
0.75 query.py(565):             updates.append(([obj.pk for obj in batch_objs], update_kwargs))
0.75 query.py(565):             updates.append(([obj.pk for obj in batch_objs], update_kwargs))
0.75 query.py(565):             updates.append(([obj.pk for obj in batch_objs], update_kwargs))
0.75 query.py(552):         for batch_objs in batches:
0.75 query.py(550):         batches = (objs[i:i + batch_size] for i in range(0, len(objs), batch_size))
0.75 query.py(566):         rows_updated = 0
0.75 query.py(567):         with transaction.atomic(using=self.db, savepoint=False):
0.75 query.py(1273):         if self._for_write:
0.75 query.py(1275):         return self._db or router.db_for_read(self.model, **self._hints)
0.75 query.py(568):             for pks, update_kwargs in updates:
0.75 query.py(569):                 rows_updated += self.filter(pk__in=pks).update(**update_kwargs)
0.75 query.py(963):         self._not_support_combined_queries('filter')
0.75 query.py(1418):         if self.query.combinator:
0.75 query.py(196):         if self._deferred_filter:
0.75 query.py(200):         return self._query
0.75 query.py(964):         return self._filter_or_exclude(False, args, kwargs)
0.75 query.py(975):         if (args or kwargs) and self.query.is_sliced:
0.75 query.py(196):         if self._deferred_filter:
0.75 query.py(200):         return self._query
0.75 query.py(977):         clone = self._chain()
0.75 query.py(1322):         obj = self._clone()
0.75 query.py(1334):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.75 query.py(196):         if self._deferred_filter:
0.75 query.py(200):         return self._query
0.75 query.py(179):         self.model = model
0.75 query.py(180):         self._db = using
0.75 query.py(181):         self._hints = hints or {}
0.75 query.py(182):         self._query = query or sql.Query(self.model)
0.75 query.py(183):         self._result_cache = None
0.75 query.py(184):         self._sticky_filter = False
0.75 query.py(185):         self._for_write = False
0.75 query.py(186):         self._prefetch_related_lookups = ()
0.75 query.py(187):         self._prefetch_done = False
0.75 query.py(188):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.75 query.py(189):         self._iterable_class = ModelIterable
0.75 query.py(190):         self._fields = None
0.75 query.py(191):         self._defer_next_filter = False
0.75 query.py(192):         self._deferred_filter = None
0.75 query.py(1335):         c._sticky_filter = self._sticky_filter
0.75 query.py(1336):         c._for_write = self._for_write
0.75 query.py(1337):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.75 query.py(1338):         c._known_related_objects = self._known_related_objects
0.75 query.py(1339):         c._iterable_class = self._iterable_class
0.75 query.py(1340):         c._fields = self._fields
0.75 query.py(1341):         return c
0.75 query.py(1323):         if obj._sticky_filter:
0.75 query.py(1326):         obj.__dict__.update(kwargs)
0.75 query.py(1327):         return obj
0.75 query.py(978):         if self._defer_next_filter:
0.75 query.py(982):             clone._filter_or_exclude_inplace(negate, args, kwargs)
0.75 query.py(986):         if negate:
0.75 query.py(989):             self._query.add_q(Q(*args, **kwargs))
0.75 query.py(983):         return clone
0.75 query.py(776):         self._not_support_combined_queries('update')
0.75 query.py(1418):         if self.query.combinator:
0.75 query.py(196):         if self._deferred_filter:
0.75 query.py(200):         return self._query
0.75 query.py(777):         if self.query.is_sliced:
0.75 query.py(196):         if self._deferred_filter:
0.75 query.py(200):         return self._query
0.75 query.py(779):         self._for_write = True
0.75 query.py(780):         query = self.query.chain(sql.UpdateQuery)
0.75 query.py(196):         if self._deferred_filter:
0.75 query.py(200):         return self._query
0.75 query.py(781):         query.add_update_values(kwargs)
0.75 query.py(783):         query.annotations = {}
0.75 query.py(784):         with transaction.mark_for_rollback_on_error(using=self.db):
0.75 query.py(1273):         if self._for_write:
0.75 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.75 query.py(785):             rows = query.get_compiler(self.db).execute_sql(CURSOR)
0.75 query.py(1273):         if self._for_write:
0.75 query.py(1274):             return self._db or router.db_for_write(self.model, **self._hints)
0.75 query.py(786):         self._result_cache = None
0.75 query.py(787):         return rows
0.75 query.py(568):             for pks, update_kwargs in updates:
0.75 query.py(570):         return rows_updated
+ cat coverage.cover
{"/testbed/django/db/models/query.py": {"5": 1, "6": 1, "7": 1, "8": 1, "10": 1, "11": 1, "12": 1, "13": 1, "17": 1, "18": 1, "19": 1, "20": 1, "21": 1, "22": 1, "23": 1, "24": 1, "25": 1, "26": 1, "29": 1, "32": 1, "35": 2, "42": 2, "92": 2, "113": 2, "143": 2, "162": 2, "175": 2, "1425": 2, "1430": 2, "1440": 2, "1592": 2, "1651": 1, "1663": 1, "1798": 1, "1852": 1, "1952": 2, "2029": 1, "36": 1, "37": 24, "38": 24, "39": 24, "45": 1, "46": 19, "47": 19, "48": 19, "51": 19, "52": 38, "53": 19, "54": 19, "55": 19, "56": 19, "57": 173, "58": 77, "59": 19, "60": 57, "66": 19, "68": 41, "69": 22, "70": 22, "71": 0, "72": 22, "73": 0, "74": 0, "77": 22, "79": 0, "80": 0, "81": 0, "82": 0, "83": 0, "84": 0, "85": 0, "87": 0, "89": 22, "61": 0, "65": 0, "63": 0, "62": 0, "64": 0, "97": 1, "98": 0, "99": 0, "100": 0, "104": 0, "105": 0, "106": 0, "103": 0, "108": 0, "109": 0, "110": 0, "119": 1, "120": 5, "121": 5, "122": 5, "124": 5, "127": 5, "128": 5, "129": 5, "126": 5, "131": 10, "132": 5, "134": 0, "135": 0, "136": 0, "137": 0, "138": 0, "140": 5, "149": 1, "150": 0, "151": 0, "152": 0, "154": 0, "155": 0, "156": 0, "157": 0, "158": 0, "159": 0, "168": 1, "169": 0, "170": 0, "171": 0, "172": 0, "178": 1, "194": 1, "195": 1, "202": 1, "203": 1, "208": 1, "214": 1, "215": 1, "221": 1, "231": 1, "236": 1, "255": 1, "261": 1, "265": 1, "283": 1, "287": 1, "320": 1, "323": 1, "334": 1, "352": 1, "355": 1, "365": 1, "401": 1, "414": 1, "446": 1, "456": 1, "463": 1, "527": 1, "571": 1, "573": 1, "598": 1, "618": 1, "643": 1, "665": 1, "670": 1, "675": 1, "680": 1, "685": 1, "724": 1, "754": 1, "755": 1, "757": 1, "769": 1, "771": 1, "788": 1, "790": 1, "805": 1, "806": 1, "808": 1, "813": 1, "834": 1, "839": 1, "846": 1, "853": 1, "861": 1, "867": 1, "898": 1, "914": 1, "941": 1, "951": 1, "958": 1, "966": 1, "974": 1, "985": 1, "991": 1, "1008": 1, "1019": 1, "1030": 1, "1039": 1, "1045": 1, "1061": 1, "1083": 1, "1106": 1, "1114": 1, "1121": 1, "1164": 1, "1173": 1, "1184": 1, "1194": 1, "1202": 1, "1219": 1, "1240": 1, "1250": 1, "1251": 1, "1270": 1, "1271": 1, "1281": 1, "1292": 1, "1293": 1, "1295": 1, "1317": 1, "1329": 1, "1343": 1, "1349": 1, "1363": 1, "1374": 1, "1381": 1, "1389": 1, "1391": 1, "1398": 1, "1406": 1, "1407": 1, "1417": 1, "179": 133, "180": 133, "181": 133, "182": 133, "183": 133, "184": 133, "185": 133, "186": 133, "187": 133, "188": 133, "189": 133, "190": 133, "191": 133, "192": 133, "196": 220, "197": 0, "198": 0, "199": 0, "200": 220, "204": 0, "205": 0, "206": 0, "210": 0, "211": 0, "212": 0, "213": 0, "223": 0, "224": 0, "225": 0, "226": 0, "228": 0, "229": 0, "233": 0, "234": 0, "237": 0, "238": 0, "239": 0, "240": 0, "241": 0, "243": 0, "244": 0, "245": 0, "248": 0, "249": 0, "250": 0, "251": 0, "253": 0, "256": 0, "257": 0, "258": 0, "259": 0, "262": 9, "263": 9, "280": 17, "281": 17, "284": 0, "285": 0, "289": 0, "290": 0, "291": 0, "292": 0, "294": 0, "295": 0, "296": 0, "297": 0, "299": 0, "300": 0, "302": 0, "303": 0, "304": 0, "305": 0, "307": 0, "308": 0, "309": 0, "311": 0, "312": 0, "313": 0, "315": 0, "316": 0, "317": 0, "318": 0, "321": 0, "324": 0, "325": 0, "326": 0, "327": 0, "328": 0, "329": 0, "330": 0, "331": 0, "332": 0, "335": 0, "336": 0, "337": 0, "338": 0, "339": 0, "340": 0, "341": 0, "342": 0, "343": 0, "344": 0, "345": 0, "346": 0, "353": 0, "360": 0, "361": 0, "362": 0, "363": 0, "373": 0, "374": 0, "375": 0, "376": 0, "380": 0, "381": 0, "382": 0, "383": 0, "384": 0, "386": 0, "387": 0, "388": 0, "389": 0, "390": 0, "391": 0, "392": 0, "393": 0, "394": 0, "395": 0, "396": 0, "397": 0, "399": 0, "409": 0, "410": 0, "412": 0, "419": 7, "420": 0, "421": 0, "422": 0, "424": 7, "425": 7, "426": 7, "427": 7, "428": 7, "429": 7, "430": 7, "431": 7, "432": 7, "433": 7, "434": 0, "435": 0, "436": 0, "437": 0, "439": 0, "440": 0, "441": 0, "442": 0, "451": 8, "452": 8, "453": 8, "454": 8, "457": 45, "458": 35, "460": 35, "461": 35, "483": 15, "488": 15, "489": 0, "490": 0, "491": 15, "492": 5, "493": 10, "494": 10, "495": 10, "496": 10, "497": 10, "498": 10, "499": 10, "500": 45, "501": 10, "502": 0, "503": 0, "505": 0, "506": 0, "507": 0, "508": 0, "509": 0, "510": 0, "511": 0, "512": 10, "513": 55, "514": 20, "515": 10, "517": 10, "518": 10, "519": 45, "520": 70, "521": 35, "522": 35, "523": 35, "525": 10, "531": 1, "532": 0, "533": 1, "534": 0, "535": 1, "536": 5, "537": 0, "538": 3, "539": 3, "540": 0, "541": 3, "542": 0, "543": 1, "544": 0, "547": 1, "548": 1, "549": 1, "550": 3, "551": 1, "552": 2, "553": 1, "554": 2, "555": 1, "556": 4, "557": 3, "558": 3, "559": 3, "560": 3, "561": 1, "562": 1, "563": 0, "564": 1, "565": 5, "566": 1, "567": 1, "568": 2, "569": 1, "570": 1, "581": 0, "582": 0, "583": 0, "584": 0, "585": 0, "587": 0, "588": 0, "589": 0, "590": 0, "591": 0, "592": 0, "593": 0, "594": 0, "595": 0, "596": 0, "605": 0, "606": 0, "607": 0, "610": 0, "611": 0, "612": 0, "613": 0, "614": 0, "615": 0, "616": 0, "623": 0, "624": 0, "625": 0, "626": 0, "627": 0, "628": 0, "629": 0, "630": 0, "631": 0, "633": 0, "634": 0, "635": 0, "636": 0, "637": 0, "638": 0, "639": 0, "641": 0, "648": 0, "649": 0, "651": 0, "652": 0, "653": 0, "654": 0, "655": 0, "656": 0, "659": 0, "660": 0, "661": 0, "662": 0, "663": 0, "666": 0, "667": 0, "668": 0, "671": 0, "672": 0, "673": 0, "677": 0, "678": 0, "682": 0, "683": 0, "690": 0, "691": 0, "692": 0, "693": 0, "695": 0, "699": 0, "698": 0, "700": 0, "701": 0, "702": 0, "704": 0, "705": 0, "706": 0, "707": 0, "708": 0, "709": 0, "710": 0, "713": 0, "714": 0, "715": 0, "716": 0, "717": 0, "719": 0, "721": 0, "722": 0, "696": 0, "694": 0, "726": 0, "727": 0, "728": 0, "729": 0, "730": 0, "731": 0, "732": 0, "734": 0, "739": 0, "742": 0, "743": 0, "744": 0, "746": 0, "747": 0, "748": 0, "751": 0, "752": 0, "762": 0, "763": 0, "764": 0, "765": 0, "766": 0, "767": 0, "768": 0, "776": 1, "777": 1, "778": 0, "779": 1, "780": 1, "781": 1, "783": 1, "784": 1, "785": 1, "786": 1, "787": 1, "797": 1, "798": 0, "799": 1, "800": 1, "802": 1, "803": 1, "804": 1, "809": 1, "810": 1, "811": 0, "815": 0, "816": 0, "817": 0, "818": 0, "821": 0, "822": 0, "823": 0, "824": 0, "825": 0, "826": 0, "827": 0, "828": 0, "830": 0, "831": 0, "832": 0, "836": 0, "837": 0, "840": 0, "847": 0, "848": 0, "849": 0, "850": 0, "851": 0, "854": 5, "855": 5, "856": 0, "857": 5, "858": 5, "859": 5, "862": 0, "863": 0, "864": 0, "865": 0, "868": 5, "869": 0, "870": 5, "871": 0, "873": 20, "874": 5, "875": 5, "876": 5, "877": 15, "878": 10, "879": 0, "881": 0, "882": 0, "883": 0, "884": 0, "885": 0, "886": 0, "888": 10, "890": 5, "892": 5, "893": 5, "894": 5, "891": 5, "896": 5, "903": 0, "904": 0, "905": 0, "906": 0, "907": 0, "908": 0, "909": 0, "911": 0, "912": 0, "919": 0, "920": 0, "921": 0, "922": 0, "923": 0, "924": 0, "925": 0, "927": 0, "928": 0, "929": 0, "930": 0, "931": 0, "932": 0, "933": 0, "934": 0, "936": 0, "938": 0, "939": 0, "943": 0, "944": 0, "945": 0, "956": 0, "963": 24, "964": 24, "971": 0, "972": 0, "975": 24, "976": 0, "977": 24, "978": 24, "979": 0, "980": 0, "982": 24, "983": 24, "986": 24, "987": 0, "989": 24, "1001": 0, "1002": 0, "1003": 0, "1004": 0, "1006": 0, "1010": 0, "1012": 0, "1013": 0, "1014": 0, "1015": 0, "1016": 0, "1017": 0, "1021": 0, "1022": 0, "1023": 0, "1024": 0, "1025": 0, "1026": 0, "1027": 0, "1028": 0, "1032": 0, "1033": 0, "1034": 0, "1035": 0, "1036": 0, "1037": 0, "1041": 0, "1042": 0, "1043": 0, "1050": 0, "1051": 0, "1052": 0, "1053": 0, "1054": 0, "1055": 0, "1056": 0, "1057": 0, "1058": 0, "1059": 0, "1070": 0, "1071": 0, "1072": 0, "1074": 0, "1075": 0, "1076": 0, "1077": 0, "1078": 0, "1080": 0, "1081": 0, "1092": 0, "1093": 0, "1094": 0, "1095": 0, "1097": 0, "1098": 0, "1099": 0, "1100": 0, "1101": 0, "1102": 0, "1103": 0, "1104": 0, "1111": 0, "1112": 0, "1118": 0, "1119": 0, "1122": 0, "1123": 0, "1124": 0, "1126": 0, "1127": 0, "1128": 0, "1130": 0, "1131": 0, "1132": 0, "1133": 0, "1134": 0, "1136": 0, "1137": 0, "1138": 0, "1139": 0, "1141": 0, "1144": 0, "1145": 0, "1146": 0, "1147": 0, "1148": 0, "1149": 0, "1151": 0, "1152": 0, "1154": 0, "1155": 0, "1156": 0, "1157": 0, "1159": 0, "1160": 0, "1162": 0, "1140": 0, "1166": 7, "1167": 0, "1168": 7, "1169": 7, "1170": 7, "1171": 7, "1177": 0, "1178": 0, "1179": 0, "1180": 0, "1181": 0, "1182": 0, "1187": 0, "1188": 0, "1189": 0, "1190": 0, "1191": 0, "1192": 0, "1196": 0, "1197": 0, "1198": 0, "1199": 0, "1200": 0, "1209": 0, "1210": 0, "1211": 0, "1212": 0, "1213": 0, "1214": 0, "1216": 0, "1217": 0, "1225": 0, "1226": 0, "1227": 0, "1228": 0, "1231": 0, "1232": 0, "1233": 0, "1234": 0, "1235": 0, "1236": 0, "1237": 0, "1238": 0, "1242": 38, "1243": 38, "1244": 38, "1256": 0, "1257": 0, "1258": 0, "1259": 0, "1261": 0, "1260": 0, "1262": 0, "1264": 0, "1266": 0, "1268": 0, "1273": 124, "1274": 95, "1275": 29, "1286": 19, "1287": 19, "1288": 0, "1289": 19, "1290": 19, "1291": 19, "1299": 10, "1300": 0, "1301": 10, "1302": 10, "1303": 10, "1304": 10, "1305": 10, "1306": 40, "1307": 10, "1308": 20, "1309": 10, "1310": 10, "1311": 10, "1314": 0, "1315": 10, "1322": 74, "1323": 74, "1324": 0, "1325": 0, "1326": 74, "1327": 74, "1334": 74, "1335": 74, "1336": 74, "1337": 74, "1338": 74, "1339": 74, "1340": 74, "1341": 74, "1344": 26, "1345": 24, "1346": 26, "1347": 0, "1360": 0, "1361": 0, "1365": 0, "1366": 0, "1367": 0, "1368": 0, "1369": 0, "1370": 0, "1371": 0, "1378": 0, "1379": 0, "1382": 0, "1385": 0, "1386": 0, "1387": 0, "1388": 0, "1396": 0, "1404": 0, "1408": 0, "1409": 0, "1410": 0, "1411": 0, "1412": 0, "1413": 0, "1418": 25, "1419": 0, "1420": 0, "1421": 0, "1426": 1, "1427": 0, "1436": 1, "1437": 0, "1445": 1, "1458": 1, "1468": 1, "1477": 1, "1481": 1, "1490": 1, "1496": 1, "1500": 1, "1504": 1, "1508": 1, "1543": 1, "1546": 1, "1549": 1, "1550": 1, "1554": 1, "1563": 1, "1564": 1, "1581": 1, "1582": 1, "1447": 0, "1448": 0, "1449": 0, "1450": 0, "1451": 0, "1452": 0, "1453": 0, "1454": 0, "1455": 0, "1456": 0, "1460": 0, "1461": 0, "1462": 0, "1464": 0, "1465": 0, "1466": 0, "1463": 0, "1470": 0, "1471": 0, "1472": 0, "1474": 0, "1475": 0, "1478": 0, "1479": 0, "1483": 0, "1484": 0, "1485": 0, "1487": 0, "1488": 0, "1491": 0, "1492": 0, "1493": 0, "1494": 0, "1497": 0, "1498": 0, "1501": 0, "1502": 0, "1505": 0, "1506": 0, "1510": 0, "1511": 0, "1512": 0, "1515": 0, "1517": 0, "1518": 0, "1519": 0, "1520": 0, "1521": 0, "1523": 0, "1524": 0, "1525": 0, "1526": 0, "1528": 0, "1529": 0, "1530": 0, "1532": 0, "1533": 0, "1534": 0, "1535": 0, "1536": 0, "1537": 0, "1540": 0, "1541": 0, "1544": 0, "1547": 0, "1552": 0, "1556": 0, "1557": 0, "1558": 0, "1559": 0, "1560": 0, "1569": 0, "1571": 0, "1573": 0, "1574": 0, "1575": 0, "1576": 0, "1578": 0, "1579": 0, "1584": 0, "1585": 0, "1586": 0, "1587": 0, "1588": 0, "1589": 0, "1593": 1, "1614": 1, "1624": 1, "1628": 1, "1631": 1, "1637": 1, "1642": 1, "1647": 1, "1595": 0, "1597": 0, "1598": 0, "1599": 0, "1600": 0, "1601": 0, "1604": 0, "1605": 0, "1608": 0, "1609": 0, "1611": 0, "1612": 0, "1615": 0, "1616": 0, "1618": 0, "1619": 0, "1620": 0, "1622": 0, "1625": 0, "1626": 0, "1629": 0, "1632": 0, "1633": 0, "1634": 0, "1635": 0, "1638": 0, "1639": 0, "1640": 0, "1643": 0, "1644": 0, "1645": 0, "1648": 0, "1653": 0, "1654": 0, "1655": 0, "1656": 0, "1657": 0, "1658": 0, "1659": 0, "1660": 0, "1668": 0, "1669": 0, "1674": 0, "1676": 0, "1677": 0, "1679": 0, "1680": 0, "1681": 0, "1682": 0, "1683": 0, "1684": 0, "1685": 0, "1687": 0, "1691": 0, "1693": 0, "1694": 0, "1696": 0, "1697": 0, "1699": 0, "1700": 0, "1702": 0, "1703": 0, "1706": 0, "1707": 0, "1711": 0, "1712": 0, "1713": 0, "1714": 0, "1720": 0, "1721": 0, "1722": 0, "1723": 0, "1729": 0, "1730": 0, "1731": 0, "1733": 0, "1734": 0, "1736": 0, "1738": 0, "1742": 0, "1744": 0, "1746": 0, "1747": 0, "1748": 0, "1750": 0, "1751": 0, "1752": 0, "1753": 0, "1754": 0, "1755": 0, "1761": 0, "1762": 0, "1763": 0, "1764": 0, "1765": 0, "1766": 0, "1775": 0, "1776": 0, "1777": 0, "1780": 0, "1782": 0, "1783": 0, "1784": 0, "1785": 0, "1786": 0, "1787": 0, "1791": 0, "1792": 0, "1794": 0, "1795": 0, "1809": 0, "1812": 0, "1813": 0, "1818": 0, "1819": 0, "1820": 0, "1822": 0, "1823": 0, "1826": 0, "1827": 0, "1828": 0, "1833": 0, "1834": 0, "1835": 0, "1836": 0, "1839": 0, "1840": 0, "1843": 0, "1845": 0, "1848": 0, "1849": 0, "1810": 0, "1841": 0, "1846": 0, "1876": 0, "1875": 0, "1883": 0, "1885": 0, "1887": 0, "1891": 0, "1893": 0, "1895": 0, "1896": 0, "1897": 0, "1898": 0, "1900": 0, "1902": 0, "1905": 0, "1906": 0, "1907": 0, "1908": 0, "1909": 0, "1911": 0, "1912": 0, "1915": 0, "1917": 0, "1918": 0, "1919": 0, "1921": 0, "1922": 0, "1923": 0, "1925": 0, "1926": 0, "1929": 0, "1934": 0, "1936": 0, "1937": 0, "1939": 0, "1940": 0, "1941": 0, "1943": 0, "1944": 0, "1947": 0, "1948": 0, "1949": 0, "1884": 0, "1967": 1, "2013": 1, "1968": 0, "1992": 0, "1993": 0, "1994": 0, "1995": 0, "1996": 0, "1997": 0, "1998": 0, "2000": 0, "2002": 0, "2003": 0, "2004": 0, "2005": 0, "2007": 0, "2008": 0, "2009": 0, "2010": 0, "2011": 0, "2014": 0, "2015": 0, "2017": 0, "2018": 0, "2019": 0, "2021": 0, "2022": 0, "2023": 0, "2024": 0, "2025": 0, "2026": 0, "2030": 19, "2031": 19, "2032": 19, "2033": 0, "2034": 0, "2035": 19}}
+ git checkout d79be3ed39b76d3e34431873eec16f6dd354ab17
Note: switching to 'd79be3ed39b76d3e34431873eec16f6dd354ab17'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at d79be3ed39 Refs #32880 -- Rearranged logging security notes.
M	django/db/models/query.py
+ git apply /root/pre_state.patch
error: unrecognized input
