+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD 586a43201d0357e92e8c93548d69a9f42bf548f4
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch master
nothing to commit, working tree clean
+ git show
commit 586a43201d0357e92e8c93548d69a9f42bf548f4
Merge: 4e8b7bd446 55f138cf41
Author: Oscar Benjamin <oscar.j.benjamin@gmail.com>
Date:   Mon Jul 13 22:17:09 2020 +0100

    Merge pull request #19741 from sachin-4099/gsoc#13
    
    [GSoC] Functions: Fixes periodicity of trigonometric function

+ git diff 586a43201d0357e92e8c93548d69a9f42bf548f4
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: mpmath>=0.19 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sympy==1.7.dev0) (1.3.0)
Installing collected packages: sympy
  Attempting uninstall: sympy
    Found existing installation: sympy 1.7.dev0
    Uninstalling sympy-1.7.dev0:
      Successfully uninstalled sympy-1.7.dev0
  DEPRECATION: Legacy editable install of sympy==1.7.dev0 from file:///testbed (setup.py develop) is deprecated. pip 25.3 will enforce this behaviour change. A possible replacement is to add a pyproject.toml or enable --use-pep517, and use setuptools >= 64. If the resulting installation is not behaving as expected, try using --config-settings editable_mode=compat. Please consult the setuptools documentation for more information. Discussion can be found at https://github.com/pypa/pip/issues/11457
  Running setup.py develop for sympy
Successfully installed sympy
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
Checking patch sympy/physics/quantum/dagger.py...
Checking patch sympy/physics/quantum/operator.py...
Applied patch sympy/physics/quantum/dagger.py cleanly.
Applied patch sympy/physics/quantum/operator.py cleanly.
+ git apply -v -
<stdin>:16: trailing whitespace.
    
<stdin>:18: trailing whitespace.
    
Checking patch sympy/polys/tests/test_coverup_sympy__sympy-19783.py...
Applied patch sympy/polys/tests/test_coverup_sympy__sympy-19783.py cleanly.
warning: 2 lines add whitespace errors.
+ PYTHONWARNINGS=ignore::UserWarning,ignore::SyntaxWarning
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(sympy/physics/quantum/dagger\.py|sympy/physics/quantum/operator\.py)' bin/test -C --verbose sympy/polys/tests/test_coverup_sympy__sympy-19783.p
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sympy/physics/quantum/dagger\\.py|sympy/physics/quantum/operator\\.py)']
============================= test process starts ==============================
executable:         /opt/miniconda3/envs/testbed/bin/python3  (3.9.23-final-0) [CPython]
architecture:       64-bit
cache:              no
ground types:       python 
numpy:              None
random seed:        51118167
hash randomization: on (PYTHONHASHSEED=2168613663)

/testbed/sympy/utilities/pytest.py:3: SymPyDeprecationWarning: 

Import sympy.utilities.pytest has been deprecated since SymPy 1.6. Use
Import from sympy.testing.pytest instead. See
https://github.com/sympy/sympy/issues/18095 for more info.

  SymPyDeprecationWarning(
1.11 operator.py(1): """Quantum mechanical operators.
1.11 operator.py(12): from __future__ import print_function, division
1.11 operator.py(14): from sympy import Derivative, Expr, Integer, oo, Mul, expand, Add
1.11 operator.py(15): from sympy.printing.pretty.stringpict import prettyForm
1.11 operator.py(16): from sympy.physics.quantum.dagger import Dagger
1.11 dagger.py(1): """Hermitian conjugation."""
1.11 dagger.py(3): from sympy.core import Expr, Mul
1.11 dagger.py(4): from sympy.functions.elementary.complexes import adjoint
1.11 dagger.py(7):     'Dagger'
1.11 dagger.py(6): __all__ = [
1.11 dagger.py(11): class Dagger(adjoint):
1.11 dagger.py(11): class Dagger(adjoint):
1.11 dagger.py(12):     """General Hermitian conjugate operation.
1.11 dagger.py(77):     def __new__(cls, arg):
1.11 dagger.py(86):     def __mul__(self, other):
1.11 dagger.py(93): adjoint.__name__ = "Dagger"
1.11 dagger.py(94): adjoint._sympyrepr = lambda a, b: "Dagger(%s)" % b._print(a.args[0])
1.11 operator.py(17): from sympy.physics.quantum.qexpr import QExpr, dispatch_method
1.12 operator.py(18): from sympy.matrices import eye
1.12 operator.py(20): __all__ = [
1.12 operator.py(34): class Operator(QExpr):
1.12 operator.py(34): class Operator(QExpr):
1.12 operator.py(35):     """Base class for non-commuting quantum operators.
1.12 operator.py(101):     @classmethod
1.12 operator.py(102):     def default_args(self):
1.12 operator.py(109):     _label_separator = ','
1.12 operator.py(111):     def _print_operator_name(self, printer, *args):
1.12 operator.py(114):     _print_operator_name_latex = _print_operator_name
1.12 operator.py(116):     def _print_operator_name_pretty(self, printer, *args):
1.12 operator.py(119):     def _print_contents(self, printer, *args):
1.12 operator.py(128):     def _print_contents_pretty(self, printer, *args):
1.12 operator.py(140):     def _print_contents_latex(self, printer, *args):
1.12 operator.py(153):     def _eval_commutator(self, other, **options):
1.12 operator.py(157):     def _eval_anticommutator(self, other, **options):
1.12 operator.py(165):     def _apply_operator(self, ket, **options):
1.12 operator.py(168):     def matrix_element(self, *args):
1.12 operator.py(171):     def inverse(self):
1.12 operator.py(174):     inv = inverse
1.12 operator.py(176):     def _eval_inverse(self):
1.12 operator.py(179):     def __mul__(self, other):
1.12 operator.py(187): class HermitianOperator(Operator):
1.12 operator.py(187): class HermitianOperator(Operator):
1.12 operator.py(188):     """A Hermitian operator that satisfies H == Dagger(H).
1.12 operator.py(206):     is_hermitian = True
1.12 operator.py(208):     def _eval_inverse(self):
1.12 operator.py(214):     def _eval_power(self, exp):
1.12 operator.py(226): class UnitaryOperator(Operator):
1.12 operator.py(226): class UnitaryOperator(Operator):
1.12 operator.py(227):     """A unitary operator that satisfies U*Dagger(U) == 1.
1.12 operator.py(245):     def _eval_adjoint(self):
1.12 operator.py(249): class IdentityOperator(Operator):
1.12 operator.py(249): class IdentityOperator(Operator):
1.12 operator.py(250):     """An identity operator I that satisfies op * I == I * op == op for any
1.12 operator.py(267):     @property
1.12 operator.py(268):     def dimension(self):
1.12 operator.py(271):     @classmethod
1.12 operator.py(272):     def default_args(self):
1.12 operator.py(275):     def __init__(self, *args, **hints):
1.12 operator.py(281):     def _eval_commutator(self, other, **hints):
1.12 operator.py(284):     def _eval_anticommutator(self, other, **hints):
1.12 operator.py(287):     def _eval_inverse(self):
1.12 operator.py(290):     def _eval_adjoint(self):
1.12 operator.py(293):     def _apply_operator(self, ket, **options):
1.12 operator.py(296):     def _eval_power(self, exp):
1.12 operator.py(299):     def _print_contents(self, printer, *args):
1.12 operator.py(302):     def _print_contents_pretty(self, printer, *args):
1.12 operator.py(305):     def _print_contents_latex(self, printer, *args):
1.12 operator.py(308):     def __mul__(self, other):
1.12 operator.py(315):     def _represent_default_basis(self, **options):
1.12 operator.py(328): class OuterProduct(Operator):
1.12 operator.py(328): class OuterProduct(Operator):
1.12 operator.py(329):     """An unevaluated outer product between a ket and bra.
1.12 operator.py(389):     is_commutative = False
1.12 operator.py(391):     def __new__(cls, *args, **old_assumptions):
1.12 operator.py(447):     @property
1.12 operator.py(448):     def ket(self):
1.12 operator.py(452):     @property
1.12 operator.py(453):     def bra(self):
1.12 operator.py(457):     def _eval_adjoint(self):
1.12 operator.py(460):     def _sympystr(self, printer, *args):
1.12 operator.py(463):     def _sympyrepr(self, printer, *args):
1.12 operator.py(467):     def _pretty(self, printer, *args):
1.12 operator.py(471):     def _latex(self, printer, *args):
1.12 operator.py(476):     def _represent(self, **options):
1.12 operator.py(481):     def _eval_trace(self, **kwargs):
1.12 operator.py(488): class DifferentialOperator(Operator):
1.12 operator.py(488): class DifferentialOperator(Operator):
1.12 operator.py(489):     """An operator for representing the differential operator, i.e. d/dx
1.12 operator.py(530):     @property
1.12 operator.py(531):     def variables(self):
1.12 operator.py(555):     @property
1.12 operator.py(556):     def function(self):
1.12 operator.py(579):     @property
1.12 operator.py(580):     def expr(self):
1.12 operator.py(604):     @property
1.12 operator.py(605):     def free_symbols(self):
1.12 operator.py(612):     def _apply_operator_Wavefunction(self, func):
1.12 operator.py(623):     def _eval_derivative(self, symbol):
1.12 operator.py(631):     def _print(self, printer, *args):
1.12 operator.py(637):     def _print_pretty(self, printer, *args):
sympy/polys/tests/test_coverup_sympy__sympy-19783.py[1] 
test_dagger_identity_multiplication 1.16 operator.py(273):         return (oo,)
1.16 operator.py(276):         if not len(args) in [0, 1]:
1.16 operator.py(279):         self.N = args[0] if (len(args) == 1 and args[0]) else oo
1.16 dagger.py(78):         if hasattr(arg, 'adjoint'):
1.16 dagger.py(79):             obj = arg.adjoint()
1.16 dagger.py(82):         if obj is not None:
1.16 dagger.py(83):             return obj
1.16 dagger.py(87):         from sympy.physics.quantum import IdentityOperator
1.16 dagger.py(88):         if isinstance(other, IdentityOperator):
1.16 dagger.py(89):             return self
1.16 operator.py(120):         if len(self.label) == 1:
1.16 operator.py(121):             return self._print_label(printer, *args)
ok                                      [OK]


================== tests finished: 1 passed, in 0.70 seconds ===================
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sympy/physics/quantum/dagger\\.py|sympy/physics/quantum/operator\\.py)']
+ cat coverage.cover
{"/testbed/sympy/physics/quantum/operator.py": {"12": 1, "14": 1, "15": 1, "16": 1, "17": 1, "18": 1, "20": 1, "34": 2, "187": 2, "226": 2, "249": 2, "328": 2, "488": 2, "101": 1, "102": 1, "109": 1, "111": 1, "114": 1, "116": 1, "119": 1, "128": 1, "140": 1, "153": 1, "157": 1, "165": 1, "168": 1, "171": 1, "174": 1, "176": 1, "179": 1, "103": 0, "112": 0, "117": 0, "120": 1, "121": 1, "123": 0, "124": 0, "125": 0, "129": 0, "130": 0, "132": 0, "133": 0, "134": 0, "135": 0, "137": 0, "138": 0, "141": 0, "142": 0, "144": 0, "145": 0, "146": 0, "155": 0, "159": 0, "166": 0, "169": 0, "172": 0, "177": 0, "181": 0, "182": 0, "184": 0, "206": 1, "208": 1, "214": 1, "209": 0, "210": 0, "212": 0, "215": 0, "216": 0, "217": 0, "218": 0, "219": 0, "221": 0, "223": 0, "245": 1, "246": 0, "267": 1, "268": 1, "271": 1, "272": 1, "275": 1, "281": 1, "284": 1, "287": 1, "290": 1, "293": 1, "296": 1, "299": 1, "302": 1, "305": 1, "308": 1, "315": 1, "269": 0, "273": 1, "276": 1, "277": 0, "279": 1, "282": 0, "285": 0, "288": 0, "291": 0, "294": 0, "297": 0, "300": 0, "303": 0, "306": 0, "310": 0, "311": 0, "313": 0, "316": 0, "317": 0, "320": 0, "321": 0, "322": 0, "323": 0, "325": 0, "389": 1, "391": 1, "447": 1, "448": 1, "452": 1, "453": 1, "457": 1, "460": 1, "463": 1, "467": 1, "471": 1, "476": 1, "481": 1, "392": 0, "394": 0, "395": 0, "397": 0, "398": 0, "400": 0, "401": 0, "402": 0, "403": 0, "405": 0, "406": 0, "407": 0, "409": 0, "410": 0, "411": 0, "413": 0, "414": 0, "415": 0, "416": 0, "421": 0, "422": 0, "423": 0, "425": 0, "426": 0, "427": 0, "428": 0, "429": 0, "430": 0, "431": 0, "432": 0, "433": 0, "434": 0, "435": 0, "436": 0, "437": 0, "438": 0, "440": 0, "441": 0, "442": 0, "445": 0, "450": 0, "455": 0, "458": 0, "461": 0, "464": 0, "465": 0, "468": 0, "469": 0, "472": 0, "473": 0, "474": 0, "477": 0, "478": 0, "479": 0, "485": 0, "530": 1, "531": 1, "555": 1, "556": 1, "579": 1, "580": 1, "604": 1, "605": 1, "612": 1, "623": 1, "631": 1, "637": 1, "553": 0, "577": 0, "602": 0, "610": 0, "613": 0, "614": 0, "615": 0, "617": 0, "618": 0, "619": 0, "621": 0, "624": 0, "625": 0, "632": 0, "633": 0, "634": 0, "638": 0, "639": 0, "640": 0, "641": 0, "643": 0, "644": 0}}
{"/testbed/sympy/physics/quantum/dagger.py": {"3": 1, "4": 1, "7": 1, "6": 1, "11": 2, "93": 1, "94": 1, "77": 1, "86": 1, "78": 1, "79": 1, "80": 0, "81": 0, "82": 1, "83": 1, "84": 0, "87": 1, "88": 1, "89": 1, "91": 0}}
+ git checkout 586a43201d0357e92e8c93548d69a9f42bf548f4
Note: switching to '586a43201d0357e92e8c93548d69a9f42bf548f4'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 586a43201d Merge pull request #19741 from sachin-4099/gsoc#13
M	sympy/physics/quantum/dagger.py
M	sympy/physics/quantum/operator.py
+ git apply /root/pre_state.patch
error: unrecognized input
