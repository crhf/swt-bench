+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD d746f28949c009251a8741ba03d156964050717f
+ sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen
+ locale-gen
Generating locales (this might take a while)...
  en_US.UTF-8... done
Generation complete.
+ export LANG=en_US.UTF-8
+ LANG=en_US.UTF-8
+ export LANGUAGE=en_US:en
+ LANGUAGE=en_US:en
+ export LC_ALL=en_US.UTF-8
+ LC_ALL=en_US.UTF-8
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit d746f28949c009251a8741ba03d156964050717f
Author: Mariusz Felisiak <felisiak.mariusz@gmail.com>
Date:   Thu Dec 3 09:30:33 2020 +0100

    Refs #27095 -- Fixed test_contained_by_including_F_object when run in reverse.
    
    Tests should not rely on auto PKs.
    
    Test regression in 33403bf80f635577a18426bc99c8a65e31fd8dfa.

diff --git a/tests/postgres_tests/migrations/0002_create_test_models.py b/tests/postgres_tests/migrations/0002_create_test_models.py
index cd8b20ae01..c3ab5efed7 100644
--- a/tests/postgres_tests/migrations/0002_create_test_models.py
+++ b/tests/postgres_tests/migrations/0002_create_test_models.py
@@ -99,6 +99,7 @@ class Migration(migrations.Migration):
                     'field_nested',
                     ArrayField(ArrayField(models.IntegerField(), size=None, null=True), size=None, null=True),
                 ),
+                ('order', models.IntegerField(null=True)),
             ],
             options={
                 'required_db_vendor': 'postgresql',
diff --git a/tests/postgres_tests/models.py b/tests/postgres_tests/models.py
index 56c81064f3..c7f55a2661 100644
--- a/tests/postgres_tests/models.py
+++ b/tests/postgres_tests/models.py
@@ -46,6 +46,7 @@ class IntegerArrayModel(PostgreSQLModel):
 class NullableIntegerArrayModel(PostgreSQLModel):
     field = ArrayField(models.IntegerField(), blank=True, null=True)
     field_nested = ArrayField(ArrayField(models.IntegerField(null=True)), null=True)
+    order = models.IntegerField(null=True)
 
 
 class CharArrayModel(PostgreSQLModel):
diff --git a/tests/postgres_tests/test_array.py b/tests/postgres_tests/test_array.py
index 3c7584e84c..6fb34b3d92 100644
--- a/tests/postgres_tests/test_array.py
+++ b/tests/postgres_tests/test_array.py
@@ -205,11 +205,11 @@ class TestQuerying(PostgreSQLTestCase):
     @classmethod
     def setUpTestData(cls):
         cls.objs = NullableIntegerArrayModel.objects.bulk_create([
-            NullableIntegerArrayModel(field=[1]),
-            NullableIntegerArrayModel(field=[2]),
-            NullableIntegerArrayModel(field=[2, 3]),
-            NullableIntegerArrayModel(field=[20, 30, 40]),
-            NullableIntegerArrayModel(field=None),
+            NullableIntegerArrayModel(order=1, field=[1]),
+            NullableIntegerArrayModel(order=2, field=[2]),
+            NullableIntegerArrayModel(order=3, field=[2, 3]),
+            NullableIntegerArrayModel(order=4, field=[20, 30, 40]),
+            NullableIntegerArrayModel(order=5, field=None),
         ])
 
     def test_empty_list(self):
@@ -304,7 +304,7 @@ class TestQuerying(PostgreSQLTestCase):
 
     def test_contained_by_including_F_object(self):
         self.assertSequenceEqual(
-            NullableIntegerArrayModel.objects.filter(field__contained_by=[models.F('id'), 2]),
+            NullableIntegerArrayModel.objects.filter(field__contained_by=[models.F('order'), 2]),
             self.objs[:3],
         )
 
+ git diff d746f28949c009251a8741ba03d156964050717f
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
Requirement already satisfied: asgiref>=3.2.10 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (3.4.1)
Requirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (2025.2)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (0.4.4)
Requirement already satisfied: typing-extensions in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from asgiref>=3.2.10->Django==3.2) (4.1.1)
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 3.2
    Uninstalling Django-3.2:
      Successfully uninstalled Django-3.2
  Running setup.py develop for Django
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
Successfully installed Django-3.2
+ git apply -v -
Checking patch django/contrib/auth/forms.py...
Applied patch django/contrib/auth/forms.py cleanly.
+ git apply -v -
Checking patch tests/test_coverup_django__django-13741.py...
Applied patch tests/test_coverup_django__django-13741.py cleanly.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/contrib/auth/forms\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-13741
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(django/contrib/auth/forms\\.py)']
Testing against Django installed in '/testbed/django'
0.59 forms.py(1): import unicodedata
0.59 forms.py(3): from django import forms
0.59 forms.py(4): from django.contrib.auth import (
0.59 forms.py(7): from django.contrib.auth.hashers import (
0.59 forms.py(10): from django.contrib.auth.models import User
0.59 forms.py(11): from django.contrib.auth.tokens import default_token_generator
0.59 forms.py(12): from django.contrib.sites.shortcuts import get_current_site
0.59 forms.py(13): from django.core.exceptions import ValidationError
0.59 forms.py(14): from django.core.mail import EmailMultiAlternatives
0.59 forms.py(15): from django.template import loader
0.59 forms.py(16): from django.utils.encoding import force_bytes
0.59 forms.py(17): from django.utils.http import urlsafe_base64_encode
0.59 forms.py(18): from django.utils.text import capfirst
0.59 forms.py(19): from django.utils.translation import gettext, gettext_lazy as _
0.59 forms.py(21): UserModel = get_user_model()
0.59 forms.py(24): def _unicode_ci_compare(s1, s2):
0.59 forms.py(33): class ReadOnlyPasswordHashWidget(forms.Widget):
0.59 forms.py(33): class ReadOnlyPasswordHashWidget(forms.Widget):
0.59 forms.py(34):     template_name = 'auth/widgets/read_only_password_hash.html'
0.59 forms.py(35):     read_only = True
0.59 forms.py(37):     def get_context(self, name, value, attrs):
0.59 forms.py(54): class ReadOnlyPasswordHashField(forms.Field):
0.59 forms.py(54): class ReadOnlyPasswordHashField(forms.Field):
0.59 forms.py(55):     widget = ReadOnlyPasswordHashWidget
0.59 forms.py(57):     def __init__(self, *args, **kwargs):
0.59 forms.py(63): class UsernameField(forms.CharField):
0.59 forms.py(63): class UsernameField(forms.CharField):
0.59 forms.py(64):     def to_python(self, value):
0.59 forms.py(67):     def widget_attrs(self, widget):
0.59 forms.py(75): class UserCreationForm(forms.ModelForm):
0.59 forms.py(75): class UserCreationForm(forms.ModelForm):
0.59 forms.py(79):     """
0.59 forms.py(81):         'password_mismatch': _('The two password fields didn’t match.'),
0.59 forms.py(83):     password1 = forms.CharField(
0.59 forms.py(84):         label=_("Password"),
0.59 forms.py(85):         strip=False,
0.59 forms.py(86):         widget=forms.PasswordInput(attrs={'autocomplete': 'new-password'}),
0.59 forms.py(87):         help_text=password_validation.password_validators_help_text_html(),
0.59 forms.py(89):     password2 = forms.CharField(
0.59 forms.py(90):         label=_("Password confirmation"),
0.59 forms.py(91):         widget=forms.PasswordInput(attrs={'autocomplete': 'new-password'}),
0.59 forms.py(92):         strip=False,
0.59 forms.py(93):         help_text=_("Enter the same password as before, for verification."),
0.59 forms.py(96):     class Meta:
0.59 forms.py(96):     class Meta:
0.59 forms.py(97):         model = User
0.59 forms.py(98):         fields = ("username",)
0.59 forms.py(99):         field_classes = {'username': UsernameField}
0.59 forms.py(101):     def __init__(self, *args, **kwargs):
0.59 forms.py(106):     def clean_password2(self):
0.59 forms.py(116):     def _post_clean(self):
0.59 forms.py(127):     def save(self, commit=True):
0.59 forms.py(69):             **super().widget_attrs(widget),
0.59 forms.py(70):             'autocapitalize': 'none',
0.59 forms.py(71):             'autocomplete': 'username',
0.59 forms.py(135): class UserChangeForm(forms.ModelForm):
0.59 forms.py(135): class UserChangeForm(forms.ModelForm):
0.59 forms.py(136):     password = ReadOnlyPasswordHashField(
0.59 forms.py(137):         label=_("Password"),
0.59 forms.py(138):         help_text=_(
0.59 forms.py(139):             'Raw passwords are not stored, so there is no way to see this '
0.59 forms.py(58):         kwargs.setdefault("required", False)
0.59 forms.py(59):         kwargs.setdefault('disabled', True)
0.59 forms.py(60):         super().__init__(*args, **kwargs)
0.59 forms.py(145):     class Meta:
0.59 forms.py(145):     class Meta:
0.59 forms.py(146):         model = User
0.59 forms.py(147):         fields = '__all__'
0.59 forms.py(148):         field_classes = {'username': UsernameField}
0.59 forms.py(150):     def __init__(self, *args, **kwargs):
0.59 forms.py(69):             **super().widget_attrs(widget),
0.59 forms.py(70):             'autocapitalize': 'none',
0.59 forms.py(71):             'autocomplete': 'username',
0.59 forms.py(160): class AuthenticationForm(forms.Form):
0.59 forms.py(160): class AuthenticationForm(forms.Form):
0.59 forms.py(164):     """
0.59 forms.py(165):     username = UsernameField(widget=forms.TextInput(attrs={'autofocus': True}))
0.59 forms.py(69):             **super().widget_attrs(widget),
0.59 forms.py(70):             'autocapitalize': 'none',
0.59 forms.py(71):             'autocomplete': 'username',
0.59 forms.py(166):     password = forms.CharField(
0.59 forms.py(167):         label=_("Password"),
0.59 forms.py(168):         strip=False,
0.59 forms.py(169):         widget=forms.PasswordInput(attrs={'autocomplete': 'current-password'}),
0.59 forms.py(173):         'invalid_login': _(
0.59 forms.py(174):             "Please enter a correct %(username)s and password. Note that both "
0.59 forms.py(177):         'inactive': _("This account is inactive."),
0.59 forms.py(180):     def __init__(self, request=None, *args, **kwargs):
0.59 forms.py(197):     def clean(self):
0.59 forms.py(210):     def confirm_login_allowed(self, user):
0.59 forms.py(227):     def get_user(self):
0.59 forms.py(230):     def get_invalid_login_error(self):
0.59 forms.py(238): class PasswordResetForm(forms.Form):
0.59 forms.py(238): class PasswordResetForm(forms.Form):
0.59 forms.py(239):     email = forms.EmailField(
0.59 forms.py(240):         label=_("Email"),
0.59 forms.py(241):         max_length=254,
0.59 forms.py(242):         widget=forms.EmailInput(attrs={'autocomplete': 'email'})
0.59 forms.py(246):                   context, from_email, to_email, html_email_template_name=None):
0.59 forms.py(262):     def get_users(self, email):
0.59 forms.py(280):     def save(self, domain_override=None,
0.59 forms.py(281):              subject_template_name='registration/password_reset_subject.txt',
0.59 forms.py(282):              email_template_name='registration/password_reset_email.html',
0.59 forms.py(283):              use_https=False, token_generator=default_token_generator,
0.59 forms.py(284):              from_email=None, request=None, html_email_template_name=None,
0.59 forms.py(285):              extra_email_context=None):
0.59 forms.py(316): class SetPasswordForm(forms.Form):
0.59 forms.py(316): class SetPasswordForm(forms.Form):
0.59 forms.py(320):     """
0.59 forms.py(322):         'password_mismatch': _('The two password fields didn’t match.'),
0.59 forms.py(324):     new_password1 = forms.CharField(
0.59 forms.py(325):         label=_("New password"),
0.59 forms.py(326):         widget=forms.PasswordInput(attrs={'autocomplete': 'new-password'}),
0.59 forms.py(327):         strip=False,
0.59 forms.py(328):         help_text=password_validation.password_validators_help_text_html(),
0.59 forms.py(330):     new_password2 = forms.CharField(
0.59 forms.py(331):         label=_("New password confirmation"),
0.59 forms.py(332):         strip=False,
0.59 forms.py(333):         widget=forms.PasswordInput(attrs={'autocomplete': 'new-password'}),
0.59 forms.py(336):     def __init__(self, user, *args, **kwargs):
0.59 forms.py(340):     def clean_new_password2(self):
0.59 forms.py(352):     def save(self, commit=True):
0.59 forms.py(360): class PasswordChangeForm(SetPasswordForm):
0.59 forms.py(360): class PasswordChangeForm(SetPasswordForm):
0.59 forms.py(364):     """
0.59 forms.py(366):         **SetPasswordForm.error_messages,
0.59 forms.py(367):         'password_incorrect': _("Your old password was entered incorrectly. Please enter it again."),
0.59 forms.py(369):     old_password = forms.CharField(
0.59 forms.py(370):         label=_("Old password"),
0.59 forms.py(371):         strip=False,
0.59 forms.py(372):         widget=forms.PasswordInput(attrs={'autocomplete': 'current-password', 'autofocus': True}),
0.59 forms.py(375):     field_order = ['old_password', 'new_password1', 'new_password2']
0.59 forms.py(377):     def clean_old_password(self):
0.59 forms.py(390): class AdminPasswordChangeForm(forms.Form):
0.59 forms.py(390): class AdminPasswordChangeForm(forms.Form):
0.59 forms.py(393):     """
0.59 forms.py(395):         'password_mismatch': _('The two password fields didn’t match.'),
0.59 forms.py(397):     required_css_class = 'required'
0.59 forms.py(398):     password1 = forms.CharField(
0.59 forms.py(399):         label=_("Password"),
0.59 forms.py(400):         widget=forms.PasswordInput(attrs={'autocomplete': 'new-password', 'autofocus': True}),
0.59 forms.py(401):         strip=False,
0.59 forms.py(402):         help_text=password_validation.password_validators_help_text_html(),
0.59 forms.py(404):     password2 = forms.CharField(
0.59 forms.py(405):         label=_("Password (again)"),
0.59 forms.py(406):         widget=forms.PasswordInput(attrs={'autocomplete': 'new-password'}),
0.59 forms.py(407):         strip=False,
0.59 forms.py(408):         help_text=_("Enter the same password as before, for verification."),
0.59 forms.py(411):     def __init__(self, user, *args, **kwargs):
0.59 forms.py(415):     def clean_password2(self):
0.59 forms.py(426):     def save(self, commit=True):
0.59 forms.py(434):     @property
Skipping setup of unused database(s): other.
Operations to perform:
  Synchronize unmigrated apps: auth, contenttypes, messages, sessions, staticfiles
  Apply all migrations: admin, sites
Synchronizing apps without migrations:
  Creating tables...
    Creating table django_content_type
    Creating table auth_permission
    Creating table auth_group
    Creating table auth_user
    Creating table django_session
    Running deferred SQL...
Running migrations:
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying sites.0001_initial... OK
  Applying sites.0002_alter_domain_unique... OK
Creating test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
System check identified no issues (0 silenced).
test_clean_password_method_necessity (test_coverup_django__django-13741.ReadOnlyPasswordHashFieldTest) ... ok
test_read_only_password_hash_field_disabled (test_coverup_django__django-13741.ReadOnlyPasswordHashFieldTest) ... FAIL

======================================================================
FAIL: test_read_only_password_hash_field_disabled (test_coverup_django__django-13741.ReadOnlyPasswordHashFieldTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "./tests/test_coverup_django__django-13741.py", line 18, in test_read_only_password_hash_field_disabled
    self.assertTrue(password_field.widget.attrs.get('disabled', False))
AssertionError: False is not true

----------------------------------------------------------------------
Ran 2 tests in 0.013s

FAILED (failures=1)
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
0.80 forms.py(151):         super().__init__(*args, **kwargs)
0.80 forms.py(152):         password = self.fields.get('password')
0.80 forms.py(153):         if password:
0.80 forms.py(154):             password.help_text = password.help_text.format('../password/')
0.80 forms.py(155):         user_permissions = self.fields.get('user_permissions')
0.80 forms.py(156):         if user_permissions:
0.80 forms.py(157):             user_permissions.queryset = user_permissions.queryset.select_related('content_type')
0.80 forms.py(65):         return unicodedata.normalize('NFKC', super().to_python(value))
0.80 forms.py(151):         super().__init__(*args, **kwargs)
0.80 forms.py(152):         password = self.fields.get('password')
0.80 forms.py(153):         if password:
0.80 forms.py(154):             password.help_text = password.help_text.format('../password/')
0.80 forms.py(155):         user_permissions = self.fields.get('user_permissions')
0.80 forms.py(156):         if user_permissions:
0.80 forms.py(157):             user_permissions.queryset = user_permissions.queryset.select_related('content_type')
+ cat coverage.cover
{"/testbed/django/contrib/auth/forms.py": {"1": 1, "3": 1, "4": 1, "7": 1, "10": 1, "11": 1, "12": 1, "13": 1, "14": 1, "15": 1, "16": 1, "17": 1, "18": 1, "19": 1, "21": 1, "24": 1, "33": 2, "54": 2, "63": 2, "75": 2, "135": 2, "160": 2, "238": 2, "316": 2, "360": 2, "390": 2, "30": 0, "34": 1, "35": 1, "37": 1, "38": 0, "39": 0, "40": 0, "41": 0, "43": 0, "44": 0, "45": 0, "46": 0, "48": 0, "49": 0, "50": 0, "51": 0, "55": 1, "57": 1, "58": 1, "59": 1, "60": 1, "64": 1, "67": 1, "65": 1, "69": 3, "70": 3, "71": 3, "81": 1, "83": 1, "84": 1, "85": 1, "86": 1, "87": 1, "89": 1, "90": 1, "91": 1, "92": 1, "93": 1, "96": 2, "101": 1, "106": 1, "116": 1, "127": 1, "97": 1, "98": 1, "99": 1, "102": 0, "103": 0, "104": 0, "107": 0, "108": 0, "109": 0, "110": 0, "111": 0, "112": 0, "114": 0, "117": 0, "120": 0, "121": 0, "122": 0, "123": 0, "124": 0, "125": 0, "128": 0, "129": 0, "130": 0, "131": 0, "132": 0, "136": 1, "137": 1, "138": 1, "139": 1, "145": 2, "150": 1, "146": 1, "147": 1, "148": 1, "151": 2, "152": 2, "153": 2, "154": 2, "155": 2, "156": 2, "157": 2, "165": 1, "166": 1, "167": 1, "168": 1, "169": 1, "173": 1, "174": 1, "177": 1, "180": 1, "197": 1, "210": 1, "227": 1, "230": 1, "185": 0, "186": 0, "187": 0, "190": 0, "191": 0, "192": 0, "193": 0, "194": 0, "195": 0, "198": 0, "199": 0, "201": 0, "202": 0, "203": 0, "204": 0, "206": 0, "208": 0, "221": 0, "222": 0, "223": 0, "224": 0, "228": 0, "231": 0, "232": 0, "233": 0, "234": 0, "239": 1, "240": 1, "241": 1, "242": 1, "246": 1, "262": 1, "280": 1, "281": 1, "282": 1, "283": 1, "284": 1, "285": 1, "250": 0, "252": 0, "253": 0, "255": 0, "256": 0, "257": 0, "258": 0, "260": 0, "269": 0, "270": 0, "271": 0, "272": 0, "275": 0, "276": 0, "277": 0, "290": 0, "291": 0, "292": 0, "293": 0, "294": 0, "296": 0, "297": 0, "298": 0, "299": 0, "301": 0, "302": 0, "303": 0, "304": 0, "305": 0, "306": 0, "307": 0, "308": 0, "310": 0, "311": 0, "312": 0, "322": 1, "324": 1, "325": 1, "326": 1, "327": 1, "328": 1, "330": 1, "331": 1, "332": 1, "333": 1, "336": 1, "340": 1, "352": 1, "337": 0, "338": 0, "341": 0, "342": 0, "343": 0, "344": 0, "345": 0, "346": 0, "347": 0, "349": 0, "350": 0, "353": 0, "354": 0, "355": 0, "356": 0, "357": 0, "366": 1, "367": 1, "369": 1, "370": 1, "371": 1, "372": 1, "375": 1, "377": 1, "381": 0, "382": 0, "383": 0, "384": 0, "385": 0, "387": 0, "395": 1, "397": 1, "398": 1, "399": 1, "400": 1, "401": 1, "402": 1, "404": 1, "405": 1, "406": 1, "407": 1, "408": 1, "411": 1, "415": 1, "426": 1, "434": 1, "412": 0, "413": 0, "416": 0, "417": 0, "418": 0, "419": 0, "420": 0, "421": 0, "423": 0, "424": 0, "428": 0, "429": 0, "430": 0, "431": 0, "432": 0, "436": 0, "437": 0, "438": 0, "439": 0, "440": 0}}
+ git checkout d746f28949c009251a8741ba03d156964050717f
Note: switching to 'd746f28949c009251a8741ba03d156964050717f'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at d746f28949 Refs #27095 -- Fixed test_contained_by_including_F_object when run in reverse.
M	django/contrib/auth/forms.py
+ git apply /root/pre_state.patch
error: unrecognized input
