{"instance_id": "pytest-dev__pytest-10051", "repo": "pytest-dev/pytest", "version": "7.2", "environment_setup_commit": "572b5657d7ca557593418ce0319fabff88800c73", "patch_list": ["diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -40,7 +40,6 @@\n else:\n     logging_StreamHandler = logging.StreamHandler\n \n-\n DEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n DEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n _ANSI_ESCAPE_SEQ = re.compile(r\"\\x1b\\[[\\d;]+m\")\n@@ -345,6 +344,10 @@ def reset(self) -> None:\n         self.records = []\n         self.stream = StringIO()\n \n+    def clear(self) -> None:\n+        self.records.clear()\n+        self.stream = StringIO()\n+\n     def handleError(self, record: logging.LogRecord) -> None:\n         if logging.raiseExceptions:\n             # Fail the test if the log message is bad (emit failed).\n@@ -440,7 +443,7 @@ def messages(self) -> List[str]:\n \n     def clear(self) -> None:\n         \"\"\"Reset the list of log records and the captured log text.\"\"\"\n-        self.handler.reset()\n+        self.handler.clear()\n \n     def set_level(self, level: Union[int, str], logger: Optional[str] = None) -> None:\n         \"\"\"Set the level of a logger for the duration of a test.\n", "diff --git a/dev/null b/testing/test_coverup_pytest-dev__pytest-10051.py\nnew file mode 100644\nindex e69de29..00306f7 100644\n--- /dev/null\n+++ b/testing/test_coverup_pytest-dev__pytest-10051.py\n@@ -0,0 +1,22 @@\n+import logging\n+import pytest\n+\n+def test_caplog_clear_bug(caplog):\n+    def verify_consistency():\n+        # Assert that caplog.get_records(\"call\") and caplog.records are the same\n+        assert caplog.get_records(\"call\") == caplog.records\n+\n+    # Initial consistency check\n+    verify_consistency()\n+\n+    # Log a message\n+    logging.warning(\"test\")\n+\n+    # Consistency check after logging\n+    verify_consistency()\n+\n+    # Clear the logs\n+    caplog.clear()\n+\n+    # Consistency check after clear\n+    verify_consistency()\n"], "arch": "x86_64", "base_commit": "aa55975c7d3f6c9f6d7f68accc41bb7cadf0eb9a", "test_directives": ["testing/test_coverup_pytest-dev__pytest-10051.py"], "coverage_files": ["src/_pytest/logging.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_post__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.9", "install": "python -m pip install -e .", "pip_packages": ["attrs==23.1.0", "iniconfig==2.0.0", "packaging==23.1", "pluggy==0.13.1", "py==1.11.0", "tomli==2.0.1"]}, "cache_level": "instance", "test_command": "python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(src/_pytest/logging\\.py)' -m pytest -rA testing/test_coverup_pytest-dev__pytest-10051.py", "req_install_commands": ["conda create -n testbed python=3.9  -y"]}