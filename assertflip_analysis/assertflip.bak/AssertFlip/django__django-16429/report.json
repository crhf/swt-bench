{
    "django__django-16429": {
        "patch_is_None": false,
        "patch_exists": true,
        "patch_successfully_applied": true,
        "resolved": true,
        "coverage_pred": 1.0,
        "coverage_gold": 1.0,
        "coverage_base": 0.0,
        "coverage_delta_pred": 1.0,
        "coverage_delta_gold": 1.0,
        "added_f2p": 1,
        "tests_base": {
            "FAIL_TO_PASS": [],
            "PASS_TO_PASS": [],
            "FAIL_TO_FAIL": [
                "test_coverup_django__django-16429 (unittest.loader._FailedTest)"
            ],
            "PASS_TO_FAIL": [],
            "UNMATCHED": []
        },
        "tests_pred": {
            "FAIL_TO_PASS": [
                "test_timesince_with_long_interval_and_tz (test_coverup_django__django-16429.TimesinceTests)"
            ],
            "PASS_TO_PASS": [],
            "FAIL_TO_FAIL": [],
            "PASS_TO_FAIL": [],
            "UNMATCHED": []
        },
        "tests_gold": {
            "FAIL_TO_PASS": [
                "test_other_units (utils_tests.test_timesince.TZAwareTimesinceTests)",
                "test_thousand_years_ago (utils_tests.test_timesince.TZAwareTimesinceTests)",
                "test_depth (utils_tests.test_timesince.TZAwareTimesinceTests)",
                "test_depth_invalid (utils_tests.test_timesince.TZAwareTimesinceTests)"
            ],
            "PASS_TO_PASS": [
                "test_months_edge (utils_tests.test_timesince.TimesinceTests)",
                "test_leap_year (utils_tests.test_timesince.TZAwareTimesinceTests)",
                "test_different_timezones (utils_tests.test_timesince.TZAwareTimesinceTests)",
                "test_leap_year_new_years_eve (utils_tests.test_timesince.TZAwareTimesinceTests)",
                "test_date_objects (utils_tests.test_timesince.TZAwareTimesinceTests)",
                "test_second_before_equal_first_humanize_time_strings (utils_tests.test_timesince.TimesinceTests)",
                "test_display_second_before_first (utils_tests.test_timesince.TimesinceTests)",
                "test_leap_year_new_years_eve (utils_tests.test_timesince.TimesinceTests)",
                "test_other_units (utils_tests.test_timesince.TimesinceTests)",
                "test_leap_year (utils_tests.test_timesince.TimesinceTests)",
                "test_both_date_objects (utils_tests.test_timesince.TZAwareTimesinceTests)",
                "test_naive_datetime_with_tzinfo_attribute (utils_tests.test_timesince.TimesinceTests)",
                "test_date_objects (utils_tests.test_timesince.TimesinceTests)",
                "test_ignore_microseconds_and_seconds (utils_tests.test_timesince.TimesinceTests)",
                "test_display_second_before_first (utils_tests.test_timesince.TZAwareTimesinceTests)",
                "test_different_timezones (utils_tests.test_timesince.TimesinceTests)",
                "test_multiple_units (utils_tests.test_timesince.TZAwareTimesinceTests)",
                "test_display_first_unit (utils_tests.test_timesince.TimesinceTests)",
                "test_months_edge (utils_tests.test_timesince.TZAwareTimesinceTests)",
                "test_depth_invalid (utils_tests.test_timesince.TimesinceTests)",
                "test_second_before_equal_first_humanize_time_strings (utils_tests.test_timesince.TZAwareTimesinceTests)",
                "test_multiple_units (utils_tests.test_timesince.TimesinceTests)",
                "test_equal_datetimes (utils_tests.test_timesince.TZAwareTimesinceTests)",
                "test_ignore_microseconds_and_seconds (utils_tests.test_timesince.TZAwareTimesinceTests)",
                "test_both_date_objects (utils_tests.test_timesince.TimesinceTests)",
                "test_thousand_years_ago (utils_tests.test_timesince.TimesinceTests)",
                "test_naive_datetime_with_tzinfo_attribute (utils_tests.test_timesince.TZAwareTimesinceTests)",
                "test_display_first_unit (utils_tests.test_timesince.TZAwareTimesinceTests)",
                "test_depth (utils_tests.test_timesince.TimesinceTests)",
                "test_equal_datetimes (utils_tests.test_timesince.TimesinceTests)"
            ],
            "FAIL_TO_FAIL": [],
            "PASS_TO_FAIL": [],
            "UNMATCHED": []
        }
    }
}